<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>静态博客访问优化</title>
      <link href="/posts/1663.html"/>
      <url>/posts/1663.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><hr><blockquote><p>本人咸鱼学生一枚，没多大见识，以下有任何说的不对的地方，欢迎大家指正。</p></blockquote><p>首先本教程是基于 <strong>域名已经备案</strong> 的前提下进行的，理论上，任何静态页面都可以使用本教程，哪怕是你写的一个小demo网页，想让别人看到，都可以使用，前提是<strong>域名已经备案</strong>。<br>域名没有备案的也不要灰心，这里我给出<strong>三个解决方案</strong>：</p><p><strong>一、就是去备案</strong>（这不废话吗？）<br>备案一般必须要有域名服务商的服务器才行，而买服务器又得花很多钱。<br>（我们玩Hexo的口号是什么？白嫖！）<br>那么没服务器怎么办呢？<br>——备案授权码！<br>上哪搞呢？<br>鲁迅曾经说过：有需求的地方，必有市场！<br>（鲁迅：没错，什么都是我说的！）<br>这就得靠我们强大的某淘了，给个关键字：XXX云服务号</p><p><strong>二、就是不备案</strong><br>强行推广一波我的另一篇优化文章，一样可以获得很高的访问速度：<a href="https://blog.sky03.cn/2019/42790.html">Hexo博客优化</a> </p><p><strong>三、使用国外的云服务</strong></p><p>备案是“中国特色”，国外的服务器是不需要备案一说的。可以尝试 谷歌云 或者 亚马逊的AWS。</p><h2 id="核心方案"><a href="#核心方案" class="headerlink" title="核心方案"></a>核心方案</h2><p>开门见山的说，今天的主角：<code>对象存储 + CDN</code>，很多云服务商提供的都有这两个服务。</p><p>方案其实就是将自己的静态网页文件放到云服务商提供的 <code>对象存储</code> 中，而 <code>对象存储</code> 一般提供的都有pages服务，而且访问速度绝对要远比代码托管平台提供的pages服务快的多，而对象存储还可以绑定我们自己的域名，前提是该域名已经备案（没有备案的域名是被无法绑定的）最重要的是我们还可以使用云服务商的CDN，这样又进一步提升了访问速度，这绝对碾压代码托管平台的pages服务，任你再怎么优化也是没有对象存储快的（付费的当然比免费的好用）。</p><p>这个方案的好处是：用远低于购买服务器的价格，就可以获得服务器级别甚至更强的访问性能！</p><p>其实会玩的人看到这里，就已经明白怎么搞了，但是为了很多小白我还要再啰嗦一下。</p><h2 id="科普"><a href="#科普" class="headerlink" title="科普"></a>科普</h2><blockquote><p>再讲解具体步骤之前，让我们先了解一些概念，以便有更好地阅读体验，大佬请忽略</p></blockquote><p><code>对象存储</code>：即每个文件都是一个对象， 所有的文件实际是都是在同一个文件夹内，只不过其前缀不同罢了，如果不能理解，就当是一个存储文件的网盘吧。</p><p><code>CDN</code>： 全称Content Delivery Network即<code>内容分发网络</code>。 CDN加速意思就是在用户和我们的服务器之间加一个缓存机制，通过这个缓存机制动态获取IP地址根据地理位置，让用户到最近的服务器访问，从而可以得到更快的访问速度。</p><p><code>源站</code>：即真正存储网站的服务器。（这里指的是我们的对象存储服务器）</p><p><code>回源</code>： 是指CDN服务器缓存的资源过期后，从<code>源站</code>获取最新的访问资源，然后再缓存到CDN服务器，供下次访问</p><h2 id="各云服务商的价格对比"><a href="#各云服务商的价格对比" class="headerlink" title="各云服务商的价格对比"></a>各云服务商的价格对比</h2><hr><blockquote><p>云服务商有很多，大家可以根据自己的喜好选择，这里我只提供下参考，说的不对的地方请多多指正。</p></blockquote><p>可能很多人会问，说好的白嫖呢？看下价格就明白了，花不了多少钱的。</p><p>服务商的选择因素有很多，比如服务、价格、稳定性等，由于我本人接触云服务这方面时间较短，没什么发言权，那我就只谈谈我们这些「平民」最关心的价格这方面，做个价格对比。</p><p>提供对象存储的云服务商有：阿里云、腾讯云、七牛云、又拍云等。<br>考虑到各服务商的价格可能会有所变动，本节目前提供的价格参考日期为2019.11.26。</p><h3 id="阿里云"><a href="#阿里云" class="headerlink" title="阿里云"></a>阿里云</h3><p>先参考阿里云官方的 <a href="https://help.aliyun.com/document_detail/59636.html?spm=a2c4g.11186623.6.554.2bfe7b55Jc7uJp" target="_blank" rel="noopener">对象存储OSS计费</a> 和 <a href="https://www.aliyun.com/price/product?spm=5176.11785003.overview.23.6ff3142fZTRMFN#/cdn/detail" target="_blank" rel="noopener">CDN计费</a> 文档。</p><ol><li><p>CDN的计费方式有两种：按流量计费 和 按带宽峰值 计费，这里推介选择 <code>按流量计费</code>。</p></li><li><p>OSS计费项有很多，对于几十M的静态博客来说：</p><ul><li>当只用 OSS 时，主要费用就是<ul><li><code>外网流出流量</code> 的费用！</li><li>00:00-08:00（闲时）：0.25元/GB</li><li>8:00-24:00（忙时）：0.50元/GB </li></ul></li><li>当使用 OSS+CDN 时，因为CDN需要到源站获取资源，就不需要从外网获取了，所以这时的费用就是<ul><li><code>回源流量</code> + <code>CDN流量</code>费用</li><li>0.15元/GB + 0.24元/GB = <code>0.39</code>元/GB</li></ul></li></ul></li><li><p>是不是很便宜？相比于购买服务器。</p></li></ol><h3 id="腾讯云"><a href="#腾讯云" class="headerlink" title="腾讯云"></a>腾讯云</h3><p>参考腾讯云官方文档 <a href="https://cloud.tencent.com/document/product/436/6239" target="_blank" rel="noopener">对象存储COS计费</a> <a href="https://cloud.tencent.com/document/product/228/2949#.E6.B5.81.E9.87.8F.E6.8C.89.E9.87.8F.E8.AE.A1.E8.B4.B9" target="_blank" rel="noopener">CDN计费</a> 。</p><ul><li>COS外网下行流量</li></ul><p>整体花费是<code>回源流量</code>＋<code>CDN流量</code> = 0.15元/GB + 0.21元/GB = <code>0.36</code>元/GB</p><p>值得一说的是：腾讯云对这两个服务的新用户是有半年的优惠的。</p><p>CDN：送6个月的免费流量，每月50G，随便High！</p><h3 id="七牛云"><a href="#七牛云" class="headerlink" title="七牛云"></a>七牛云</h3><p>七牛云的回源流量是免费的，所以，整体费用就是CDN流量费用一个</p><p>我曾经看过一个关于阿里云、腾讯云、华为云的横向评测：结果就是华为云以很低的延迟和很高的带宽碾压另外两位。</p><h2 id="各服务商的配置"><a href="#各服务商的配置" class="headerlink" title="各服务商的配置"></a>各服务商的配置</h2><h3 id="腾讯云-1"><a href="#腾讯云-1" class="headerlink" title="腾讯云"></a>腾讯云</h3><h4 id="创建存储桶"><a href="#创建存储桶" class="headerlink" title="创建存储桶"></a>创建存储桶</h4><ol><li><p>登录<a href="https://cloud.tencent.com" target="_blank" rel="noopener">腾讯云</a>，点击右上角<code>控制台</code>，找到<code>云产品</code>，开通<code>对象存储</code>服务。</p></li><li><p><code>存储桶列表</code>-&gt;<code>创建存储桶</code>-&gt; 填写信息</p><ul><li>所属地域 选择离自己位置最近的即可</li><li>访问权限 选择 <code>公有读私有写</code></li><li>标签 无所谓</li></ul><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/fly-03/Sky03-Blog-Background/blog-img/20191129222715.png" alt></p></li></ol><h4 id="上传文件到COS中"><a href="#上传文件到COS中" class="headerlink" title="上传文件到COS中"></a>上传文件到COS中</h4><ol><li><p>继续操作，点击左侧 <code>工具</code>-&gt;<code>客户端下载</code>-&gt; 选择对象系统的 COSBrowser 下载 -&gt; 然后安装即可</p><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/fly-03/Sky03-Blog-Background/blog-img/20191129223718.png" alt> </p><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/fly-03/Sky03-Blog-Background/blog-img/20191129231947.png" alt> </p></li><li><p>点击右上角 账号 下的<code>访问管理</code>-&gt;左侧的<code>访问密钥</code> </p><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/fly-03/Sky03-Blog-Background/blog-img/20191129232332.png" alt> </p><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/fly-03/Sky03-Blog-Background/blog-img/20191129232544.png" alt>  </p></li><li><p>可能会有风险提示，点击<code>继续使用</code>即可 </p><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/fly-03/Sky03-Blog-Background/blog-img/20191129233118.png" alt></p></li><li><p>复制 <code>SecretId</code> 和 <code>SecretKey</code> 这两个是读写COS的密钥，不能泄露！</p><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/fly-03/Sky03-Blog-Background/blog-img/20191129233531.png" alt></p></li><li><p>打开 COSBrowser，输入刚才复制的两个值，点击 <code>登录</code>。</p></li><li><p>在 COSBrowser中，左下角点击 <code>同步</code></p><ul><li><p>本地文件夹选择 <code>Hexo根目录</code>中的<code>public</code>文件夹</p></li><li><p>（public文件夹中的文件为Hexo生成的静态网页文件，我们需要将这些文件放到COS中，供别人访问；git部署的文件也是这些文件！）</p></li><li><p>存储桶目录选择刚才创建的存储桶，存储桶目录留空（目的：将public文件夹中的文件上传到存储桶的根目录）</p></li><li><p>点击 <code>开始同步</code> </p></li></ul><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/fly-03/Sky03-Blog-Background/blog-img/20191129235249.png" alt></p></li></ol><ol start="7"><li>之后可以到网页版的控制台确认文件有没有上传上去。</li></ol><h4 id="开启pages服务"><a href="#开启pages服务" class="headerlink" title="开启pages服务"></a>开启pages服务</h4><ol><li>回到控制台，<code>对象存储</code> -&gt; <code>存储桶列表</code> -&gt; <code>基础配置</code> -&gt; <code>静态网站</code> -&gt; <code>开启</code></li><li>访问节点：即 改COS的访问地址</li><li>强制 HTTPS：建议开启</li><li>索引文档（主页）：填 <code>index.html</code></li><li>错误文档（404页面）：如果有404页面填上404页面的地址，如果没有留空即可。</li><li>重定向规则：设置发生4XX错误时，要填跳转到哪个页面，可以不配置。</li><li>保存</li></ol><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/fly-03/Sky03-Blog-Background/blog-img/20191130003331.png" alt></p><p>之后就可以直接复制 访问节点 的地址到浏览器打开，看能不能访问。 </p><h4 id="绑定域名"><a href="#绑定域名" class="headerlink" title="绑定域名"></a>绑定域名</h4><ol><li><code>对象存储</code> -&gt; <code>存储桶列表</code> -&gt; 点击刚才创建的存储桶 -&gt; 点击 <code>域名管理</code></li><li>如果域名没有备案，可以选择默认域名加速<ul><li>加速地域：国内</li><li>源站类型： 静态网站源站</li><li>回源鉴权：不用打开（公共读不需要鉴权）</li><li>点击保存即可</li></ul></li><li>自定义加速域名，只能绑定备案的域名。</li></ol><h3 id="阿里云-1"><a href="#阿里云-1" class="headerlink" title="阿里云"></a>阿里云</h3><p>阿里云，提供的对象存储叫OSS，在国内可以说是最大的云服务商了，它的对象存储提供的有免费的域名（这意味着可以用来做图床），所以即使你没有备案的域名也是可以用阿里的免费二级域名来做博客的域名，但是我个人觉得博客这种个人品牌性极强的东西，域名最好还是用自己的。</p><h4 id="文件上传到OSS"><a href="#文件上传到OSS" class="headerlink" title="文件上传到OSS"></a>文件上传到OSS</h4><p>首先得把自己的博客文件上传到阿里的OSS中，阿里为OSS提供了各种SDK，如果你足够牛逼，你可以手写一个上传脚本，如果你跟我一样是个菜鸡，那还是老老实实用阿里给的“轮子”吧：上传软件，<br>需要注意对象存储是没有目录结构的，所有的文件都放在一个文件夹内的，只不过每个文件的前缀是不一样的。Like this：</p><h4 id="绑定自己的域名"><a href="#绑定自己的域名" class="headerlink" title="绑定自己的域名"></a>绑定自己的域名</h4><blockquote><p>注意，这里就是我前面说的，域名必须备案才能被绑定，没备案的域名是不能绑定的！</p></blockquote><p>阿里提供的有免费的域名，这个域名是用来访问你的OSS内容的，你可以拿这个域名直接做自己的博客域名，还可以拿来做图床，甚至是，你做了个小网页，想让别人看，怎么办？用这个免费域名就行！</p><p>绑定完之后，就可以拿绑定的这个域名直接访问OSS的内容了</p><h4 id="设置主页、404页面"><a href="#设置主页、404页面" class="headerlink" title="设置主页、404页面"></a>设置主页、404页面</h4><h4 id="使用CDN加速"><a href="#使用CDN加速" class="headerlink" title="使用CDN加速"></a>使用CDN加速</h4>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于百度无法爬取GitHub内容解决方案</title>
      <link href="/posts/7974.html"/>
      <url>/posts/7974.html</url>
      
        <content type="html"><![CDATA[<h2 id="关于百度无法爬取GitHub内容解决方案"><a href="#关于百度无法爬取GitHub内容解决方案" class="headerlink" title="关于百度无法爬取GitHub内容解决方案"></a>关于百度无法爬取GitHub内容解决方案</h2><p>既然百度无法爬取GitHub，那么我们只需要找个可以被百度爬取到的代码托管平台即可（并且还提供pages服务），基本只有国内的平台了：<code>Gitee</code>和<code>Coding</code>！Gitee自定义域名要花钱（九十多，都可以买服务器了），而Coding是可以免费自定义域名的。这里推介大家使用企业版的Coding，因为企业版的Coding仓库服务器是在香港的，而普通版的服务器是在新加坡。地理原因，理论上企业版的更快一些！</p><ol><li><p>将博客同时部署到两个仓库：GitHub和Coding</p><pre class="line-numbers language-yml"><code class="language-yml">deploy:- type: git  repository: git@github.com:skyls03/skyls03.github.io.git  branch: master- type: git  repository: git@e.coding.net:sky03/sky03.git  branch: master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在域名那里，配置两个解析</p><blockquote><p>线路类型作用：如果该值填“国内”，国内的IP就会去访问此项对应的<code>记录值地址</code></p><p>同理，如果该值填写“国外”，国外的IP就会去访问“国外”对应的<code>记录值地址</code></p></blockquote><ol><li><code>线路类型</code>为<code>百度</code>或者<code>国内</code>，记录值为<code>Coding仓库的地址</code> </li><li><code>线路类型</code>为<code>默认</code>或者<code>国外</code>，记录值为<code>GitHub仓库地址</code> </li></ol><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/fly-03/Sky03-Blog-Background/blog-img/20191116162311.png" alt> </p></li><li><p>这样来自<code>百度的spider</code>就会去爬<code>国内Coding</code>的地址，而两个仓库的内容又都是一样的，如果请求IP来自国外，它又会去访问<code>国外的GitHub</code>，这样还有利于外国华侨和那些科学上网的用户访问，一石二鸟！（我真他妈天才！）</p></li><li><p>如果你只用Coding仓库，那就不需要这么麻烦了</p></li><li><p>测试百度Spider能不能爬你的域名</p><ol><li><p>在任意目录下执行以下命令（将“你的域名”换成你的域名）</p><pre class="line-numbers language-sh"><code class="language-sh">curl -A "Mozilla/5.0 (compatible; Baiduspider/2.0; +http://www.baidu.com/search/spider.html)" -o example.html 你的域名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>执行完命令，在该目录下会生成一个文件：<code>example.html</code>，打开它，如果显示</p><ul><li><p><code>Moved Permanently</code>，说明301，被重定向了</p></li><li><p><code>Found</code>，也就是爬到了</p></li><li><p>如果打开是你的首页，说明爬取到的内容就是你的首页HTML内容。</p></li><li><p>如果显示：</p><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/fly-03/Sky03-Blog-Background/blog-img/%60P_E%6038ECQ@_VZ~KW92N69H.png" alt> </p><p>说明域名是解析到GitHub的，403Forbidden访问禁止。</p></li></ul></li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo进阶之各种优化</title>
      <link href="/posts/42790.html"/>
      <url>/posts/42790.html</url>
      
        <content type="html"><![CDATA[<h2 id="npm速度优化"><a href="#npm速度优化" class="headerlink" title="npm速度优化"></a>npm速度优化</h2><hr><blockquote><p>玩hexo的，肯定经常和npm打交道，但是npm的下载速度着实是有点慢。</p><p>由于下面内容会安装较多的插件，建议先更改npm仓库地址，以便能更快的安装插件</p></blockquote><ul><li>阿里的淘宝团队在国内做了个跟npm仓库一样的镜像叫<code>cnpm</code>。</li><li>淘宝镜像与npm官方包的同步频率目前为10分钟一次，来保证尽量与官方服务同步。</li><li>所以二者可以说是一样，不用担心有什么差别。</li></ul><h3 id="通过改变地址来使用淘宝镜像（推介）"><a href="#通过改变地址来使用淘宝镜像（推介）" class="headerlink" title="通过改变地址来使用淘宝镜像（推介）"></a>通过改变地址来使用淘宝镜像（推介）</h3><ul><li><p>npm的默认仓库地址是 <code>https://registry.npmjs.org/</code></p></li><li><p>可以使用以下命令查看当前npm的仓库地址</p><pre class="line-numbers language-sh"><code class="language-sh">npm config get registry<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>可以使用以下命令来改变默认下载地址，从而达到不安装<code>cnpm</code>就能采用淘宝镜像的目的，然后使用上面的get命令查看是否设置成功。</p><pre class="line-numbers language-sh"><code class="language-sh">npm config set registry https://registry.npm.taobao.org<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h3 id="安装CNPM"><a href="#安装CNPM" class="headerlink" title="安装CNPM"></a>安装CNPM</h3><ul><li><p>安装cnpm，命令：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> -g cnpm --registry<span class="token operator">=</span>https://registry.npm.taobao.org<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>安装后，使用以下命令测试是否安装成功：</p><pre class="line-numbers language-bash"><code class="language-bash">cnpm -v<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>成功后，以后都使用 <code>cnpm</code> 代替以前 <code>npm</code> 来执行命令！</p></li></ul><h2 id="访问速度优化"><a href="#访问速度优化" class="headerlink" title="访问速度优化"></a>访问速度优化</h2><hr><h3 id="图片加载优化"><a href="#图片加载优化" class="headerlink" title="图片加载优化"></a>图片加载优化</h3><p>在做优化之前，让我们先了解什么是<code>预加载</code> 和 <code>懒加载</code>（废话时间）。</p><h4 id="什么是预加载"><a href="#什么是预加载" class="headerlink" title="什么是预加载"></a>什么是预加载</h4><p><code>预加载</code>就是进入项目前提前加载资源，避免在项目中加载缓慢，影响用户体验</p><ul><li>缺点：会增加服务器压力</li></ul><h4 id="什么是懒加载"><a href="#什么是懒加载" class="headerlink" title="什么是懒加载"></a>什么是懒加载</h4><p><code>懒加载</code>一般是当图片滚动进可视窗口内才加载图片，可视窗口之外的图片则不加载</p><ul><li>优点：对服务器有一定的缓解压力作用</li></ul><p>我用的 <a href="https://github.com/blinkfox/hexo-theme-matery" target="_blank" rel="noopener">matery主题</a> 整体采用预加载模式，这样可以在我们访问其他页面的时候会稍微快点。我们可以在这个基础上对图片进行懒加载，这样做效果就是html、css、js加载之后，图片再加载。既保证了网页的打开速度，也不会因图片的庞大体积而拖累了整个页面的加载。</p><h4 id="开始操作"><a href="#开始操作" class="headerlink" title="开始操作"></a>开始操作</h4><p>首先安装图片懒加载插件： <a href="https://github.com/Troy-Yang/hexo-lazyload-image" target="_blank" rel="noopener">hexo-lazyload-image</a> </p><p>在Hexo根目录执行</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-lazyload-image --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后在Hexo配置文件末尾加入以下代码</p><pre class="line-numbers language-yml"><code class="language-yml">lazyload:  enable: true   onlypost: false  # 是否只对文章的图片做懒加载  loadingImg: # eg ./images/loading.gif<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>到这里就配置完了，执行<code>hexo cl&amp;&amp;hexo g&amp;&amp;hexo s</code>就有效果了，以后博客上的图片就都是懒加载了，以上步骤理论上任何主题都可以用</p><p>一般情况下懒加载会和gallery插件会发生冲突，结果可能就是点开图片，左翻右翻都是loading image。matery主题的解决方案是：</p><p>修改  <code>/themes/matery/source/js</code>   中的  <code>matery.js</code>文件</p><p>在第108行加上：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">'img[data-original]'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"href"</span><span class="token punctuation">,</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"data-original"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>做完这步之后，还有点小Bug，首页的logo点击会直接打开logo图，而不是跳到首页。</p><p>伪解决方案：打开 <code>/themes/matery/layout/_partial/header.ejs</code>文件，</p><p>在<code>img</code>和<code>span</code>的两个头加个<code>div</code>：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>brand-logo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>&lt;%- url_for() %<span class="token punctuation">></span><span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>waves-effect waves-light<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>            &lt;% if (theme.logo !== undefined &amp;&amp; theme.logo.length > 0) { %>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>&lt;%<span class="token punctuation">=</span> theme.logo %<span class="token punctuation">></span><span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>logo-img<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>LOGO<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">}</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>logo-span<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%-</span> <span class="token attr-name">config.title</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="自定义loading图片"><a href="#自定义loading图片" class="headerlink" title="自定义loading图片"></a>自定义loading图片</h4><p><code>hexo-lazyload-image</code> 插件提供了自定义loading图片的选项</p><p>方法就是在 <code>loadingImg</code> 后配置图片的路径就好了</p><p><strong>Like this：</strong> </p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">lazyload</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true </span>  <span class="token key atrule">onlypost</span><span class="token punctuation">:</span> <span class="token boolean important">false  </span><span class="token comment" spellcheck="true"># 是否只对文章的图片做懒加载</span>  <span class="token key atrule">loadingImg</span><span class="token punctuation">:</span> /medias/loading.gif <span class="token comment" spellcheck="true"># eg ./images/loading.gif</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="懒加载优化"><a href="#懒加载优化" class="headerlink" title="懒加载优化"></a>懒加载优化</h4><blockquote><p>经过以上操作就已经很完美了，以下内容可做可不做</p></blockquote><ul><li><p>其实第一次加载后本地都是有缓存的，如果每次都把loading显示出来就不那么好看</p></li><li><p>所以我们需要对插件进行魔改，让图片稍微提前加载，避开加载动画</p></li><li><p>打开 <code>Hexo根目录</code>&gt;<code>node_modules</code> &gt; <code>hexo-lazyload-image</code> &gt; <code>lib</code> &gt; <code>simple-lazyload.js</code> 文件</p></li><li><p>第9行修改为：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token operator">&amp;&amp;</span> rect<span class="token punctuation">.</span>top <span class="token operator">&lt;=</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span>innerHeight <span class="token operator">+</span><span class="token number">240</span> <span class="token operator">||</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>clientHeight <span class="token operator">+</span><span class="token number">240</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>作用：提前240个像素加载图片；当然这个值也可以根据自己情况修改</p></li></ul><h3 id="代码压缩优化"><a href="#代码压缩优化" class="headerlink" title="代码压缩优化"></a>代码压缩优化</h3><h4 id="为什么要把代码压缩？"><a href="#为什么要把代码压缩？" class="headerlink" title="为什么要把代码压缩？"></a>为什么要把代码压缩？</h4><p>因为hexo生成的html、css、js等都有很多的空格或者换行，而空格和换行也是占用字节的，所以需要将空格换行去掉也就是我要进行的“压缩”。</p><p>有人说空格换行能占多少字节？确实占不了多少，但是一个人访问是这么多字节，那么一百人，一万人呢？加起来这量就不少了吧，这都是流量啊！这也是很多css/js文件的后缀为*.min.js或*.min.css的原因。虽然我们可能没那么多访问量，但是能减小一点资源文件的大小也是对访问速度有那么一点提升的。</p><h4 id="gulp实现代码压缩"><a href="#gulp实现代码压缩" class="headerlink" title="gulp实现代码压缩"></a>gulp实现代码压缩</h4><ul><li><p>cd到Hexo根目录依次执行以下命令：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 全局安装gulp模块</span><span class="token function">npm</span> <span class="token function">install</span> gulp -g<span class="token comment" spellcheck="true"># 安装各种小功能模块  执行这步的时候，可能会提示权限的问题，最好以管理员模式执行</span><span class="token function">npm</span> <span class="token function">install</span> gulp gulp-htmlclean gulp-htmlmin gulp-minify-css gulp-uglify gulp-imagemin --save<span class="token comment" spellcheck="true"># 额外的功能模块</span><span class="token function">npm</span> <span class="token function">install</span> gulp-debug gulp-clean-css gulp-changed gulp-if gulp-plumber gulp-babel babel-preset-es2015 del @babel/core --save<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在Hexo根目录新建文件 <code>gulpfile.js</code>，并复制以下内容到文件中，有中文注释，可以根据自己需求修改。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> gulp <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"gulp"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> debug <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"gulp-debug"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> cleancss <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"gulp-clean-css"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//css压缩组件</span><span class="token keyword">var</span> uglify <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"gulp-uglify"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//js压缩组件</span><span class="token keyword">var</span> htmlmin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"gulp-htmlmin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//html压缩组件</span><span class="token keyword">var</span> htmlclean <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"gulp-htmlclean"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//html清理组件</span><span class="token keyword">var</span> imagemin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"gulp-imagemin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//图片压缩组件</span><span class="token keyword">var</span> changed <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"gulp-changed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//文件更改校验组件</span><span class="token keyword">var</span> gulpif <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"gulp-if"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//任务 帮助调用组件</span><span class="token keyword">var</span> plumber <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"gulp-plumber"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//容错组件（发生错误不跳出任务，并报出错误内容）</span><span class="token keyword">var</span> isScriptAll <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//是否处理所有文件，(true|处理所有文件)(false|只处理有更改的文件)</span><span class="token keyword">var</span> isDebug <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//是否调试显示 编译通过的文件</span><span class="token keyword">var</span> gulpBabel <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"gulp-babel"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> es2015Preset <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"babel-preset-es2015"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> del <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"del"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> Hexo <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"hexo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> hexo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Hexo</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span><span class="token function">cwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 初始化一个hexo对象</span><span class="token comment" spellcheck="true">// 清除public文件夹</span>gulp<span class="token punctuation">.</span><span class="token function">task</span><span class="token punctuation">(</span><span class="token string">"clean"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">del</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"public/**/*"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 下面几个跟hexo有关的操作，主要通过hexo.call()去执行，注意return</span><span class="token comment" spellcheck="true">// 创建静态页面 （等同 hexo generate）</span>gulp<span class="token punctuation">.</span><span class="token function">task</span><span class="token punctuation">(</span><span class="token string">"generate"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> hexo<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> hexo            <span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">"generate"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>                watch<span class="token punctuation">:</span> <span class="token boolean">false</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> hexo<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> hexo<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 启动Hexo服务器</span>gulp<span class="token punctuation">.</span><span class="token function">task</span><span class="token punctuation">(</span><span class="token string">"server"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> hexo        <span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> hexo<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">"server"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 部署到服务器</span>gulp<span class="token punctuation">.</span><span class="token function">task</span><span class="token punctuation">(</span><span class="token string">"deploy"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> hexo<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> hexo            <span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">"deploy"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>                watch<span class="token punctuation">:</span> <span class="token boolean">false</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> hexo<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> hexo<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 压缩public目录下的js文件</span>gulp<span class="token punctuation">.</span><span class="token function">task</span><span class="token punctuation">(</span><span class="token string">"compressJs"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> gulp        <span class="token punctuation">.</span><span class="token function">src</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"./public/**/*.js"</span><span class="token punctuation">,</span> <span class="token string">"!./public/libs/**"</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">/</span><span class="token operator">/</span>排除的js        <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">gulpif</span><span class="token punctuation">(</span><span class="token operator">!</span>isScriptAll<span class="token punctuation">,</span> <span class="token function">changed</span><span class="token punctuation">(</span><span class="token string">"./public"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">gulpif</span><span class="token punctuation">(</span>isDebug<span class="token punctuation">,</span> <span class="token function">debug</span><span class="token punctuation">(</span><span class="token punctuation">{</span> title<span class="token punctuation">:</span> <span class="token string">"Compress JS:"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">plumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>            <span class="token function">gulpBabel</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                presets<span class="token punctuation">:</span> <span class="token punctuation">[</span>es2015Preset<span class="token punctuation">]</span> <span class="token operator">/</span><span class="token operator">/</span> es5检查机制            <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">uglify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span><span class="token operator">/</span><span class="token function">调用压缩组件方法uglify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>对合并的文件进行压缩        <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>gulp<span class="token punctuation">.</span><span class="token function">dest</span><span class="token punctuation">(</span><span class="token string">"./public"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">/</span><span class="token operator">/</span>输出到目标目录<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">/</span><span class="token operator">/</span> 压缩<span class="token keyword">public</span>目录下的css文件gulp<span class="token punctuation">.</span><span class="token function">task</span><span class="token punctuation">(</span><span class="token string">"compressCss"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> option <span class="token operator">=</span> <span class="token punctuation">{</span>        rebase<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>        <span class="token operator">/</span><span class="token operator">/</span>advanced<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token operator">/</span><span class="token operator">/</span>类型：Boolean 默认：<span class="token boolean">true</span> <span class="token punctuation">[</span>是否开启高级优化（合并选择器等）<span class="token punctuation">]</span>        compatibility<span class="token punctuation">:</span> <span class="token string">"ie7"</span> <span class="token operator">/</span><span class="token operator">/</span>保留ie7及以下兼容写法 类型：String 默认：<span class="token string">''</span>or<span class="token string">'*'</span> <span class="token punctuation">[</span>启用兼容模式； <span class="token string">'ie7'</span>：IE7兼容模式，<span class="token string">'ie8'</span>：IE8兼容模式，<span class="token string">'*'</span>：IE9<span class="token operator">+</span>兼容模式<span class="token punctuation">]</span>        <span class="token operator">/</span><span class="token operator">/</span>keepBreaks<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token operator">/</span><span class="token operator">/</span>类型：Boolean 默认：<span class="token boolean">false</span> <span class="token punctuation">[</span>是否保留换行<span class="token punctuation">]</span>        <span class="token operator">/</span><span class="token operator">/</span>keepSpecialComments<span class="token punctuation">:</span> <span class="token string">'*'</span> <span class="token operator">/</span><span class="token operator">/</span>保留所有特殊前缀 当你用autoprefixer生成的浏览器前缀，如果不加这个参数，有可能将会删除你的部分前缀    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> gulp        <span class="token punctuation">.</span><span class="token function">src</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"./public/**/*.css"</span><span class="token punctuation">,</span> <span class="token string">"!./public/**/*.min.css"</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//排除的css</span>        <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">gulpif</span><span class="token punctuation">(</span><span class="token operator">!</span>isScriptAll<span class="token punctuation">,</span> <span class="token function">changed</span><span class="token punctuation">(</span><span class="token string">"./public"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">gulpif</span><span class="token punctuation">(</span>isDebug<span class="token punctuation">,</span> <span class="token function">debug</span><span class="token punctuation">(</span><span class="token punctuation">{</span> title<span class="token punctuation">:</span> <span class="token string">"Compress CSS:"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">plumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">cleancss</span><span class="token punctuation">(</span>option<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>gulp<span class="token punctuation">.</span><span class="token function">dest</span><span class="token punctuation">(</span><span class="token string">"./public"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 压缩public目录下的html文件</span>gulp<span class="token punctuation">.</span><span class="token function">task</span><span class="token punctuation">(</span><span class="token string">"compressHtml"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> cleanOptions <span class="token operator">=</span> <span class="token punctuation">{</span>        protect<span class="token punctuation">:</span> <span class="token regex">/&lt;\!--%fooTemplate\b.*?%-->/g</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//忽略处理</span>        unprotect<span class="token punctuation">:</span> <span class="token operator">/</span><span class="token operator">&lt;</span>script <span class="token punctuation">[</span><span class="token operator">^</span><span class="token operator">></span><span class="token punctuation">]</span><span class="token operator">*</span>\btype<span class="token operator">=</span><span class="token string">"text\/x-handlebars-template"</span><span class="token punctuation">[</span>\s\S<span class="token punctuation">]</span><span class="token operator">+</span><span class="token operator">?</span><span class="token operator">&lt;</span>\<span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">/</span>gi <span class="token comment" spellcheck="true">//特殊处理</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> minOption <span class="token operator">=</span> <span class="token punctuation">{</span>        collapseWhitespace<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//压缩HTML</span>        collapseBooleanAttributes<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//省略布尔属性的值 &lt;input checked="true"/> ==> &lt;input /></span>        removeEmptyAttributes<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//删除所有空格作属性值 &lt;input id="" /> ==> &lt;input /></span>        removeScriptTypeAttributes<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//删除&lt;script>的type="text/javascript"</span>        removeStyleLinkTypeAttributes<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//删除&lt;style>和&lt;link>的type="text/css"</span>        removeComments<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//清除HTML注释</span>        minifyJS<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//压缩页面JS</span>        minifyCSS<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//压缩页面CSS</span>        minifyURLs<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token comment" spellcheck="true">//替换页面URL</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> gulp        <span class="token punctuation">.</span><span class="token function">src</span><span class="token punctuation">(</span><span class="token string">"./public/**/*.html"</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">gulpif</span><span class="token punctuation">(</span>isDebug<span class="token punctuation">,</span> <span class="token function">debug</span><span class="token punctuation">(</span><span class="token punctuation">{</span> title<span class="token punctuation">:</span> <span class="token string">"Compress HTML:"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">plumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">htmlclean</span><span class="token punctuation">(</span>cleanOptions<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">htmlmin</span><span class="token punctuation">(</span>minOption<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>gulp<span class="token punctuation">.</span><span class="token function">dest</span><span class="token punctuation">(</span><span class="token string">"./public"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 压缩 public/medias 目录内图片</span>gulp<span class="token punctuation">.</span><span class="token function">task</span><span class="token punctuation">(</span><span class="token string">"compressImage"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> option <span class="token operator">=</span> <span class="token punctuation">{</span>        optimizationLevel<span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//类型：Number 默认：3 取值范围：0-7（优化等级）</span>        progressive<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//类型：Boolean 默认：false 无损压缩jpg图片</span>        interlaced<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//类型：Boolean 默认：false 隔行扫描gif进行渲染</span>        multipass<span class="token punctuation">:</span> <span class="token boolean">false</span> <span class="token comment" spellcheck="true">//类型：Boolean 默认：false 多次优化svg直到完全优化</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> gulp        <span class="token punctuation">.</span><span class="token function">src</span><span class="token punctuation">(</span><span class="token string">"./public/medias/**/*.*"</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">gulpif</span><span class="token punctuation">(</span><span class="token operator">!</span>isScriptAll<span class="token punctuation">,</span> <span class="token function">changed</span><span class="token punctuation">(</span><span class="token string">"./public/medias"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">gulpif</span><span class="token punctuation">(</span>isDebug<span class="token punctuation">,</span> <span class="token function">debug</span><span class="token punctuation">(</span><span class="token punctuation">{</span> title<span class="token punctuation">:</span> <span class="token string">"Compress Images:"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">plumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">imagemin</span><span class="token punctuation">(</span>option<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>gulp<span class="token punctuation">.</span><span class="token function">dest</span><span class="token punctuation">(</span><span class="token string">"./public"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 执行顺序： 清除public目录 -> 产生原始博客内容 -> 执行压缩混淆 -> 部署到服务器</span>gulp<span class="token punctuation">.</span><span class="token function">task</span><span class="token punctuation">(</span>    <span class="token string">"build"</span><span class="token punctuation">,</span>    gulp<span class="token punctuation">.</span><span class="token function">series</span><span class="token punctuation">(</span>        <span class="token string">"clean"</span><span class="token punctuation">,</span>        <span class="token string">"generate"</span><span class="token punctuation">,</span>        <span class="token string">"compressHtml"</span><span class="token punctuation">,</span>        <span class="token string">"compressCss"</span><span class="token punctuation">,</span>        <span class="token string">"compressJs"</span><span class="token punctuation">,</span>        <span class="token string">"compressImage"</span><span class="token punctuation">,</span>        gulp<span class="token punctuation">.</span><span class="token function">parallel</span><span class="token punctuation">(</span><span class="token string">"deploy"</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 默认任务</span>gulp<span class="token punctuation">.</span><span class="token function">task</span><span class="token punctuation">(</span>    <span class="token string">"default"</span><span class="token punctuation">,</span>    gulp<span class="token punctuation">.</span><span class="token function">series</span><span class="token punctuation">(</span>        <span class="token string">"clean"</span><span class="token punctuation">,</span>        <span class="token string">"generate"</span><span class="token punctuation">,</span>        gulp<span class="token punctuation">.</span><span class="token function">parallel</span><span class="token punctuation">(</span><span class="token string">"compressHtml"</span><span class="token punctuation">,</span> <span class="token string">"compressCss"</span><span class="token punctuation">,</span> <span class="token string">"compressJs"</span><span class="token punctuation">,</span><span class="token string">"compressImage"</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Gulp4最大的一个改变就是gulp.task函数现在只支持两个参数，分别是任务名和运行任务的函数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>以后的执行方式有两种：</p><ol><li>直接在Hexo根目录执行 <code>gulp</code>或者 <code>gulp default</code> ，这个命令相当于 <code>hexo cl&amp;&amp;hexo g</code> 并且再把代码和图片压缩。</li><li>在Hexo根目录执行 <code>gulp build</code> ，这个命令与第1种相比是：在最后又加了个 <code>hexo d</code> ，等于说生成、压缩文件后又帮你自动部署了。  </li></ol></li><li><p>值得注意的是：这个加入了图片压缩，如果不想用图片压缩可以把第154行的 <code>&quot;compressImage&quot;,</code> 和第165行的 <code>,&quot;compressImage&quot;</code> 去掉即可</p></li></ul><h4 id="hexo-neat插件实现代码压缩"><a href="#hexo-neat插件实现代码压缩" class="headerlink" title="hexo-neat插件实现代码压缩"></a>hexo-neat插件实现代码压缩</h4><ul><li><p>可能以上方法比较复杂，来介绍个简单的，<a href="https://github.com/rozbo/hexo-neat" target="_blank" rel="noopener">hexo-neat</a>插件也是用来压缩代码的，底层也是通过gulp来实现的。</p></li><li><p>但是这个插件是有Bug的：</p><ul><li>压缩 md 文件会使 markdown 语法的代码块消失</li><li>会删除全角空格</li></ul></li><li><p>Hexo根目录执行安装代码：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-neat --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>在Hexo配置文件<code>_config.yml</code> 末尾加入以下配置：</p><pre class="line-numbers language-yml"><code class="language-yml">neat_enable: trueneat_html:  enable: true  exclude:neat_css:  enable: true  exclude:    - '*.min.css'neat_js:  enable: true  mangle: true  output:  compress:  exclude:    - '*.min.js'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>然后直接 <code>hexo cl&amp;&amp;hexo g</code> 就可以了，会自动压缩文件 。</p></li><li><p><strong>补充</strong>：为了解决以上Bug，<strong>对于matery主题</strong>（其他主题自行解决）需要将以上默认配置修改为：</p><pre class="line-numbers language-yml"><code class="language-yml">#hexo-neat 优化提速插件（去掉HTML、css、js的blank字符）neat_enable: trueneat_html:  enable: true  exclude:    - '**/*.md'neat_css:  enable: true  exclude:    - '**/*.min.css'neat_js:  enable: true  mangle: true  output:  compress:  exclude:    - '**/*.min.js'    - '**/**/instantpage.js'    - '**/matery.js'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="全站CDN加速"><a href="#全站CDN加速" class="headerlink" title="全站CDN加速"></a>全站CDN加速</h3><p>本节参考：<a href="https://removeif.github.io/2019/09/25/tools/github-page网站cdn优化加速.html" target="_blank" rel="noopener">github page网站cdn优化加速 - 辣椒の酱</a></p><p>CDN的全称是Content Delivery Network，即内容分发网络。CDN是构建在网络之上的内容分发网络，依靠部署在各地的边缘服务器，通过中心平台的负载均衡、内容分发、调度等功能模块，使用户就近获取所需内容，降低网络拥塞，提高用户访问响应速度和命中率。CDN的关键技术主要有内容存储和分发技术。——百度百科 </p><p>放在Github的资源在国内加载速度比较慢，因此需要使用CDN加速来优化网站打开速度，<a href="https://www.jsdelivr.com" target="_blank" rel="noopener">jsDelivr</a> + Github便是免费且好用的CDN，非常适合博客网站使用。 </p><p><strong>用法：</strong></p><pre class="line-numbers language-http"><code class="language-http"><span class="token header-name keyword">https:</span>//cdn.jsdelivr.net/gh/你的用户名/你的仓库名@发布的版本号/文件路径<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> <strong>例如：</strong></p><pre class="line-numbers language-http"><code class="language-http"><span class="token header-name keyword">https:</span>//cdn.jsdelivr.net/gh/skyls03/skyls03.github.io/medias/loading.gif<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> 注意：版本号不是必需的，是为了区分新旧资源，如果不使用版本号，将会直接引用最新资源</p><p>还可以配合<code>PicGo</code>图床上传工具的<strong>自定义域名前缀</strong>来上传图片，使用极其方便。更多详细信息可参考我另一篇文章：<a href="https://blog.sky03.cn/posts/4873.html#toc-heading-6">超好用的软件插件网站集合</a> </p><h4 id="重点（敲黑板！）"><a href="#重点（敲黑板！）" class="headerlink" title="重点（敲黑板！）"></a>重点（敲黑板！）</h4><hr><p><strong>这个不止可以作用于图片，可以像这样把所有的css、js等文件的加载路径都修改下，从而让全站使用CDN加速！具体怎么修改要根据主题的情况而定，比较麻烦，不过原理都是一样的，有能力的可以改改。</strong></p><p>这里我提供一个4.15M的图片文件，供大家测试：</p><p><code>腾讯</code>：<a href="https://blog.sky03.cn/medias/test.jpg">COS + CDN</a> </p><p><code>GitHub</code>：<a href="https://cdn.jsdelivr.net/gh/skyls03/skyls03.github.io/medias/test.jpg" target="_blank" rel="noopener">GitHub + jsDelivr</a> </p><p><code>阿里</code>：<a href="https://sky03-blog-images.oss-cn-beijing.aliyuncs.com/blog-img/test.jpg" target="_blank" rel="noopener">OSS</a> </p><p>浏览器<code>打开</code>-&gt;<code>F12</code>-&gt;<code>Network</code>-&gt;<code>Ctrl + F5(强制刷新，即不使用缓存刷新)</code>，然后看加载时间多少。</p><p><strong>我的测试结果</strong>：</p><blockquote><p>每个人的网络情况不一样，测试数据仅供参考</p></blockquote><ul><li><p>阿里云的<code>OSS</code>：2.60s加载完成</p></li><li><p><code>jsDelivr + Github</code>：1.68s加载完成</p></li></ul><h2 id="SEO优化"><a href="#SEO优化" class="headerlink" title="SEO优化"></a>SEO优化</h2><hr><blockquote><p>SEO（Search Engine Optimization）：汉译为搜索引擎优化。是一种方式：利用搜索引擎的规则提高网站在有关搜索引擎内的自然排名。     ——百度百科</p></blockquote><h3 id="百度收录"><a href="#百度收录" class="headerlink" title="百度收录"></a>百度收录</h3><blockquote><p>在这之前，<strong>有个事情需要注意：</strong> </p><p><code>GitHub</code>是不允许百度的<code>Spider</code>（蜘蛛）爬取<code>GitHub</code>上的内容的，所以任何部署在GitHub上的静态博客都是不能百度爬取到的！</p><p>解决方案：可以参考我另一篇文章 <a href="https://blog.sky03.cn/posts7974.html">关于百度无法爬取GitHub内容解决方案</a> </p></blockquote><h4 id="让百度收录你的站点"><a href="#让百度收录你的站点" class="headerlink" title="让百度收录你的站点"></a>让百度收录你的站点</h4><p>首先来搞百度的，刚建完站在百度上是不可能搜索到我们的网站的，可以先在百度上搜索<code>site:&lt;你的域名&gt;</code>，一般是搜不到的，然后点击 <code>提交网址</code> 将自己的网站提交给百度。</p><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/fly-03/Sky03-Blog-Background/blog-img/20191116113735.png" alt> </p><h4 id="添加自己的站点到百度"><a href="#添加自己的站点到百度" class="headerlink" title="添加自己的站点到百度"></a>添加自己的站点到百度</h4><p>登录<a href="https://ziyuan.baidu.com" target="_blank" rel="noopener">百度搜索资源平台</a>， 只要是百度旗下的账号就可以， 登录成功之后在站点管理中点击<a href="https://ziyuan.baidu.com/site/siteadd" target="_blank" rel="noopener">添加网站</a>，输入域名，三步走。</p><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/fly-03/Sky03-Blog-Background/blog-img/20191116120437.png" alt> </p><p>第三步验证网站的时候， 验证网站所有权的方式有三种： </p><ul><li>文件验证 </li><li><code>HTML</code>标签验证 </li><li><code>CNAME</code>解析验证<strong>（推荐使用）</strong> </li></ul><p>同理，百度的spider是爬取不到GitHub的内容的，所以<code>HTML标签验证</code>方式也是不太可取的。</p><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/fly-03/Sky03-Blog-Background/blog-img/20191116122144.png" alt> </p><h4 id="向百度推送自己的资源"><a href="#向百度推送自己的资源" class="headerlink" title="向百度推送自己的资源"></a>向百度推送自己的资源</h4><p>经过以上步骤，百度已经知道有我们网站的存在了，但是百度还不知道我们的网站上有什么内容，所以要向百度推送我们的内容。</p><p>还是在百度资源搜索平台，找到数据引入-&gt;链接提交，可以看到向百度推送自己的内容有两个方式：</p><ol><li><code>自动提交</code> （分三种）<ul><li>主动推送</li><li>自动推送</li><li>sitemap（站点地图）</li></ul></li><li><code>手动提交</code><ul><li>即手动地将链接一次性提交给百度</li></ul></li></ol><p>一般自动提交比手动提交效果好一点，自动提交又从效率上来说：</p><p><strong>主动推送&gt;自动推送&gt;sitemap</strong></p><p><strong>自动提交的三种方式</strong>：</p><ol><li><code>主动推送</code>：最为快速的提交方式。将站点当天新产出链接通过此方式推送给百度，以保证新链接可以及时被百度收录。</li><li><code>自动推送</code>：最为便捷的提交方式。将自动推送的JS代码部署在站点的每一个页面源代码中，当部署代码的页面在每次被浏览时，链接就会被自动推送给百度。可以与主动推送配合使用。</li><li><code>sitemap</code>：您可以定期将网站链接放到<code>sitemap文件</code>中，然后将<code>sitemap文件</code>提交给百度。百度会周期性的抓取检查您提交的<code>sitemap</code>，对其中的链接进行处理，但收录速度慢于主动推送。</li></ol><h5 id="使用sitemap方式推送"><a href="#使用sitemap方式推送" class="headerlink" title="使用sitemap方式推送"></a>使用sitemap方式推送</h5><p><strong>安装sitemap插件</strong> </p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-generator-sitemap --save <span class="token function">npm</span> <span class="token function">install</span> hexo-generator-baidu-sitemap --save<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这两个插件是用来生成 <code>Sitemap文件</code> 的插件，而 <code>Sitemap</code>  是用来告知搜索引擎我们的网站上有哪些可供抓取的网页的。 </p><p><strong>注意一点：</strong><br><strong>hexo配置文件中的url一定要改成你的域名，这两个插件是根据你的url生成站点地图的。</strong></p><p>安装后直接执行<code>hexo cl&amp;&amp;hexo g</code>命令，然后就会在网站根目录生成<code>sitemap.xml</code>文件和<code>baidusitemap.xml文件</code>，其中<code>sitemap.xml</code>文件是搜索引擎通用的文件，<code>baidusitemap.xml</code>是百度专用的<code>sitemap</code>文件。 </p><p>有<code>sitemap文件</code>之后，再将生成的<code>sitemap文件</code>提交给百度或者其他搜索引擎 </p><p>百度方式：在自动提交的sitemap那里填写自己<code>sitemap文件</code>的URL地址即可</p><pre class="line-numbers language-http"><code class="language-http"><span class="token header-name keyword">https:</span>//你的域名/baidusitemap.xml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/fly-03/Sky03-Blog-Background/blog-img/20191116144150.png" alt></p><p>提交后会有状态提示：</p><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/fly-03/Sky03-Blog-Background/blog-img/20191116151312.png" alt></p><p>这里需要注意<strong>严格区分http和https</strong> </p><blockquote><p>http和https是不一样的，刚添加的站点是HTTP协议的，如果你网站开启了 <code>强制https</code>，是会报301重定向错误的，也就是百度不能抓取到你的sitemap</p><p>如果想用https，可以在<code>数据监控</code>-&gt;<code>HTTPS认证</code>进行认证</p><p>这个认证有时会很慢，可以在你的站点只留一个首页的<code>简单HTML</code>，然后再去百度认证，这样应该会快一点。</p></blockquote><p>如果是其他的搜索引擎，一般是在填写sitemap的地方，填写以下内容即可</p><pre class="line-numbers language-http"><code class="language-http"><span class="token header-name keyword">https:</span>//你的域名/sitemap.xml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="自动推送方式"><a href="#自动推送方式" class="headerlink" title="自动推送方式"></a>自动推送方式</h5><p>只要每个需要被百度爬取的HTML页面中加入一段JS代码即可：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> bp <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'script'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> curProtocol <span class="token operator">=</span> window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>protocol<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">':'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>curProtocol <span class="token operator">===</span> <span class="token string">'https'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        bp<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token string">'https://zz.bdstatic.com/linksubmit/push.js'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token punctuation">{</span>        bp<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token string">'http://push.zhanzhang.baidu.com/push.js'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">var</span> s <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"script"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    s<span class="token punctuation">.</span>parentNode<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>bp<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我所使用的matery主题可以自动给每个页面加上这段代码，只需在主题配置文件中配置：</p><pre class="line-numbers language-yml"><code class="language-yml"># 百度搜索资源平台提交链接baiduPush: true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>即可！</p><p>其他主题一般都有这个功能的实现，如果没有的话，想办法在每个页面加入以上JS代码即可，原理是一样。</p><h5 id="主动推送方式"><a href="#主动推送方式" class="headerlink" title="主动推送方式"></a>主动推送方式</h5><p>安装主动推送插件：<a href="https://github.com/huiwang/hexo-baidu-url-submit" target="_blank" rel="noopener">hexo-baidu-url-submit</a> </p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-baidu-url-submit --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后打开<code>hexo配置文件</code>，在末尾加入以下配置：</p><pre class="line-numbers language-yml"><code class="language-yml"># hexo-baidu-url-submit  百度主动推送baidu_url_submit:  count: 80 # 提交最新的一个链接  host: blog.sky03.cn # 在百度站长平台中注册的域名  token: xxxxxxx # 请注意这是您的秘钥， 所以请不要把博客源代码发布在公众仓库里!  path: baidu_urls.txt # 文本文档的地址， 新链接会保存在此文本文档里<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>密匙的获取是在百度的自动提交的主动推送那里。</p><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/fly-03/Sky03-Blog-Background/blog-img/20191116131833.png" alt> </p><p>再加入新的<code>deploy</code>： </p><pre class="line-numbers language-yml"><code class="language-yml">deploy:- type: baidu_url_submitter<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>如图：</p><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/fly-03/Sky03-Blog-Background/blog-img/20191116131427.png" alt> </p><p> 这样每次执行 <code>hexo d</code> 的时候，新的链接就会被推送了。<br> 推送成功时,会有如下终端提示! </p><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/fly-03/Sky03-Blog-Background/blog-img/20191116133413.png" alt>  </p><p>各种不同的推送反馈字段说明<a href="https://ziyuan.baidu.com/college/courseinfo?id=267&page=2#h2_article_title12" target="_blank" rel="noopener">点我</a>查看，一般来说，推送失败基本都是地址不相符造成的，我们只需对比<code>baidu_url_submit</code>在<code>public</code>中生成的<code>baidu_urls.txt</code>的地址,与自己填写在<code>host</code>字段中的地址对比看是否一样即可。</p><h3 id="谷歌收录"><a href="#谷歌收录" class="headerlink" title="谷歌收录"></a>谷歌收录</h3><p> 相比于百度，google的效率实在不能更快，貌似一天左右站点就被收录了，其实方法是和百度是一样的。 </p><ul><li><p>登录<a href="https://www.google.com/webmasters/" target="_blank" rel="noopener">谷歌站长平台</a>，添加自己的域名</p><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/fly-03/Sky03-Blog-Background/blog-img/20191116152744.png" alt></p></li><li><p><code>DNS验证</code>（就是验证下网站是不是你的）就是域名解析那里添加一条TXT解析记录</p><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/fly-03/Sky03-Blog-Background/blog-img/20191116153323.png" alt></p></li><li><p>然后点击验证即可</p></li><li><p>再到谷歌的<a href="https://search.google.com/search-console/" target="_blank" rel="noopener">Search Console</a>，添加自己的<code>sitemap</code>地址</p><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/fly-03/Sky03-Blog-Background/blog-img/20191116154202.png" alt> </p></li><li><p>接下来，等就是了</p></li></ul><h3 id="提交-robots-txt"><a href="#提交-robots-txt" class="headerlink" title="提交 robots.txt"></a>提交 robots.txt</h3><h4 id="robots-txt是干嘛的？"><a href="#robots-txt是干嘛的？" class="headerlink" title="robots.txt是干嘛的？"></a>robots.txt是干嘛的？</h4><p><code>robots.txt</code> 是一种存放于网站根目录下的 <code>ASCII</code> 编码的文本文件，它的作用是告诉搜索引擎此网站中哪些内容是可以被爬取的，哪些是禁止爬取的。<br><code>robots.txt</code> 要放在 <code>Hexo根目录</code> 下的 <code>source</code> 文件夹中。</p><p>每个人站点目录可能不太一样，可以参考下我的 <code>robots.txt</code> 文件，内容如下： </p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">User-agent</span><span class="token punctuation">:</span> *<span class="token key atrule">Allow</span><span class="token punctuation">:</span> /<span class="token key atrule">Allow</span><span class="token punctuation">:</span> /posts/<span class="token key atrule">Disallow</span><span class="token punctuation">:</span> /about/<span class="token key atrule">Disallow</span><span class="token punctuation">:</span> /archives/<span class="token key atrule">Disallow</span><span class="token punctuation">:</span> /js/<span class="token key atrule">Disallow</span><span class="token punctuation">:</span> /css/<span class="token key atrule">Disallow</span><span class="token punctuation">:</span> /contact/<span class="token key atrule">Disallow</span><span class="token punctuation">:</span> /fonts/<span class="token key atrule">Disallow</span><span class="token punctuation">:</span> /friends/<span class="token key atrule">Disallow</span><span class="token punctuation">:</span> /libs/<span class="token key atrule">Disallow</span><span class="token punctuation">:</span> /medias/<span class="token key atrule">Disallow</span><span class="token punctuation">:</span> /page/<span class="token key atrule">Disallow</span><span class="token punctuation">:</span> /tags/<span class="token key atrule">Disallow</span><span class="token punctuation">:</span> /categories/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>更多关于 <code>robots.txt</code> 的写法参见 <a href="https://blog.csdn.net/fanghua_vip/article/details/79535639" target="_blank" rel="noopener">https://blog.csdn.net/fanghua_vip/article/details/79535639</a></p><p>编写完以上内容再重新部署一下，然后到百度资源平台的<code>数据监控</code>-&gt;<code>Robots</code>点击<code>检测并更新</code> 看能不能检测到。<br>同样注意：刚添加的站点没有进行 <code>HTTPS认证</code>，直接检测有可能会报301错误。</p><h3 id="配置-Nofollow"><a href="#配置-Nofollow" class="headerlink" title="配置 Nofollow"></a>配置 Nofollow</h3><ul><li><p>nofollow 是HTML页面中 <code>a标签</code> 的 属性值。</p></li><li><p>这个属性的作用是：告诉搜索引擎的爬虫不要追踪该链接，为了对抗博客垃圾留言信息</p></li></ul><h3 id="URL优化"><a href="#URL优化" class="headerlink" title="URL优化"></a>URL优化</h3><p>一般来说，SEO搜索引擎优化认为，网站的最佳结构是 <strong>用户从首页点击三次就可以到达任何一个页面</strong>，但是我们使用<code>Hexo</code>编译的站点结构的<code>URL</code>是：<code>域名/年/月/日/文章标题</code>四层的结构，这样的<code>URL</code>结构很不利于<code>SEO</code>，爬虫就会经常爬不到我们的文章，于是，我们需要优化一下网站文章的<code>URL</code></p><p> <strong>方案一</strong>： </p><p> 直接改成<code>域名/文章标题</code>的形式，在<code>Hexo配置文件</code>中修改<code>permalink</code>如下：  </p><pre class="line-numbers language-yml"><code class="language-yml"># URL## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'url: https://blog.sky03.cnroot: /permalink: :title.htmlpermalink_defaults:<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>这个方式有个不好的地方：</strong></p><p>直接以<code>文章的标题</code>作为URL，而我们所写的文章的标题一般都是中文，但是URL只能用字母数字和标点符号表示，所以中文的URL只能被转义成一堆符号，而且还特别长。</p><p><strong>方案二</strong>：</p><p>安装固定链接插件：<a href="https://github.com/rozbo/hexo-abbrlink" target="_blank" rel="noopener">hexo-abbrlink</a></p><p>插件作用：自动为每篇文章生成一串数字作每篇文章的URI地址。每篇文章的<code>Front-matter</code>中会自动增加一个配置项：<code>abbrlink: xxxxx</code>，该项的值就是当前文章的URI地址。</p><ol><li><p>Hexo根目录执行：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-abbrlink --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><code>Hexo配置文件</code>末尾加入以下配置：</p><pre class="line-numbers language-yml"><code class="language-yml"># hexo-abbrlink config 、固定文章地址插件abbrlink:  alg: crc16  #算法选项：crc16、crc32，区别见之前的文章，这里默认为crc16丨crc32比crc16复杂一点，长一点  rep: dec    #输出进制：十进制和十六进制，默认为10进制。丨dec为十进制，hex为十六进制<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>Hexo配置文件</code>中修改<code>permalink</code>如下：</p><pre class="line-numbers language-yml"><code class="language-yml"># URL## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'url: https://blog.sky03.cnroot: /permalink: posts/:abbrlink.htmlpermalink_defaults:<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><p>这样站点结构就变成了：<code>域名/posts/xxx.html</code> </p><h2 id="优化小技巧"><a href="#优化小技巧" class="headerlink" title="优化小技巧"></a>优化小技巧</h2><h3 id="异步加载JS"><a href="#异步加载JS" class="headerlink" title="异步加载JS"></a>异步加载JS</h3>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>超好用的软件插件网站集合</title>
      <link href="/posts/4873.html"/>
      <url>/posts/4873.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本贴收藏了很多个人觉得很好用的软件，不喜勿喷。</p><p>或者你有好用的软件也可以在评论区留言。</p><p>持续更新中。。。</p><h2 id="软件系列"><a href="#软件系列" class="headerlink" title="软件系列"></a>软件系列</h2><h3 id="markdown编写软件"><a href="#markdown编写软件" class="headerlink" title="markdown编写软件"></a>markdown编写软件</h3><ol><li><p><a href="https://www.typora.io" target="_blank" rel="noopener">Typora</a></p><ul><li>支持Windows、Mac、Linux</li><li>暂时免费</li></ul><p><video autoplay muted="muted" preload="preload" loop="loop" width="90%" height="90%" style="border-radius: 8px;box-shadow: 0px 0px 8px 3px #ccc;" src="https://www.typora.io/img/beta.mp4" id="360videoname"></video><br>Typora以后会用在商业（收费），但目前是免费beta公测的。是所见即所得类型的编辑器，即敲出代码-回车-立即显示样式，而且还是跨平台的，Win、Mac、Linux都支持。</p></li><li><p><a href="https://marktext.app" target="_blank" rel="noopener">Marktext</a></p><ul><li>支持Windows、Mac、Linux</li><li>免费、开源</li></ul><p><img src="/medias/loading.gif" data-original="https://sky03-blog-images.oss-cn-beijing.aliyuncs.com/blog-img/1572492571302.png" alt="Marktext"></p><p>也是所见即所得类型的编辑器，markdown编辑器我只钟爱这一种，其他的编辑器一般都是分两页（左边敲字，右边显示），太占屏幕，Marktext是跨平台的，这两款都很值得推介。</p><p>值得说的是，Marktext是免费开源的，在GitHub上有<a href="https://github.com/marktext/marktext" target="_blank" rel="noopener">项目</a>，但好有好多小bug，不过现在应该修复得差不多了。</p></li><li><p><a href="https://maxiang.io" target="_blank" rel="noopener">马克飞象</a> </p><ul><li>网页版（支持各种平台）</li><li>免费</li></ul><p><img src="/medias/loading.gif" data-original="https://sky03-blog-images.oss-cn-beijing.aliyuncs.com/blog-img/20191115173115.png" alt> </p><p><strong>马克飞象</strong>是一款网页版的Markdown编辑器，所以在任何平台都可以用，只要有浏览器就可以，并且还可以配合 印象笔记（Evernote）强大的存储和同步功能。也有离线版的APP。</p></li></ol><h3 id="轻量级文本编辑器"><a href="#轻量级文本编辑器" class="headerlink" title="轻量级文本编辑器"></a>轻量级文本编辑器</h3><ol><li><p><a href="http://www.sublimetext.com" target="_blank" rel="noopener">Sublime Text 3</a></p><ul><li>支持Windows、Mac、Linux</li><li>收费，但可以无限试用（有弹窗提示）</li></ul></li></ol><ol start="2"><li><p><a href="https://code.visualstudio.com/Download" target="_blank" rel="noopener">VScode</a></p><ul><li>支持Windows、Mac、Linux</li><li>免费</li></ul><p><img src="/medias/loading.gif" data-original="https://code.visualstudio.com/assets/home/home-screenshot-win-lg.png" alt="vscode"></p><p>采用electron开发（基于HTML的一种技术），所以性能较弱（启动慢），有丰富的插件，社区较为活跃</p></li></ol><h3 id="远程控制软件"><a href="#远程控制软件" class="headerlink" title="远程控制软件"></a>远程控制软件</h3><ol><li><p><a href="https://www.teamviewer.cn/cn/download/windows/" target="_blank" rel="noopener">Teamviewer</a> </p><ul><li>支持Windows、Mac、Linux、Android、IOS</li><li>个人版免费</li></ul><p><img src="/medias/loading.gif" data-original="https://sky03-blog-images.oss-cn-beijing.aliyuncs.com/blog-img/20191101222547.png" alt></p><p>个人比较推崇的一款软件，这个软件的远程连接的稳定性、流畅度都非常好，比一些QQ之类的远程好太多了。。</p></li></ol><ol start="2"><li><p>Remote Desktop</p><ul><li>仅支持Windows，（不过在其他平台上有控制端）</li><li>免费</li></ul><p><img src="/medias/loading.gif" data-original="https://sky03-blog-images.oss-cn-beijing.aliyuncs.com/blog-img/20191101224301.png" alt></p><p>Windows自带的远程连接软件，Windows10家庭版是没有此功能的，只有专业版及以上才有。</p><p>该软件有一点，值得注意，远程连接时，是使用Windows账户登陆的，也就是说，被远程控制端的账户会被注销。</p><p>另外这款软件的流畅度是非常棒的，有微软的优化</p></li><li><p><a href="https://www.nomachine.com" target="_blank" rel="noopener">NoMachine</a></p><ul><li><p>支持Windows、Mac、Linux、IOS、Android、树莓派、ARM</p></li><li><p>免费</p><p>NoMachine有自己的一种 NX协议 技术 ，采用了新的远程协议，把x桌面的数据经过提取，仅传送一些参数，而且通过ssh来进行数据加密传送，因此相比VNC或直接XDMP具有很快的速度和较高的安全性能。 </p></li></ul><p>性能甚至可以远程打游戏。</p></li><li><p><a href="https://www.realvnc.com" target="_blank" rel="noopener">VNC</a></p><p> VNC (Virtual Network Console)是<a href="https://baike.baidu.com/item/虚拟网络" target="_blank" rel="noopener">虚拟网络</a>控制台的缩写。它 是一款优秀的<a href="https://baike.baidu.com/item/远程控制/934368" target="_blank" rel="noopener">远程控制</a>工具软件，由著名的 <a href="https://baike.baidu.com/item/AT%26T" target="_blank" rel="noopener">AT&amp;T</a> 的欧洲研究实验室开发的。VNC 是在基于 <a href="https://baike.baidu.com/item/UNIX" target="_blank" rel="noopener">UNIX</a> 和 <a href="https://baike.baidu.com/item/Linux" target="_blank" rel="noopener">Linux</a> 操作系统的免费的<a href="https://baike.baidu.com/item/开源软件/8105369" target="_blank" rel="noopener">开源软件</a>，远程控制能力强大，高效实用，其性能可以和 <a href="https://baike.baidu.com/item/Windows" target="_blank" rel="noopener">Windows</a> 和 <a href="https://baike.baidu.com/item/MAC" target="_blank" rel="noopener">MAC</a> 中的任何远程控制软件媲美。    —百度百科</p><p>没使用过，不做评论</p></li><li><p>蒲公英</p><ul><li>支持Windows、Mac、Linux、Android、IOS</li><li>免费试用版最高限速300Kbps </li></ul><p>国产软件，没使用过，不做评论</p></li></ol><h3 id="图床上传软件"><a href="#图床上传软件" class="headerlink" title="图床上传软件"></a>图床上传软件</h3><ol><li><p><a href="https://github.com/Molunerfinn/PicGo" target="_blank" rel="noopener">PicGo</a> </p><ul><li>支持Windows、Mac、Linux</li><li>免费开源</li></ul><p><img src="/medias/loading.gif" data-original="https://sky03-blog-images.oss-cn-beijing.aliyuncs.com/blog-img/20191101231711.png" alt></p><p>支持<code>微博图床</code>（微博图床从 2019 年 4 月开始进行防盗链，不建议继续使用）、<code>七牛图床</code>、<code>腾讯云COS</code>、<code>又拍云</code>、<code>GitHub</code>、<code>SM.MS</code>、<code>阿里云OSS</code>、<code>Imgur</code>等各大图床</p><p>使用上也很方便，上传后会自动在粘贴板生成Markdown等格式的链接</p></li></ol><h3 id="录屏软件"><a href="#录屏软件" class="headerlink" title="录屏软件"></a>录屏软件</h3><ol><li><p><a href="https://obsproject.com/download" target="_blank" rel="noopener">OBS</a> </p><ul><li>支持Windows、Mac、Linux</li><li>免费开源</li></ul></li></ol><ol start="2"><li><p>Bandicam</p></li><li></li></ol><h3 id="磁盘管理软件"><a href="#磁盘管理软件" class="headerlink" title="磁盘管理软件"></a>磁盘管理软件</h3><ol><li>DiskGenius</li></ol><h3 id="卸载软件"><a href="#卸载软件" class="headerlink" title="卸载软件"></a>卸载软件</h3><ol><li>Revo Uninstaller Pro</li></ol><h3 id="代码对比软件"><a href="#代码对比软件" class="headerlink" title="代码对比软件"></a>代码对比软件</h3><ol><li>DiffMerge</li></ol><h3 id="数据库图形界面"><a href="#数据库图形界面" class="headerlink" title="数据库图形界面"></a>数据库图形界面</h3><ol><li>Navicat系列</li></ol><h3 id="GIF录屏制作软件"><a href="#GIF录屏制作软件" class="headerlink" title="GIF录屏制作软件"></a>GIF录屏制作软件</h3><ol><li><p><a href="https://github.com/NickeManarin/ScreenToGif" target="_blank" rel="noopener">ScreenToGif</a> </p><ul><li>仅支持Windows</li><li>免费开源</li></ul></li></ol><ol start="2"><li><a href="http://www.bahraniapps.com" target="_blank" rel="noopener">http://www.bahraniapps.com</a></li></ol><h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><h3 id="Vim"><a href="#Vim" class="headerlink" title="Vim"></a>Vim</h3><p>程序员神器</p><h3 id="Vimium"><a href="#Vimium" class="headerlink" title="Vimium"></a>Vimium</h3><p>谷歌浏览器的插件</p><h2 id="网站系列"><a href="#网站系列" class="headerlink" title="网站系列"></a>网站系列</h2><p><strong>To Be Continued！</strong></p>]]></content>
      
      
      <categories>
          
          <category> 个人 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>失踪人口回归系列</title>
      <link href="/posts/1011.html"/>
      <url>/posts/1011.html</url>
      
        <content type="html"><![CDATA[<h2 id="缘由"><a href="#缘由" class="headerlink" title="缘由"></a>缘由</h2><p>因为要专升本，不得不放弃继续自学java。</p><h2 id="现在"><a href="#现在" class="headerlink" title="现在"></a>现在</h2><p>但是仍然抑制不住想折腾的内心。然后无意间看到了一个很漂亮的Hexo主题：<a href="https://github.com/blinkfox/hexo-theme-matery" target="_blank" rel="noopener">matery</a>。</p><p>（其实早就想换掉烂大街的<a href="https://github.com/theme-next/hexo-theme-next" target="_blank" rel="noopener">Next</a>，但是懒得折腾，又加上没时间。）</p><p>国人开发的主题，配置文件有中文说明，非常友好（其实还是我菜）。</p><p>它长这样：</p><p><img src="/medias/loading.gif" data-original="https://sky03-blog-images.oss-cn-beijing.aliyuncs.com/blog-img/20191023125647.png" alt="Blog-matery"></p><p>很漂亮吧，哈哈。。。</p><h2 id="将来"><a href="#将来" class="headerlink" title="将来"></a>将来</h2><p>以后应该没时间继续学习java了，好好学习吧</p><p>现在的当务之急先升本，之后再搞java</p><h2 id="2019-10-27更"><a href="#2019-10-27更" class="headerlink" title="2019.10.27更"></a>2019.10.27更</h2><p>在折腾的过程中，又发现了另一款很不错的主题：<a href="https://github.com/jerryc127/hexo-theme-butterfly" target="_blank" rel="noopener">Butterfly</a>。</p><p>它长这样：</p><p><img src="/medias/loading.gif" data-original="https://sky03-blog-images.oss-cn-beijing.aliyuncs.com/blog-img/20191024230132.png" alt="Blog-Butterfly"></p><p>哈哈</p><p>地址：<a href="https://sky03.gitee.io" target="_blank" rel="noopener">https://sky03.gitee.io</a> </p>]]></content>
      
      
      <categories>
          
          <category> 个人 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis</title>
      <link href="/posts/13919.html"/>
      <url>/posts/13919.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-Mybatis"><a href="#1-Mybatis" class="headerlink" title="1.Mybatis"></a>1.Mybatis</h2><h3 id="1-1-Mybatis的概述"><a href="#1-1-Mybatis的概述" class="headerlink" title="1.1 Mybatis的概述"></a>1.1 Mybatis的概述</h3><p>Mybatis是一款优秀的持久层Java框架。<br>它封装了jdbc操作的很多细节，使开发者只需要关注sql语句本身，而无需关注注册驱动、创建连接创建 <code>statement</code> 等繁杂过程。</p><p>mybatis 通过<strong>xml</strong>或<strong>注解</strong>的方式将要执行的各种 <code>statement</code> 配置起来，并通过 java 对象和 <code>statement</code> 中sql 的动态参数进行映射生成最终执行的 sql 语句，最后由 Mybatis 框架执行 sql 并将结果映射为 java 对象并返回。</p><p>它采用<strong>ORM</strong>思想解决了实体和数据库映射的问题，对 jdbc 进行了封装，屏蔽了 jdbc api 底层访问细节，使我们不用与 jdbc api 打交道，就可以完成对数据库的持久化操作。</p><ul><li><p>ORM （Object Relational Mappging） 对象关系映射</p><p>就是把数据库表和实体类及实体类的属性对应起来，让我们可以操作实体类就实现操作数据库表。</p></li></ul><h3 id="1-2-Mybatis的入门"><a href="#1-2-Mybatis的入门" class="headerlink" title="1.2 Mybatis的入门"></a><a name="Mybatis_xml">1.2 Mybatis的入门</a></h3><h4 id="XML文件方式"><a href="#XML文件方式" class="headerlink" title="XML文件方式"></a>XML文件方式</h4><ol><li><p>创建maven工程</p><ul><li><p>配置pom文件定位</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>xyz.sky03<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>Mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>packaging</span><span class="token punctuation">></span></span>jar<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>packaging</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.4.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.1.47<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.10<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>添加配置文件</p><ul><li><p>添加log4j配置文件（用于打印日志）</p><pre class="line-numbers language-sh"><code class="language-sh"># Set root category priority to INFO and its only appender to CONSOLE.#log4j.rootCategory=INFO, CONSOLE            debug   info   warn error fatallog4j.rootCategory=debug, CONSOLE, LOGFILE# Set the enterprise logger category to FATAL and its only appender to CONSOLE.log4j.logger.org.apache.axis.enterprise=FATAL, CONSOLE# CONSOLE is set to be a ConsoleAppender using a PatternLayout.log4j.appender.CONSOLE=org.apache.log4j.ConsoleAppenderlog4j.appender.CONSOLE.layout=org.apache.log4j.PatternLayoutlog4j.appender.CONSOLE.layout.ConversionPattern=%d{ISO8601} %-6r [%15.15t] %-5p %30.30c %x - %m\n# LOGFILE is set to be a File appender using a PatternLayout.log4j.appender.LOGFILE=org.apache.log4j.FileAppender#此项是配置日志输出路径，如果路径错误会自动输出到项目根目录里log4j.appender.LOGFILE.File=User/sky03/axis.loglog4j.appender.LOGFILE.Append=truelog4j.appender.LOGFILE.layout=org.apache.log4j.PatternLayoutlog4j.appender.LOGFILE.layout.ConversionPattern=%d{ISO8601} %-6r [%15.15t] %-5p %30.30c %x - %m\n<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>添加Mybatis主配置文件，一般叫<code>SqlMapConfig.xml</code>（叫什么无所谓）</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token doctype">&lt;!DOCTYPE configuration        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"        "http://mybatis.org/dtd/mybatis-3-config.dtd"></span><span class="token comment" spellcheck="true">&lt;!-- mybatis的主配置文件 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 配置环境 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environments</span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mysql<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 配置mysql的环境--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environment</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mysql<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!-- 配置事务的类型--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transactionManager</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>JDBC<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>transactionManager</span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!-- 配置数据源（连接池） --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataSource</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>POOLED<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token comment" spellcheck="true">&lt;!-- 配置连接数据库的4个基本信息 --></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driver<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.mysql.jdbc.Driver<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbc:mysql://localhost:3306/mybatis_practice<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>admin<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dataSource</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environment</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environments</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 指定映射配置文件的位置，映射配置文件指的是每个dao独立的配置文件 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com/itheima/dao/IUserDao.xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>创建domain类 User，记得实现Serializable接口，实现序列化，并在数据库中创建与之对应的表</p></li><li><p>创建UserDao接口，定义方法</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> xyz<span class="token punctuation">.</span>sky03<span class="token punctuation">.</span>dao<span class="token punctuation">;</span><span class="token keyword">import</span> xyz<span class="token punctuation">.</span>sky03<span class="token punctuation">.</span>domain<span class="token punctuation">.</span>User<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserDao</span> <span class="token punctuation">{</span>    List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>创建映射配置文件</p><ul><li><p>因为是maven项目，所以要在resources文件夹中创建与UserDao接口的包名相同的文件夹路径，即：创建xyz/sky03/dao文件夹。这样做的目的是不用写UserDao的实现类</p></li><li><p>在该文件夹创建UserDaoMapper.xml，文件名随意，一般是接口名+Mapper</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token doctype">&lt;!DOCTYPE mapper        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"        "http://mybatis.org/dtd/mybatis-3-mapper.dtd"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>xyz.sky03.dao.UserDao<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--配置查询所有,resultType的作用是指定将查询到的结果封装给哪个javabean类--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>findAll<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>xyz.sky03.domain.User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 将要执行的sql语句写在下面 --></span>        select * from user    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>配置完成，执行测试，在test文件夹中创建测试类UserDaoTest</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> xyz<span class="token punctuation">.</span>sky03<span class="token punctuation">.</span>dao<span class="token punctuation">.</span>UserDao<span class="token punctuation">;</span><span class="token keyword">import</span> xyz<span class="token punctuation">.</span>sky03<span class="token punctuation">.</span>domain<span class="token punctuation">.</span>User<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Resources<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>session<span class="token punctuation">.</span>SqlSession<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>session<span class="token punctuation">.</span>SqlSessionFactory<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>session<span class="token punctuation">.</span>SqlSessionFactoryBuilder<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>InputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MybatisTest</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 入门案例     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1.读取配置文件</span>        InputStream in <span class="token operator">=</span> Resources<span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"SqlMapConfig.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2.创建SqlSessionFactory工厂</span>        SqlSessionFactoryBuilder builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        SqlSessionFactory factory <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//3.使用工厂生产SqlSession对象</span>        SqlSession session <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//4.使用SqlSession创建Dao接口的代理对象</span>        UserDao userDao <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>UserDao<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//5.使用代理对象执行方法</span>        List<span class="token operator">&lt;</span>User<span class="token operator">></span> users <span class="token operator">=</span> userDao<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>User user <span class="token operator">:</span> users<span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//6.释放资源</span>        session<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        in<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>项目示例：<a href="https://gitee.com/sky03/Mybatis_practice_XML" target="_blank" rel="noopener">Mybatis入门基于XML</a> </p></li></ol><h4 id="注解方式"><a href="#注解方式" class="headerlink" title="注解方式"></a>注解方式</h4><ol><li><p>删掉UserDaoMapper.xml文件，直接在UserDao接口的方法上添加注解</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> xyz<span class="token punctuation">.</span>sky03<span class="token punctuation">.</span>dao<span class="token punctuation">;</span><span class="token keyword">import</span> xyz<span class="token punctuation">.</span>sky03<span class="token punctuation">.</span>domain<span class="token punctuation">.</span>User<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span>Select<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserDao</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">"select * from user"</span><span class="token punctuation">)</span>    List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在<code>SqlMapConfig.xml主配置文件</code>中改变映射，在<code>&lt;mappers&gt;</code> 标签中的<code>&lt;mapper&gt;</code>的属性改为class，值为UserDao的全类名</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>xyz.sky03.dao.UserDao<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>然后就没了，好像不用指定返回结果封装在哪个实体类上</p></li></ol><h2 id="2-自定义Mybatis框架"><a href="#2-自定义Mybatis框架" class="headerlink" title="2.自定义Mybatis框架"></a>2.自定义Mybatis框架</h2><blockquote><p>自定义Mybatis框架的目的是熟悉Mybatis框架的原理以及执行流程。</p></blockquote><h2 id="3-Mybatis的CRUD"><a href="#3-Mybatis的CRUD" class="headerlink" title="3.Mybatis的CRUD"></a>3.Mybatis的CRUD</h2><p>示例项目：<a href="https://gitee.com/sky03/Mybatis_CRUD" target="_blank" rel="noopener">Mybatis的CRUD</a> </p><h3 id="3-1-查询操作"><a href="#3-1-查询操作" class="headerlink" title="3.1 查询操作"></a>3.1 查询操作</h3><p>查询操作可以参考以上 <a href="Mybatis_xml">Mybatis的入门</a> </p><h3 id="3-2-保存操作"><a href="#3-2-保存操作" class="headerlink" title="3.2 保存操作"></a>3.2 保存操作</h3><blockquote><p>保存必然是用insert语句</p></blockquote><p>在XML配置方式的基础上再进行一下操作：</p><ol><li><p>在UserDao接口中添加保存用户的方法</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 保存用户 * @param user */</span><span class="token keyword">void</span> <span class="token function">saveUser</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在映射文件UserDao.xml文件中添加插入语句</p><ul><li><p>标签：insert语句自然要用 <code>&lt;insert&gt;</code> 标签</p></li><li><p>属性：<code>id</code> 指定UserDao中保存用户的方法；<code>parameterType</code> 指定UserDao中saveUser方法的参数类型</p></li><li><p>因为user表的id是自增长的，所以使用 <code>insert into table() values()]</code> 的形式</p></li><li><p>values里面的值，使用Mybatis的表达式</p><ul><li><p><code>#{属性}</code>，属性是对应字段的 <code>parameterType</code> 指定的类的属性</p></li><li><p><code>#{username}</code>，就是自动获取User类中的username属性</p></li></ul></li></ul><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 保存用户 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>saveUser<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>xyz.sky03.domain.User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    insert into user(username,address,sex,birthday) values(#{username},#{address},#{sex},#{birthday});<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>配置测试方法，并执行</p></li></ol><h3 id="3-3-更新操作"><a href="#3-3-更新操作" class="headerlink" title="3.3 更新操作"></a>3.3 更新操作</h3><ol><li><p>在UserDao接口中定义更新方法</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">updateUser</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>在映射文件UserDao.xml中添加更新的SQL语句：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>update</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>updateUser<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>xyz.sky03.domain.User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    update user set username=#{username},sex=#{sex},address=#{address},birthday=#{birthday} where id=#{id}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>update</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>配置测试方法，并执行</p></li></ol><h3 id="3-4-删除操作"><a href="#3-4-删除操作" class="headerlink" title="3.4 删除操作"></a>3.4 删除操作</h3><ol><li><p>在UserDao接口中定义删除方法</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">deleteUser</span><span class="token punctuation">(</span>Integer userId<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>在映射文件UserDao.xml中添加删除的SQL语句：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>delete</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>deleteUser<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>int<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--uid只是一个占位符，因为属性只有一个，所以站位符可以随便写--></span>    delete from user where id = #{uid}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>delete</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>其中parameterType的值可以这么写：<ul><li>int</li><li>INT</li><li>Integer</li><li>java.lang.Integer</li></ul></li><li>之所能这么写，是因为Mybatis给int配置了别名，具体可 参考</li></ul></li><li><p>配置测试方法，并执行</p></li></ol><h3 id="3-5-其他查询"><a href="#3-5-其他查询" class="headerlink" title="3.5 其他查询"></a>3.5 其他查询</h3><h4 id="3-5-1-根据id查询"><a href="#3-5-1-根据id查询" class="headerlink" title="3.5.1 根据id查询"></a>3.5.1 根据id查询</h4><ol><li><p>在UserDao接口中定义查询的方法</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//通过id查用户</span>User <span class="token function">findById</span><span class="token punctuation">(</span>Integer userId<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>在映射文件UserDao.xml中添加SQL语句：</p><p>parameterType用来指定dao中查询方法的参数类型，resultType指定将结果封装给哪个类</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>findById<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>int<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>xyz.sky03.domain.User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select * from user where id = #{uid}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>配置测试类，并执行。</p></li></ol><h4 id="3-5-2-模糊查询"><a href="#3-5-2-模糊查询" class="headerlink" title="3.5.2 模糊查询"></a>3.5.2 模糊查询</h4><ul><li><p>方法一</p><ol><li><p>在UserDao接口中定义查询的方法</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//通过name模糊查询</span>List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">findByName</span><span class="token punctuation">(</span>String username<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>在映射文件UserDao.xml中添加SQL语句：</p><ul><li><p>方式一 </p><p>这种方式使用的是SQL预编译，所以不会被SQL注入。</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token operator">&lt;</span><span class="token keyword">select</span> id<span class="token operator">=</span><span class="token string">"findByName"</span> parameterType<span class="token operator">=</span><span class="token string">"string"</span> resultType<span class="token operator">=</span><span class="token string">"xyz.sky03.domain.User"</span><span class="token operator">></span>    <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token keyword">user</span> <span class="token keyword">where</span> username <span class="token operator">like</span> <span class="token comment" spellcheck="true">#{name}</span><span class="token operator">&lt;</span><span class="token operator">/</span><span class="token keyword">select</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>方式二  （不常用，了解）</p><p>like后面直接使用value，value是Mybatis的源码里面的key；</p><p>这种是使用字符串拼接的SQL语句，容易被SQL注入。</p><pre class="line-numbers language-sql"><code class="language-sql"> <span class="token operator">&lt;</span><span class="token keyword">select</span> id<span class="token operator">=</span><span class="token string">"findByName"</span> parameterType<span class="token operator">=</span><span class="token string">"string"</span> resultType<span class="token operator">=</span><span class="token string">"xyz.sky03.domain.User"</span><span class="token operator">></span>    <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token keyword">user</span> <span class="token keyword">where</span> username <span class="token operator">like</span> <span class="token string">'%${value}%'</span><span class="token operator">&lt;</span><span class="token operator">/</span><span class="token keyword">select</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>配置测试方法</p><p>使用方式一的Sql语句由于不能写 <code>%</code>，所以测试方法要在参数的两头多加个  <code>%</code>，方式二则不用，Like this：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testFindByName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    List<span class="token operator">&lt;</span>User<span class="token operator">></span> users <span class="token operator">=</span> userDao<span class="token punctuation">.</span><span class="token function">findByName</span><span class="token punctuation">(</span><span class="token string">"%王%"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>User user <span class="token operator">:</span> users<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol></li></ul><h4 id="3-5-3-查询总记录数"><a href="#3-5-3-查询总记录数" class="headerlink" title="3.5.3 查询总记录数"></a>3.5.3 查询总记录数</h4><ol><li><p>在UserDao接口中定义查询的方法</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//查询总用户数</span><span class="token keyword">int</span> <span class="token function">findTotal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>在映射文件UserDao.xml中添加SQL语句：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--查询总记录数--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>findTotal<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>int<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>    select count(id) from user; <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>编写测试方法，并执行</p></li></ol><h4 id="3-5-4-获取新增用户的id"><a href="#3-5-4-获取新增用户的id" class="headerlink" title="3.5.4 获取新增用户的id"></a>3.5.4 获取新增用户的id</h4><ul><li><p>可以在insert语句后加一条 （必须是在insert语句后）</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> last_insert_id<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>在Mybatis中：就是在XML文件中编写</p><ul><li>标签：<code>&lt;selectKey&gt;</code> </li><li>位置：<code>&lt;insert&gt;</code>标签内</li><li>属性：<ul><li><code>KeyProperty</code>：表示封装实体类User的id；</li><li><code>KeyColumn</code>：表示数据库中的字段id；</li><li><code>resultType</code>：表示查询到的结果封装成什么类型（别忘了配置这个属性）；</li><li><code>order</code>：有两个值：AFTER表示后执行，BEFORE表示先执行；</li></ul></li></ul><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 保存用户 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>saveUser<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>xyz.sky03.domain.User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>selectKey</span> <span class="token attr-name">KeyProperty</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">KeyColumn</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">order</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>AFTER<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>int<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select last_insert_id();    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>selectKey</span><span class="token punctuation">></span></span>    insert into user(username,address,sex,birthday) values(#{username},#{address},#{sex},#{birthday});<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>配置测试类，执行保存之后会自动把id封装到user对象里</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testSaveUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    User user<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    user<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">"亚索"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    user<span class="token punctuation">.</span><span class="token function">setSex</span><span class="token punctuation">(</span><span class="token string">"男"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    user<span class="token punctuation">.</span><span class="token function">setAddress</span><span class="token punctuation">(</span><span class="token string">"艾欧尼亚"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    user<span class="token punctuation">.</span><span class="token function">setBirthday</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"保存之前："</span><span class="token operator">+</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输出的id为null</span>    userDao<span class="token punctuation">.</span><span class="token function">saveUser</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"保存之后："</span><span class="token operator">+</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输出的id为数据库里的id</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="4-Mybatis参数的深入"><a href="#4-Mybatis参数的深入" class="headerlink" title="4.Mybatis参数的深入"></a>4.Mybatis参数的深入</h2><h3 id="4-1-OGNL表达式"><a href="#4-1-OGNL表达式" class="headerlink" title="4.1 OGNL表达式"></a>4.1 OGNL表达式</h3><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><p>OGNL全称：Object Graphic Navigation Language（对象 图 导航 语言）</p><ul><li>Apache开发出来的</li><li>Struts2也有使用</li></ul><h4 id="写法"><a href="#写法" class="headerlink" title="写法"></a>写法</h4><p>通过对象的取值方法来获取数据。在写法上把get给省略了。<br>例如：<br>获取用户名称<br>正常写法：<code>user.getUsername()</code><br>OGNL表达式：<code>user.username</code></p><ul><li><p>Mybatis中的SQL语句为什么能直接写username，二不用user.呢？</p><p>因为在parameterType中已经提供了属性所属的类，所以此时不需要写对象名。而如果没有指定parameterType属性，那就只能写完整的OGNL表达式：<code>user.username</code> </p></li></ul><h3 id="5-2-pojo包装对象作为查询条件"><a href="#5-2-pojo包装对象作为查询条件" class="headerlink" title="5.2 pojo包装对象作为查询条件"></a>5.2 pojo包装对象作为查询条件</h3><p>pojo对象：简单的Javabean对象</p><p>开发中查询条件有时候是复杂的综合查询条件，不仅包括用户查询条件还包括其他的查询条件（比如用户购买的商品信息也作为查询条件），通过把很多条件包装成一个pojo对象，然后再传递查询条件</p><p>例：还是以模糊查询为例</p><ol><li><p>首先在domain包中创建QueryVo类，把User类作为其属性，并设置getter和setter方法</p></li><li><p>再在UserDao接口中定义查询方法</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 根据queryVo中的条件查询用户 */</span>List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">findByVo</span><span class="token punctuation">(</span>QueryVo vo<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在映射文件UserMapper.xml中定义SQL语句。parameterType已经指定了QueryVo，而username是User的属性，User又是QueryVo的属性，所以可以直接写user.username</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--根据queryVo中的条件查询用户--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>findByVo<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>xyz.sky03.domain.QueryVo<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>xyz.sky03.domain.User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select * from user where username like #{user.username};<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>编写测试方法并执行</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 测试QueryVo作为查询条件 */</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testFindByVo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    QueryVo vo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryVo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    vo<span class="token punctuation">.</span><span class="token function">setUser</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    user<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">"%亚%"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//这里为了模糊查询，要加%%</span>    List<span class="token operator">&lt;</span>User<span class="token operator">></span> users <span class="token operator">=</span> userDao<span class="token punctuation">.</span><span class="token function">findByVo</span><span class="token punctuation">(</span>vo<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>User u <span class="token operator">:</span> users<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="5-3-Mybatis中数据库字段与实体类的属性不对应"><a href="#5-3-Mybatis中数据库字段与实体类的属性不对应" class="headerlink" title="5.3 Mybatis中数据库字段与实体类的属性不对应"></a>5.3 Mybatis中数据库字段与实体类的属性不对应</h3><blockquote><p>Windows系统的MySQL数据库是不区分大小写的（字段等）<br>而Linux系统的MySQL数据库是严格区分大小写的</p></blockquote><p>在Mybatis中数据库字段与实体类的属性名称如果不一致，会报错，会产生一系列的问题。比如：查询语句查询到的结果封装不到实体类上等</p><ul><li><p>假设：实体类User中的属性为userId、userName、userSex、userBirthday、userAddress</p><p>数据库中的字段依然为：id、username、sex、birthday、address</p></li></ul><p>解决方案：</p><ul><li><p>方案一：SQL语句层面上解决</p><ul><li><p>思路：起别名</p></li><li><p>性能：相比方案二较快</p></li><li><p>缺点：需要在每个地方都这么写，麻烦</p></li><li><p>例：直接把SQL语句用别名的方式</p></li></ul><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 查询所有 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>findAll<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userMap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select id as userId,username as userName,address as userAddress,sex as userSex,birthday as userBirthday from user;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>方案二</p><ul><li><p>思路：映射文件中配置查询结果的字段名和实体类的属性名的对应关系</p></li><li><p>性能：相比方案一较慢，因为多了一步，二次解析xml文件</p></li><li><p>配置<code>&lt;resultMap&gt;</code> 标签</p><ul><li><p>属性 <code>id</code> ：唯一标识符；属性 <code>type</code> ：指定实体类的全类名</p></li><li><p>子标签 <code>&lt;id&gt;</code> ：指定主键字段的对应关系</p></li><li><p>子标签 <code>&lt;result&gt;</code> ：指定非主键字段的对应关系</p></li><li><p><code>&lt;id&gt;</code>和<code>&lt;result&gt;</code> 的共同属性：</p><ul><li><p><code>property</code> ：指定实体类中的属性</p></li><li><p><code>column</code> ：指定数据库中的字段</p></li></ul></li></ul><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 配置 查询结果的列名和实体类的属性名的对应关系 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userMap<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>uSeR<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 主键字段的对应 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userId<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--非主键字段的对应--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userName<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userAddress<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>address<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userSex<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userBirthday<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>birthday<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>配置完resultMap还不行，还要在执行SQL的地方指定</p><ul><li>把<code>&lt;select&gt;</code> 的resultType属性改为resultMap，并指定已经配置好的<code>&lt;resultMap&gt;</code> 的id，所以它会再次解析xml寻找id对应的resultMap，造成性能浪费</li></ul><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>xyz.sky03.dao.IUserDao<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 配置 查询结果的列名和实体类的属性名的对应关系 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userMap<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>xyz.sky03.domain.User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 主键字段的对应 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userId<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--非主键字段的对应--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userName<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userAddress<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>address<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userSex<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userBirthday<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>birthday<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 查询所有 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>findAll<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userMap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select * from user;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>优点：虽然性能有所降低，但是带来的好处却是很方便使用。在每个需要的地方加上<code>resultMap</code>属性并指定id即可</p></li></ul></li></ul><h2 id="6-properties标签使用"><a href="#6-properties标签使用" class="headerlink" title="6.properties标签使用"></a>6.properties标签使用</h2><ul><li><p>标签 <code>&lt;properties&gt;</code> 和 <code>&lt;mapper&gt;</code> 属性二者都适用</p></li><li><p>位置：在 <code>&lt;configuration&gt;</code> 内部</p></li><li><p>作用：在标签内部 配置数据库连接信息。也可以通过属性引用外部配置文件信息</p></li><li><p>属性 <code>resource</code> （常用）：用于指定配置文件位置</p></li><li><p>属性 <code>url</code> ：用URL的写法来定位配置文件位置（网址）</p></li><li><p>例：</p><ul><li><p>标签内部定义连接信息(这样没什么意义)</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driver<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.mysql.jdbc.Driver<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbc:mysql:///mybatis_practice<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>admin<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- ----需要在dataSource标签中指定---- --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environments</span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mysql<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 配置mysql的环境--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environment</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mysql<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 配置事务 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transactionManager</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>JDBC<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>transactionManager</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--配置连接池--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataSource</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>POOLED<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driver<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${driver}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${url}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${username}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${password}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dataSource</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environment</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environments</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>标签外部引入配置文件，这样就能把数据库连接信息写在配置文件里 (注意引用的时候带上 <code>jdbc.</code> )</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbcConfig.properties<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environments</span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mysql<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environment</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mysql<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transactionManager</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>JDBC<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>transactionManager</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataSource</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>POOLED<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driver<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.driver}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.url}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.username}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.password}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dataSource</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environment</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environments</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>jdbcConfig.properties文件内容如下：</p><pre class="line-numbers language-properties"><code class="language-properties"><span class="token attr-name">jdbc.driver</span><span class="token punctuation">=</span><span class="token attr-value">com.mysql.jdbc.Driver</span><span class="token attr-name">jdbc.url</span><span class="token punctuation">=</span><span class="token attr-value">jdbc:mysql://localhost:3306/mybatis_practice</span><span class="token attr-name">jdbc.username</span><span class="token punctuation">=</span><span class="token attr-value">root</span><span class="token attr-name">jdbc.password</span><span class="token punctuation">=</span><span class="token attr-value">admin</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><h2 id="7-typeAliases标签"><a href="#7-typeAliases标签" class="headerlink" title="7.typeAliases标签"></a>7.typeAliases标签</h2><p>位置：主配置文件中的 <code>&lt;configuration&gt;</code> 标签内<br>子标签：<code>&lt;typeAlias&gt;</code> 和 <code>&lt;package&gt;</code> </p><h3 id="7-1-typeAlias标签"><a href="#7-1-typeAlias标签" class="headerlink" title="7.1 typeAlias标签"></a>7.1 typeAlias标签</h3><ul><li>用于配置别名</li><li>位置：<code>&lt;typeAliases&gt;</code> 标签内</li><li>属性 <code>type</code> ：用于指定实体类的全类名</li><li>属性 <code>alias</code> ：指定别名，别名在用的时候可以不区分大小写，用<code>parameterType</code> 来指定别名</li><li><code>&lt;typeAliases&gt;</code> 只能给实体类配置别名</li></ul><h3 id="7-2-package标签"><a href="#7-2-package标签" class="headerlink" title="7.2 package标签"></a>7.2 package标签</h3><ul><li>作用：用于指定要配置别名的包，当指定后，该包下的实体类都会注册别名，并且类名就是别名，不再区分大小写</li><li>位置：<code>&lt;typeAliases&gt;</code> 标签内</li><li>属性 <code>name</code>：指定包的全路径</li><li>注解和xml方式都可以用</li></ul><h3 id="7-3-mappers标签中的package标签"><a href="#7-3-mappers标签中的package标签" class="headerlink" title="7.3 mappers标签中的package标签"></a>7.3 mappers标签中的package标签</h3><ul><li>用于指定 Dao接口 所在的包，指定了之后就不用再写mapper标签了</li><li>作用和mapper标签一样</li><li>属性 <code>name</code> ：指定 Dao接口 所在的包</li></ul><h2 id="8-Mybatis的连接池"><a href="#8-Mybatis的连接池" class="headerlink" title="8.Mybatis的连接池"></a>8.Mybatis的连接池</h2><p>Mybatis的连接池提供了3种配置方式：</p><p>配置的位置：</p><ul><li><p>在主配置文件SqlMapConfig.xml中的 <code>&lt;dataSource&gt;</code>标签，其<code>type</code> 属性就是指定哪种连接池方式</p></li><li><p><code>type</code> 属性取值：</p><ul><li><p>POOLED：采用传统的javax.sql.DataSource规范中的连接池，Mybatis对该规范有实现</p></li><li><p>UNPOOLED：采用传统的获取连接的方式，虽然也实现javax.sql.DataSource接口，但是没有使用池的思想。</p></li><li><p>JNDI：采用服务器提供的JNDI技术实现，来获取DataSource对象，不同服务器所能拿到的DataSource是不一样的</p><ul><li><p>注意：如果不是web或者maven的war工程，是不能使用的</p></li><li><p>比如：Tomcat服务器采用的连接池是dbcp连接池。</p></li></ul></li></ul></li></ul><h2 id="9-Mybatis的事务控制"><a href="#9-Mybatis的事务控制" class="headerlink" title="9.Mybatis的事务控制"></a>9.Mybatis的事务控制</h2><ul><li><p>Mybaits默认是关闭事务的手动提交</p></li><li><p>开启事务自动提交</p><ul><li>在创建SqlSession对象的时候，给openSession()加个参数true，表示自动提交，也就是<code>openSession(true)</code> </li></ul></li></ul><h2 id="10-动态SQL"><a href="#10-动态SQL" class="headerlink" title="10.动态SQL"></a>10.动态SQL</h2><h3 id="10-1-if标签"><a href="#10-1-if标签" class="headerlink" title="10.1 if标签"></a>10.1 if标签</h3><p>有时候查询是需要某个条件成立的，这时候就需要在<code>&lt;select&gt;</code> 标签中使用 <code>&lt;if&gt;</code> 标签</p><ul><li>属性 <code>test</code>：判断条件<ul><li>如果为true，就在整个SQL语句后加上<code>&lt;if&gt;</code>标签里的内容</li><li>如果为false，就省略<code>&lt;if&gt;</code> 标签里的内容</li><li>所以为了整个SQL语句完整，就在where后面加了个 <code>1=1</code> </li><li>如果需要两个条件同时成立才可以，可以在两个条件中间加 <code>and</code> ，而不是 <code>&amp;&amp;</code> </li></ul></li></ul><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--通过条件查询--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>findByCondition<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>xyz.sky03.domain.User<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select * from user where 1=1    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        and username = #{username}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="10-2-where标签"><a href="#10-2-where标签" class="headerlink" title="10.2 where标签"></a>10.2 where标签</h3><p>顾名思义：<code>&lt;where&gt;</code> 标签和SQL语句中where作用是一样的</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>findByCondition<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>xyz.sky03.domain.User<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select * from user    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>where</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            and username = #{username}        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>where</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="10-3-foreach标签"><a href="#10-3-foreach标签" class="headerlink" title="10.3 foreach标签"></a>10.3 foreach标签</h3><p>使用场景：有个集合需要遍历，并作为查询条件</p><p>标签：<code>&lt;foreach&gt;</code><br>属性：</p><ul><li><code>collection</code> ：指定要遍历的集合，该集合得是queryvo实体类中的属性</li><li><code>open</code> ：指定的字符串是放在 遍历出来的值得前面</li><li><code>close</code> ：指定的字符串放在 遍历出来的值得后面</li><li><code>item</code> ：项目，指定的值是什么 <code>&lt;foreach&gt;</code> 标签内的#{}里面就写什么</li><li><code>separator</code> ：指定遍历出来的结果以什么符号间隔</li></ul><p>遍历出来的结果大概就是：</p><p><code>and id in 15,25,35</code>  #{id}被换成了遍历出来的id</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>findByCondition<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>xyz.sky03.domain.User<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>queryvo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select * from user    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>where</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ids !<span class="token punctuation">=</span> null and ids.size()<span class="token punctuation">></span>0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>foreach</span> <span class="token attr-name">collection</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ids<span class="token punctuation">"</span></span> <span class="token attr-name">open</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>and id in (<span class="token punctuation">"</span></span> <span class="token attr-name">close</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>)<span class="token punctuation">"</span></span> <span class="token attr-name">item</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">separator</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>,<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                #{id}            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>foreach</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>where</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="10-4-sql标签"><a href="#10-4-sql标签" class="headerlink" title="10.4 sql标签"></a>10.4 sql标签</h3><p>用途：抽取重复的SQL语句</p><p>例：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sql</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>defaultUser<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select * from user<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sql</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>在其他地方引用：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>findAll<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>xyz.sky03.domain.User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">refid</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>defaultUser<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="11-Mybatis的多表操作"><a href="#11-Mybatis的多表操作" class="headerlink" title="11.Mybatis的多表操作"></a>11.Mybatis的多表操作</h2><h3 id="11-1-表之间的关系"><a href="#11-1-表之间的关系" class="headerlink" title="11.1 表之间的关系"></a>11.1 表之间的关系</h3><p>4种：一对多、多对一、一对一、多对多。</p><p>举例：</p><ol><li><p><strong>用户和订单就是一对多</strong></p><p>一个用户可以下多个订单</p></li><li><p><strong>订单和用户就是多对一</strong></p><p>多个订单属于同一个用户</p></li><li><p><strong>人和身份证号就是一对一</strong></p><p>一个人只能有一个身份证号</p><p>一个身份证号只能属于一个人</p></li><li><p><strong>老师和学生之间就是多对多</strong></p><p>一个学生可以被多个老师教过</p><p>一个老师可以交多个学生</p></li></ol><p>特例：</p><ul><li>在 mybatis 中只有<code>一对一</code>和<code>一对多</code>，它将多对多当成了多个 <code>一对多</code>，而多对一就是多个 <code>一对一</code>。</li></ul><h3 id="一对一的查询操作"><a href="#一对一的查询操作" class="headerlink" title="一对一的查询操作"></a>一对一的查询操作</h3><p>示例：用户和账户</p><ul><li>一个用户可以有多个账户</li><li>一个账户只能属于一个用户（多个账户也可以属于同一个用户）</li></ul><p>关系：本例以account表为主体，表现为多对一的关系，即：多个一对一！</p><p>根据以上关系建两张表：</p><p>user表的id是account表的UID的外键</p><p><img src="/medias/loading.gif" data-original="https://sky03-blog-images.oss-cn-beijing.aliyuncs.com/blog-img/table01.png" alt> 需求：查询所有账户，同时还要获取到当前账户的所属用户信息</p><p>首先得写好SQL语句，SQL语句写好，后面就好办了：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> u<span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">,</span><span class="token number">a</span><span class="token punctuation">.</span>id <span class="token keyword">as</span> aid<span class="token punctuation">,</span><span class="token number">a</span><span class="token punctuation">.</span>uid<span class="token punctuation">,</span><span class="token number">a</span><span class="token punctuation">.</span>money <span class="token keyword">from</span> account <span class="token number">a</span> <span class="token punctuation">,</span> <span class="token keyword">user</span> u <span class="token keyword">where</span> u<span class="token punctuation">.</span>id <span class="token operator">=</span> <span class="token number">a</span><span class="token punctuation">.</span>uid<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>执行结果：</p><p><img src="/medias/loading.gif" data-original="https://sky03-blog-images.oss-cn-beijing.aliyuncs.com/blog-img/Mybatis_table01.png" alt></p><p>SQL解释：</p><ul><li>u和a分别是user表和account表的别名，SQL语句中<code>FROM</code> 执行的优先级别高于<code>SELECT</code> ，所以在<code>FROM</code> 后声明的别名，<code>SELECT</code> 可以用</li><li><code>SELECT u.*</code> 代表查询user表下的所有字段；同理<code>SELECT a.id,a.uid</code> 就是只查询account表的id和uid字段</li><li><code>a.id as aid</code> 也是给account表的id起别名 <code>aid</code> </li></ul><p>根据ORM思想，查询之后，肯定要把查询的结果封装到实体类中，因为我们的查询涉及到两个实体类，所以在创建实体类的时候要在Account实体类中加个User实体类的属性，再设置Getter和Setter方法，Like this：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> Integer id<span class="token punctuation">;</span><span class="token keyword">private</span> Integer uid<span class="token punctuation">;</span><span class="token keyword">private</span> Double money<span class="token punctuation">;</span><span class="token keyword">private</span> User user<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在XML映射文件中也要包含对User的封装：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 定义封装account和user的resultMap --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>accountUserMap<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>account<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>aid<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>uid<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>uid<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>money<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>money<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 一对一的关系映射：配置封装user的内容--></span>    <span class="token comment" spellcheck="true">&lt;!-- javaType是表示实体类为user且数据库字段为uid的数据封装到哪个实体类中 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>association</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>uid<span class="token punctuation">"</span></span> <span class="token attr-name">javaType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>address<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>address<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>birthday<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>birthday<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>association</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>XML查询语句：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 查询所有 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>findAll<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>accountUserMap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select u.*,a.id as aid,a.uid,a.money from account a , user u where u.id = a.uid;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="一对多的查询操作"><a href="#一对多的查询操作" class="headerlink" title="一对多的查询操作"></a>一对多的查询操作</h3><p>简单来讲就是映射文件封装实体类时，<code>&lt;association&gt;</code> 标签改为：<code>&lt;collection&gt;</code> 标签，<code>javaType</code> 改为 <code>ofType</code> </p><h2 id="12-JNDI"><a href="#12-JNDI" class="headerlink" title="12.JNDI"></a>12.JNDI</h2><p>导入数据源的一种方式</p><p>项目实例：<a href="https://gitee.com/sky03/Mybatis_JNDI" target="_blank" rel="noopener">Mybatis的项目实例</a> </p><h2 id="13-Mybatis的延迟加载"><a href="#13-Mybatis的延迟加载" class="headerlink" title="13.Mybatis的延迟加载"></a>13.Mybatis的延迟加载</h2><h3 id="13-1-什么是延迟加载？"><a href="#13-1-什么是延迟加载？" class="headerlink" title="13.1 什么是延迟加载？"></a>13.1 什么是延迟加载？</h3><p>场景：有时候一个账户有很多关联的信息，查询的时候会把关联的其他信息也查出来，这样对内存来说，就会造成系统资源浪费。</p><p><strong>延迟加载</strong>：在真正使用数据时才发起查询，不用的时候不查询。这又叫 按需加载 或 懒加载。</p><h3 id="13-2-什么是立即加载？"><a href="#13-2-什么是立即加载？" class="headerlink" title="13.2 什么是立即加载？"></a>13.2 什么是立即加载？</h3><p><strong>立即加载</strong>：不管用不用，只要一调用方法，立马发起查询。</p><h3 id="13-3-对应关系"><a href="#13-3-对应关系" class="headerlink" title="13.3 对应关系"></a>13.3 对应关系</h3><p>在对应的四中表关系中：</p><ul><li>一对多、多对多：通常情况下，都是采用延迟加载。</li><li>多对一、一对一：通常情况下，都是采用立即加载。</li></ul><h3 id="一对一延迟加载实现"><a href="#一对一延迟加载实现" class="headerlink" title="一对一延迟加载实现"></a>一对一延迟加载实现</h3><p>用 <code>&lt;association&gt;</code> 标签中的属性 <code>select</code> 来指定Dao中要延迟加载的方法的全类名</p><p>在主配置文件中开启延迟加载：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>settings</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--开启Mybatis支持延迟加载--></span>        <span class="token comment" spellcheck="true">&lt;!-- 默认为false --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>lazyLoadingEnabled<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 默认为false，3.4.1之前默认为true --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>aggressiveLazyLoading<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>settings</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="一对多延迟加载实现"><a href="#一对多延迟加载实现" class="headerlink" title="一对多延迟加载实现"></a>一对多延迟加载实现</h3><p>同样，在<code>&lt;collection&gt;</code> 标签中指定Dao中要延迟加载的方法的全类名</p><p>之后再开启延迟加载即可！</p><h2 id="Mybatis的缓存"><a href="#Mybatis的缓存" class="headerlink" title="Mybatis的缓存"></a>Mybatis的缓存</h2><ul><li><p>什么是缓存？</p><p>存在于内存中的临时数据。</p></li><li><p>为什么使用缓存？</p><p>减少和数据库交互次数，提高执行效率</p></li><li><p>什么样的数据能用缓存？什么样的数据不能用？</p><ul><li>适用于缓存：<ul><li>经常查询，并且不经常改变</li><li>数据的正确与否对最终结果影响不大（因为与数据库不同步）</li></ul></li><li>不适用于缓存：<ul><li>经常改变的数据</li><li>数据的正确与否对最终结果影响很大<ul><li>例如：商品的库存，银行的汇率，股市的牌价等</li></ul></li></ul></li></ul></li></ul><h3 id="一级缓存"><a href="#一级缓存" class="headerlink" title="一级缓存"></a>一级缓存</h3><ul><li><p>它指的是Mybatis中SqlSession对象的缓存。</p></li><li><p>当我们执行查询之后，查询的结果会同时存入到SqlSession为我们提供一块区域中。</p></li><li><p>该区域的结构是一个Map。当我们再次查询同样的数据，mybatis会先去sqlsession中查询是否有，有的话直接拿出来用。</p></li><li><p>当SqlSession对象被close时，mybatis的一级缓存也就消失了。</p><ul><li>手动清空缓存的方法：用SqlSession对象调用clearCache()</li></ul></li><li><p>当调用SqlSession的修改、添加、删除、commit()、close()等方法时，Mybatis会自动清空一级缓存</p></li><li><p>一级缓存存的是对象，查询相同数据，拿出来的对象都相等</p></li></ul><h3 id="二级缓存"><a href="#二级缓存" class="headerlink" title="二级缓存"></a>二级缓存</h3><p>二级缓存指的是Mybatis中SqlSessionFactory对象的缓存。由同一个SqlSessionFactory对象创建的SqlSession共享其缓存。</p><p>二级缓存使用步骤：</p><ol><li><p>让Mybatis框架支持二级缓存（在主配置文件中配置）</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>settings</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 其默认值为true --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cacheEnable<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>settings</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>让当前的映射文件支持二级缓存（在映射文件中配置）</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 开启user支持二级缓存 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cache</span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>让当前的操作支持二级缓存（在select标签中配置）</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>findAll<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">useCache</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select * from user    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><p>二级缓存存的是数据，查询相同数据，拿出来的对象不同</p><h2 id="14-Mybatis注解开发"><a href="#14-Mybatis注解开发" class="headerlink" title="14.Mybatis注解开发"></a>14.Mybatis注解开发</h2><blockquote><p>注解开发，可以把映射配置文件去掉，但是主配置文件是必需的！</p></blockquote><h3 id="14-1-环境搭建"><a href="#14-1-环境搭建" class="headerlink" title="14.1 环境搭建"></a>14.1 环境搭建</h3><p>删掉映射文件，将主配置文件中的<code>&lt;mappers&gt;</code> 中的<code>&lt;mapper&gt;</code> 改为 <code>&lt;package&gt;</code> ，并用其<code>name</code> 属性指定dao接口的全类名，之后就可以使用注解开发。</p><h3 id="14-2-注解开发注意事项"><a href="#14-2-注解开发注意事项" class="headerlink" title="14.2 注解开发注意事项"></a>14.2 注解开发注意事项</h3><p>当两种配置方式（XML和注解）都存在时，Mybatis不知道该用哪种方式，它会报错！不管<code>&lt;mappers&gt;</code> 标签中如何指定！</p><p>可以把映射文件放在其他路径（dao接口以外的路径），或者直接删掉！</p><h3 id="14-3-CRUD操作"><a href="#14-3-CRUD操作" class="headerlink" title="14.3 CRUD操作"></a>14.3 CRUD操作</h3><p>增删改查 四个注解：</p><p><code>@Select</code>、<code>@Insert</code>、<code>@Delete</code>、<code>@Update</code>。</p><p>都是放在dao接口中的 增删改查方法 的上面</p><p>注解的参数就是之前的Sql语句</p><p>原理：这四个注解，它们会自动获取方法的返回值（resultType）、参数（parameterType）以及接口所在的包（namespace）以及方法名（id），这样就完成了XML的功能</p><h3 id="14-4-实体类属性与数据库表字段的对应关系"><a href="#14-4-实体类属性与数据库表字段的对应关系" class="headerlink" title="14.4 实体类属性与数据库表字段的对应关系"></a>14.4 实体类属性与数据库表字段的对应关系</h3><p>如果实体类中的属性与数据库中的字段名称不一样的话，Mybatis是无法完成封装的，所以，需要将其对应关系声明一下，再拿来用</p><p>XML方式，Mybatis有<code>&lt;resultMap&gt;</code> 标签可以解决</p><p>那么注解方式，自然也有解决方案：<code>@Results</code> </p><p>介绍：</p><ul><li><p><code>@Results</code> </p><ul><li><p>标签：<code>@Results</code> </p></li><li><p>位置：在Dao接口的方法的上方即可</p></li><li><p>属性：<code>id</code> 是整个对应关系的唯一标示id；<code>value</code> 是一个数组，对应关系都在<code>value</code>里面声明</p></li><li><p>在<code>value</code>里还有一个标签：<code>@Result</code> 用于指定具体的对应关系</p></li></ul></li><li><p><code>@Result</code></p><ul><li>在XML里有一个标签 <code>&lt;id&gt;</code> 专门用于指定主键字段的对应关系，注解也一样有。</li><li>属性 <code>id</code>： 布尔类型，默认为false；当为true时，表示当前注解配置的是主键字段的对应关系；为false，反之。</li><li>属性 <code>column</code>：指定数据库中的字段</li><li>属性 <code>property</code>：指定实体类中的属性</li></ul></li></ul><p>eg：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">"select * from user"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Results</span><span class="token punctuation">(</span>id<span class="token operator">=</span><span class="token string">"userMap"</span><span class="token punctuation">,</span>value<span class="token operator">=</span><span class="token punctuation">{</span>        <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>id<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">,</span>column <span class="token operator">=</span> <span class="token string">"id"</span><span class="token punctuation">,</span>property <span class="token operator">=</span> <span class="token string">"userId"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>column <span class="token operator">=</span> <span class="token string">"username"</span><span class="token punctuation">,</span>property <span class="token operator">=</span> <span class="token string">"userName"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>column <span class="token operator">=</span> <span class="token string">"address"</span><span class="token punctuation">,</span>property <span class="token operator">=</span> <span class="token string">"userAddress"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>column <span class="token operator">=</span> <span class="token string">"sex"</span><span class="token punctuation">,</span>property <span class="token operator">=</span> <span class="token string">"userSex"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>column <span class="token operator">=</span> <span class="token string">"birthday"</span><span class="token punctuation">,</span>property <span class="token operator">=</span> <span class="token string">"userBirthday"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>别的方法想引用该关系怎么办？</p><p>使用 <code>@ResultMap</code>注解 其属性是String[] value，是一个数组，也就是说可以配置多个关系</p><p>标准写法：<code>@ResultMap(value={&quot;userMap&quot;})</code> </p><p>当只有一个value值得时候，可以省略不写：<code>@ResultMap({&quot;userMap&quot;})</code> </p><p>当数组只有一个值时，又可以省略大括号，所以：<code>@ResultMap(&quot;userMap&quot;)</code> </p><h3 id="一对一查询配置"><a href="#一对一查询配置" class="headerlink" title="一对一查询配置"></a>一对一查询配置</h3><p>简单来说，一对一查询就是配置好查询出来的结果，将其封装到对应的实体类中去。</p><p>在14.4的基础上，再加个 <code>one</code>，Like this：</p><p>其中 <code>select</code> 用于指定通过<code>column</code>指定输的uid来当做条件，用findById来查询出user，<code>fetchType</code> 是来指定 立即加载还是延迟加载，EAGER是立即，LAZY是延迟；一般一对一是 立即加载，一对多是 延迟加载。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">"select * from account"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Results</span><span class="token punctuation">(</span>id<span class="token operator">=</span><span class="token string">"accountMap"</span><span class="token punctuation">,</span>value <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>id<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">,</span>column <span class="token operator">=</span> <span class="token string">"id"</span><span class="token punctuation">,</span>property <span class="token operator">=</span> <span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>column <span class="token operator">=</span> <span class="token string">"uid"</span><span class="token punctuation">,</span>property <span class="token operator">=</span> <span class="token string">"uid"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>column <span class="token operator">=</span> <span class="token string">"money"</span><span class="token punctuation">,</span>property <span class="token operator">=</span> <span class="token string">"money"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>property <span class="token operator">=</span> <span class="token string">"user"</span><span class="token punctuation">,</span>column <span class="token operator">=</span> <span class="token string">"uid"</span><span class="token punctuation">,</span>one<span class="token operator">=</span><span class="token annotation punctuation">@One</span><span class="token punctuation">(</span>select<span class="token operator">=</span><span class="token string">"xyz.sky03.dao.IUserDao.findById"</span><span class="token punctuation">,</span>fetchType<span class="token operator">=</span> FetchType<span class="token punctuation">.</span>EAGER<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>List<span class="token operator">&lt;</span>Account<span class="token operator">></span> <span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="一对多查询配置"><a href="#一对多查询配置" class="headerlink" title="一对多查询配置"></a>一对多查询配置</h3><p>一对多也是同理，要新建一个findAccountByUid方法， <code>one</code> 要改成 <code>many</code> ，一对多用懒加载</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">"select * from user"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Results</span><span class="token punctuation">(</span>id<span class="token operator">=</span><span class="token string">"userMap"</span><span class="token punctuation">,</span>value<span class="token operator">=</span><span class="token punctuation">{</span>        <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>id<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">,</span>column <span class="token operator">=</span> <span class="token string">"id"</span><span class="token punctuation">,</span>property <span class="token operator">=</span> <span class="token string">"userId"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>column <span class="token operator">=</span> <span class="token string">"username"</span><span class="token punctuation">,</span>property <span class="token operator">=</span> <span class="token string">"userName"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>column <span class="token operator">=</span> <span class="token string">"address"</span><span class="token punctuation">,</span>property <span class="token operator">=</span> <span class="token string">"userAddress"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>column <span class="token operator">=</span> <span class="token string">"sex"</span><span class="token punctuation">,</span>property <span class="token operator">=</span> <span class="token string">"userSex"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>column <span class="token operator">=</span> <span class="token string">"birthday"</span><span class="token punctuation">,</span>property <span class="token operator">=</span> <span class="token string">"userBirthday"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>property <span class="token operator">=</span> <span class="token string">"accounts"</span><span class="token punctuation">,</span>column <span class="token operator">=</span> <span class="token string">"id"</span><span class="token punctuation">,</span>                many <span class="token operator">=</span> <span class="token annotation punctuation">@Many</span><span class="token punctuation">(</span>select <span class="token operator">=</span> <span class="token string">"xyz.sky03.dao.IAccountDao.findAccountByUid"</span><span class="token punctuation">,</span>                            fetchType <span class="token operator">=</span> FetchType<span class="token punctuation">.</span>LAZY<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="二级缓存配置"><a href="#二级缓存配置" class="headerlink" title="二级缓存配置"></a>二级缓存配置</h3><p>不管XML还是注解，一级缓存都是自动开启的！</p><p>二级缓存配置：</p><ol><li><p>在主配置文件中开启二级缓存</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--配置开启二级缓存--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>settings</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- cacheEnabled的默认值就是true --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cacheEnabled<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>settings</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在Dao类上加注解 <code>@CacheNamespace</code> ，blocking默认值false</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@CacheNamespace</span><span class="token punctuation">(</span>blocking <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IUserDao</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Framework </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Mybatis </tag>
            
            <tag> Framework </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Oracle</title>
      <link href="/posts/64820.html"/>
      <url>/posts/64820.html</url>
      
        <content type="html"><![CDATA[<h2 id="Oracle数据库的安装"><a href="#Oracle数据库的安装" class="headerlink" title="Oracle数据库的安装"></a>Oracle数据库的安装</h2><p>我安装的Oracle数据库版本为Oracle Database 12c Release 2</p><p>具体安装教程可以参考 <a href="https://jingyan.baidu.com/article/b87fe19e51b95e521835689f.html" target="_blank" rel="noopener">百度经验</a></p><p>操作系统为安装在虚拟机里面的Windows Server 2019 DataCenter</p><p>客户端我是用的是PLSQL Developer 13。<a href="https://www.allroundautomations.com" target="_blank" rel="noopener">官网</a>   <a href="https://blog.csdn.net/adosea/article/details/86136094" target="_blank" rel="noopener">激活码</a></p><h2 id="Oracle体系结构"><a href="#Oracle体系结构" class="headerlink" title="Oracle体系结构"></a>Oracle体系结构</h2><h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3><p>Oracle 数据库是数据的物理存储。其实 Oracle 数据库的概念和其它数据库不一样，这里的数据库是一个操作系统 只有一个库。可以看作是 Oracle 就只有一个大数据库。</p><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>一个 Oracle 实例（Oracle Instance）有一系列的后台进程（Backguound Processes)和内存结构 （Memory Structures)组成。一个数据库可以有 n 个实例。</p><p>12c 版本已经能一个实例有多个数据库了。</p><h3 id="用户"><a href="#用户" class="headerlink" title="用户"></a>用户</h3><p>用户是在实例下建立的。不同实例可以建相同名字的用户。</p><p>在Oracle数据库中用户是管理表的基本单位，对应MySQL中，某某库拥有几张表，而在Oracle中为：某某用户有几张表。</p><h3 id="表空间"><a href="#表空间" class="headerlink" title="表空间"></a>表空间</h3><p>表空间是 Oracle 对物理数据库上相关数据文件（ORA 或者 DBF 文件）的逻辑映射。一个数 据库在逻辑上被划分成一到若干个表空间，每个表空间包含了在逻辑上相关联的一组结构。每 个数据库至少有一个表空间(称之为 system 表空间)。</p><p>每个表空间由同一磁盘上的一个或多个文件组成，这些文件叫数据文件(datafile)。一个数据文件 只能属于一个表空间。</p><h3 id="数据文件（dbf、ora）"><a href="#数据文件（dbf、ora）" class="headerlink" title="数据文件（dbf、ora）"></a>数据文件（dbf、ora）</h3><p>数据文件是数据库的物理存储单位。数据库的数据是存储在表空间中的，真正是在某一个 或者多个数据文件中。而一个表空间可以由一个或多个数据文件组成，一个数据文件只能属于 一个表空间。一旦数据文件被加入到某个表空间后，就不能删除这个文件，如果要删除某个数 据文件，只能删除其所属于的表空间才行。</p><h2 id="Oracle的一些特殊机制"><a href="#Oracle的一些特殊机制" class="headerlink" title="Oracle的一些特殊机制"></a>Oracle的一些特殊机制</h2><blockquote><p>最开始的学习的时候，这些细节就让我很头疼</p></blockquote><ol><li><p>Oracle中，字段名，表名，用户名等 默认都是大写的。</p><p>比如：我用Navicat创建了个用户 <code>sky03</code> ，登录的时候用 <code>sky03</code>，提示用户名/密码无效，其实Navicat在创建表或用户的时候，会自动加上双引号<code>&quot;sky03&quot;</code>（强制使用原大小写），真正的用户名为<code>sky03</code>。而Oracle会自动把不加双引号的 表或用户名 转大写，也就是说我登录的时候的用户名为<code>SKY03</code>，所以登录的时候加上双引号就行了<code>&quot;sky03&quot;</code>。所以为了以后使用方便，以后都用大写。</p></li><li><p>与MySQL不同的是，Oracle的事务是手动提交的，所以增删改查后都要手动提交事务（commit），不然都是脏数据！</p></li><li><p>Oracle数据库开启，并且存在会话的时候，不要直接关机，应该先把会话关掉，再关掉数据库（也可以不关数据库），再关机。不然的话，下次启动登录会报错：<code>Oracle ORA-01033: ORACLE initialization or shutdown in progress</code> 。</p></li></ol><h2 id="创建表空间"><a href="#创建表空间" class="headerlink" title="创建表空间"></a>创建表空间</h2><p>表空间：ORACLE 数据库的逻辑单元。 数据库—表空间 一个表空间可以与多个数据 文件（物理结构）关联 </p><p>一个数据库下可以建立多个表空间，一个表空间可以建立多个用户、一个用户下可以建立 多个表。</p><p>创建表空间的语句：</p><pre class="line-numbers language-plsql"><code class="language-plsql">create tablespace "sky03"datafile 'c:\sky03.dbf'size 100mautoextend onnext 10m;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>sky03：为表空间名称 </p><p>datafile：指定表空间对应的数据文件 </p><p>size：后定义的是表空间的初始大小 </p><p>autoextend on：自动增长 ，当表空间存储都占满时，自动增长 </p><p>next：后指定的是一次自动增长的大小。</p><p>最后会在安装Oracle数据库的电脑上创建c:\sky03.dbf此文件</p><p>删除表空间的语句为：</p><pre class="line-numbers language-plsql"><code class="language-plsql">drop tablespace "sky03"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h2><h3 id="创建用户-1"><a href="#创建用户-1" class="headerlink" title="创建用户"></a>创建用户</h3><p>创建用户语句：</p><pre class="line-numbers language-plsql"><code class="language-plsql">CREATE USER "SKY03" IDENTIFIED BY "admin" DEFAULT TABLESPACE "sky03"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>CREATE USER：创建用户，后面是用户名</p><p>IDENTIFIED BY：后边是用户的密码 </p><p>DEFAULT TABLESPACE：后边是表空间名称 </p><p>Oracle 数据库与其它数据库产品的区别在于，表和其它的数据库对象都是存储在用户 下的。</p><p>这里有个东西要注意，就是如果创建的用户名里有小写字母，登录时就要在用户名上加双引号，Oracle会自动将不带双引号的用户名转大写，例如：</p><p>创建的用户名为<code>sky03</code>，登录时填写用户名就必须为<code>&quot;sky03&quot;</code>，不然就会提示<code>用户名/口令无效</code>，如果用户名为<code>SKY03</code>，登录时就可以直接填写<code>SKY03或者sky03</code>，密码是区分大小写的！</p><p><strong>密码为特殊字符时，创建用户时密码需要加双引号，登陆时也需要把密码用双引号括起来。</strong></p><h3 id="给用户分配角色"><a href="#给用户分配角色" class="headerlink" title="给用户分配角色"></a>给用户分配角色</h3><p>新创建的用户没有角色身份，登陆后会提示</p><p><img src="/medias/loading.gif" data-original="https://sky03-blog-images.oss-cn-beijing.aliyuncs.com/blog-img/20190421133134.png" alt></p><p>Oracle 中已存在三个重要的角色：connect 角色，resource 角色，dba 角色。</p><ul><li><p>CONNECT 角色： –是授予最终用户的典型权利，最基本的 </p><ul><li><p>ALTER SESSION –修改会话 </p></li><li><p>CREATE CLUSTER –建立聚簇 </p></li><li><p>CREATE DATABASE LINK –建立数据库链接 </p></li><li><p>CREATE SEQUENCE –建立序列 </p></li><li><p>CREATE SESSION –建立会话 </p></li><li><p>CREATE SYNONYM –建立同义词 </p></li><li><p>CREATE VIEW –建立视图</p></li></ul></li><li><p>RESOURCE 角色： –是授予开发人员的</p><ul><li><p>CREATE CLUSTER –建立聚簇 </p></li><li><p>CREATE PROCEDURE –建立过程 </p></li><li><p>CREATE SEQUENCE –建立序列 </p></li><li><p>CREATE TABLE –建表 </p></li><li><p>CREATE TRIGGER –建立触发器 </p></li><li><p>CREATE TYPE –建立类型</p></li></ul></li><li><p>DBA 角色： 拥有全部特权，是系统最高权限，只有 DBA 才可以创建数据库结构，并且系统 权限也需要 DBA 授出，且 DBA 用户可以操作全体用户的任意基表，包括删除</p></li></ul><p>授权语句：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">GRANT</span> <span class="token string">"DBA"</span> <span class="token keyword">TO</span> <span class="token string">"SKY03"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>之后就可以用该用户名登录了！</p><h2 id="Oracle数据类型"><a href="#Oracle数据类型" class="headerlink" title="Oracle数据类型"></a>Oracle数据类型</h2><table border="1" cellspacing="0"><tr>    <th>No</th>    <th>数据类型</th>    <th>描述</th></tr><tr>    <td>1</td>    <td>Varchar， Varchar2</td>    <td>表示一个字符串</td></tr><tr>    <td rowspan="2">2</td>    <td rowspan="2">NUMBER</td>    <td>NUMBER(n)表示一个整数，长度是 n</td></tr><tr>    <td>NUMBER(m,n):表示一个小数，总长度是 m，小数是 n，整数是 m-n</td></tr><tr>    <td>3</td>    <td>DATA</td>    <td>表示日期类型</td></tr><tr>    <td>4</td>    <td>CLOB</td>    <td>大对象，表示大文本数据类型，可存 4G</td></tr><tr>    <td>5</td>    <td>BLOB</td>    <td>大对象，表示二进制数据，可存 4G</td></tr></table><ul><li>Varchar2：常用，它会自动截取掉多余的字符长度</li></ul><h2 id="表的管理"><a href="#表的管理" class="headerlink" title="表的管理"></a>表的管理</h2><h3 id="SQL的注释"><a href="#SQL的注释" class="headerlink" title="SQL的注释"></a>SQL的注释</h3><p>SQL的单行注释为 <code>--</code></p><p>多行注释为 <code>/* ... */</code></p><h3 id="建表"><a href="#建表" class="headerlink" title="建表"></a>建表</h3><p>语法：</p><p>Create table “用户名”.”表名”（ </p><p>字段 1 数据类型 [default 默认值], </p><p>字段 2 数据类型 [default 默认值],</p><p>… 字段 n 数据类型 [default 默认值] </p><p>）;</p><p>注意：<code>&quot;用户名&quot;.&quot;表名&quot;</code>，如果所使用的”用户名”已经是当前已经登录的用户，则可以省略不写，即：<code>&quot;表名&quot;</code></p><p>范例：创建 person 表 </p><pre class="line-numbers language-plsql"><code class="language-plsql">CREATE TABLE "SKY03"."person" (  "pid" NUMBER(10) NOT NULL ,  "name" VARCHAR2(10) ,  "gender" NUMBER(1) DEFAULT 1 ,  "birthday" DATE );INSERT INTO "SKY03"."person"("pid", "name", "gender", "birthday") VALUES ('1', '张三', '1', TO_DATE('2019-04-21 15:42:24', 'SYYYY-MM-DD HH24:MI:SS'));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="删表"><a href="#删表" class="headerlink" title="删表"></a>删表</h3><p>三个删除</p><ul><li><p><code>删除表中全部记录</code></p><pre class="line-numbers language-plsql"><code class="language-plsql">DELETE FROM "person";<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><code>删除表结构</code></p><pre class="line-numbers language-plsql"><code class="language-plsql">DROP TABLE "person";<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><code>先删除表，再次创建表</code>。效果等同于 <code>删除表中全部记录</code> 。</p><p>在数据量大的情况下，尤其在表中带有索引的情况下，该操作效率高。</p><p>索引可以提高查询效率，但是会影响增删改效率</p><pre class="line-numbers language-plsql"><code class="language-plsql">TRUNCATE TABLE "person";<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h3 id="表结构的增删改（字段）"><a href="#表结构的增删改（字段）" class="headerlink" title="表结构的增删改（字段）"></a>表结构的增删改（字段）</h3><p>在 sql 中使用 alter 可以修改表</p><ul><li><p>添加字段：<code>ALTER TABLE 表名称 ADD (字段 1 类型 [DEFAULT 默认值]，字段 2 类型 [DEFAULT 默认值]...)</code></p></li><li><p>修改字段：<code>ALTER TABLE 表名称 MODIFY (字段 1 类型 [DEFAULT 默认值]，字段 2 类型 [DEFAULT 默认值]...)</code></p></li><li><p>修改字段名：<code>ALTER TABLE 表名称 RENAME COLUMN 字段1 TO 字段 2</code></p></li><li><p>删除字段：<code>ALTER TABLE 表名称 DROP COLUMN 字段</code></p></li></ul><p>添加字段：</p><pre class="line-numbers language-plsql"><code class="language-plsql">ALTER TABLE "SKY03"."person" ADD ("address" varchar2(10) );<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>修改字段属性：</p><pre class="line-numbers language-plsql"><code class="language-plsql">ALTER TABLE "SKY03"."person" MODIFY ("birthday" VARCHAR2(7) );<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>修改字段名：</p><pre class="line-numbers language-plsql"><code class="language-plsql">ALTER TABLE "SKY03"."person" RENAME COLUMN "pid" TO "id" ;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>删除字段：</p><pre class="line-numbers language-plsql"><code class="language-plsql">ALTER TABLE "SKY03"."person" DROP COLUMN "pid" ;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="表数据的增删改（记录）"><a href="#表数据的增删改（记录）" class="headerlink" title="表数据的增删改（记录）"></a>表数据的增删改（记录）</h3><h4 id="INSERT（增）"><a href="#INSERT（增）" class="headerlink" title="INSERT（增）"></a>INSERT（增）</h4><p>标准写法：<br><code>INSERT INTO 表名[(列名 1，列名 2，...)]VALUES(值 1，值 2，...)</code></p><p>简单写法（不建议）：<br><code>INSERT INTO 表名 VALUES(值 1，值 2，...)</code></p><p>注意：使用简单的写法必须按照表中的字段的顺序来插入值，而且如果有为空的字段使用 null</p><p>另外，Oracle默认是手动提交事务的，所以此时插入的数据为<code>脏数据</code>，点下rollback，数据就没了，所以以后<code>增删改都要提交事务</code>。</p><p>MySQL中默认是自动提交事务，所以不用手动提交。</p><p>java中connection对象是默认自动提交事务的。</p><p>提交：<code>commit</code></p><p>回滚：<code>rollback</code></p><pre class="line-numbers language-plsql"><code class="language-plsql">INSERT INTO "SKY03"."person"("pid", "name", "gender", "birthday") VALUES ('1', '张三', '1', TO_DATE('2019-04-21 15:42:24', 'SYYYY-MM-DD HH24:MI:SS'));COMMIT;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="DELETE（删）"><a href="#DELETE（删）" class="headerlink" title="DELETE（删）"></a>DELETE（删）</h4><p>语法 :<br><code>DELETE FROM 表名 WHERE 删除条件;</code></p><p>在删除语句中如果不指定删除条件的话就会删除所有的数据</p><h4 id="UPDATE（改）"><a href="#UPDATE（改）" class="headerlink" title="UPDATE（改）"></a>UPDATE（改）</h4><p>全部修改：<code>UPDATE 表名 SET 字段 1=值 1，字段 2=值 2，....</code></p><p>局部修改：<code>UPDATE 表名 SET 字段 1=值 1，字段 2=值 2，....WHERE 修改条件;</code></p><h3 id="序列-SEQUENCE"><a href="#序列-SEQUENCE" class="headerlink" title="序列 (SEQUENCE)"></a>序列 (SEQUENCE)</h3><p>在MySQL中主键一般都是自增、唯一、非空的属性，在Oracle中也一样。MySQL用auto_increment完成以上需求，Oracle用的就是序列(SEQUENCE)。</p><p>序列是不属于任何一张表，但是可以和表做绑定。</p><h4 id="创建序列"><a href="#创建序列" class="headerlink" title="创建序列"></a>创建序列</h4><ul><li><p>语法：</p><p><code>CREATE SEQUENCE 序列名 [相关参数]</code></p><pre class="line-numbers language-plsql"><code class="language-plsql">-- s代表序列，person代表是person表的序列CREATE SEQUENCE s_person;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>参数：（一般不用，了解）</p><p><code>INCREMENT BY</code> :序列变化的步进，负值表示递减。(默认1)</p><p><code>START WITH</code>:序列的初始值 。(默认1)</p><p><code>MAXVALUE</code>:序列可生成的最大值。(默认不限制最大值，NOMAXVALUE)</p><p><code>MINVALUE</code>:序列可生成的最小值。(默认不限制最小值，NOMINVALUE)</p><p><code>CYCLE</code>:用于定义当序列产生的值达到限制值后是否循环(NOCYCLE:不循环，CYCLE:循环)。</p><p><code>CACHE</code>:表示缓存序列的个数，数据库异常终止可能会导致序列中断不连续的情况，默认值为20，如果不使用缓存可设置<code>NOCACHE</code></p></li></ul><h4 id="修改或删除序列"><a href="#修改或删除序列" class="headerlink" title="修改或删除序列"></a>修改或删除序列</h4><ul><li><p>使用  <code>alter</code>  命令进行修改</p></li><li><p>使用  <code>drop</code>  命令删除</p></li></ul><h4 id="序列的使用"><a href="#序列的使用" class="headerlink" title="序列的使用"></a>序列的使用</h4><ul><li><p><code>currval</code>  表示序列的当前值，刚建好的序列没有当前值，必须先执行一次<code>nextval</code>  才能获取到值，否则会报错！</p></li><li><p><code>nextval</code>  表示序列的下一个值。新序列首次使用时获取的是该序列的初始值，从第二次使用时开始按照设置的步进递增。</p></li><li><p>查询序列的值：<code>select s_person.[currval/nextval] from dual;</code></p><ul><li>其中dual为虚表，只是为了补全语法，没有任何意义，因为Oracle中查询语句必须带有from关键词，所以采用虚表。</li></ul></li><li><p>SQL语句中使用：<code>insert into table (id) values (s_person.nextval)</code></p></li></ul><h2 id="Scott用户"><a href="#Scott用户" class="headerlink" title="Scott用户"></a>Scott用户</h2><p>简单来说，Scott用户是Oracle专门给新手练习用的账户，自带的有一些表。但是12c版本的数据库没有Scott账户，但是有Scott账户的SQL文件，可以恢复。具体教程 <a href="https://www.cnblogs.com/xqzt/p/5034375.html" target="_blank" rel="noopener">点这里</a>。</p><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>数据库的增删改查，难的就是查，尤其是多表查询，当涉及到复杂查询，就必须使用函数。</p><p>Oracle中的函数分为 <code>单行函数</code> 和 <code>多行函数</code></p><h3 id="单行函数"><a href="#单行函数" class="headerlink" title="单行函数"></a>单行函数</h3><blockquote><p>作用于一行，返回一个值</p></blockquote><ol><li><p>字符函数</p><ul><li><p><code>upper(&#39;yes&#39;)</code>  字符小写转大写</p><pre class="line-numbers language-plsql"><code class="language-plsql">select upper('yes') from dual; -- 结果是 YES<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><code>lower(&#39;YES&#39;)</code>  字符大写转小写</p><pre class="line-numbers language-plsql"><code class="language-plsql">select upper('YES') from dual; -- 结果是 yes<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li><li><p>数值函数</p><ul><li><p><code>round()</code>  四舍五入</p><pre class="line-numbers language-plsql"><code class="language-plsql">-- 第二个参数：正数，保留小数点后几位；负数，保留小数点前几位；0或不写，不保留小数。select round(26.16,1) from dual;  -- 26.2select round(26.16,-1) from dual; -- 30select round(26.16,-2) from dual; -- 0select round(56.16,-2) from dual; -- 100<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>trunc()</code>  截取数字</p><pre class="line-numbers language-plsql"><code class="language-plsql">-- 第二个参数：正数，保留小数点后几位，其他舍去；负数，保留小数点前几位，其他舍去；0或不写，舍去小数。select trunc(26.16,1) from dual;  -- 26.1select trunc(26.16,-1) from dual; -- 20select trunc(26.16,-2) from dual; -- 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>mod()</code>  求余</p><pre class="line-numbers language-plsql"><code class="language-plsql">-- 第一个参数对第二个参数求余select mod(26.16,1) from dual; -- 0.16select mod(10,3) from dual; -- 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>日期函数</p><ul><li><p><code>sysdate</code>  表示当前系统时间</p><pre class="line-numbers language-plsql"><code class="language-plsql">--查询出emp表中所有员工入职距离现在几天。 最后的e是emp的别名select sysdate-e.hiredate from emp e;--算出明天此刻select sysdate+1 from dual;--查询出emp表中所有员工入职距离现在几月。select months_between(sysdate,e.hiredate) from emp e;--查询出emp表中所有员工入职距离现在几年。select months_between(sysdate,e.hiredate)/12 from emp e;--查询出emp表中所有员工入职距离现在几周。select round((sysdate-e.hiredate)/7) from emp e;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>转换函数</p><ul><li><p><code>to_char()</code>  日期转字符串</p><pre class="line-numbers language-plsql"><code class="language-plsql">select to_char(sysdate, 'yyyy-mm-dd hh:mi:ss') from dual;-- 2019-04-22 11:49:43select to_char(sysdate, 'fm yyyy-mm-dd hh:mi:ss') from dual;-- 2019-4-22 11:49:14 （月日不带0）select to_char(sysdate, 'fm yyyy-mm-dd hh24:mi:ss') from dual;--  2019-4-22 23:50:10 （24小时制）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>to_date()</code>  字符串转日期</p><pre class="line-numbers language-plsql"><code class="language-plsql">select to_date('2018-6-7 16:39:50', 'fm yyyy-mm-dd hh24:mi:ss') from dual;-- 2018/6/7 16:39:50   注意结果是日期类型的<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul></li><li><p>通用函数</p><ul><li><p><code>nvl(参数1,参数2)</code>  如果参1为null值，就返回参2，如果参1不为null，则返回参1</p><pre class="line-numbers language-plsql"><code class="language-plsql">--算出emp表中所有员工的年薪。--奖金里面有null值，如果null值和任意数字做算术运算，结果都是null。select e.sal*12+nvl(e.comm, 0) from emp e;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ol><h3 id="通用函数"><a href="#通用函数" class="headerlink" title="通用函数"></a>通用函数</h3><blockquote><p>通用函数，在MySQL和Oracle里通用！</p></blockquote><ul><li><p><code>when then</code>  条件表达式</p><ul><li>用法一：</li></ul><pre class="line-numbers language-plsql"><code class="language-plsql">---给emp表中员工起中文名---等值判断select e.ename,        case e.ename         when 'SMITH' then '曹贼'           when 'ALLEN' then '大耳贼'             when 'WARD' then '诸葛小儿'               else '无名'                 endfrom emp e;-- 结果：emp表的员工名前三个会自动改掉，其他的走else<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/medias/loading.gif" data-original="https://sky03-blog-images.oss-cn-beijing.aliyuncs.com/blog-img/201904230827.PNG" alt="Oracle"></p><ul><li>用法二：</li></ul><pre class="line-numbers language-plsql"><code class="language-plsql">---给emp表中员工起中文名---等值判断select e.ename,        case e.ename         when 'SMITH' then '曹贼'           when 'ALLEN' then '大耳贼'             when 'WARD' then '诸葛小儿'               --else '无名'                 endfrom emp e;-- 结果：没有指定名字的，全部变成null值-- 一般可以用于批量将记录的某字段变为null值-- 其实这里的when后相当于 e.ename='SMITH' <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/medias/loading.gif" data-original="https://sky03-blog-images.oss-cn-beijing.aliyuncs.com/blog-img/201904230837.PNG" alt="Oracle"></p><ul><li>用法三：</li></ul><pre class="line-numbers language-plsql"><code class="language-plsql">---判断emp表中员工工资，如果高于3000显示高收入，如果高于1500低于3000显示中等收入，-----其余显示低收入-----范围判断select e.sal,        case          when e.sal>3000 then '高收入'           when e.sal>1500 then '中等收入'               else '低收入'                 endfrom emp e;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/medias/loading.gif" data-original="https://sky03-blog-images.oss-cn-beijing.aliyuncs.com/blog-img/201904230844.PNG" alt="Oracle"></p></li><li><p><code>decode()</code>  Oracle专用表达式，作用和 <code>when then</code> 一样</p><pre class="line-numbers language-plsql"><code class="language-plsql">----oracle专用条件表达式----oracle中除了起别名，都用单引号。select e.ename,         decode(e.ename,          'SMITH',  '曹贼',            'ALLEN',  '大耳贼',              'WARD',  '诸葛小儿',                '无名') "中文名"   --双引号可以去掉，但是不能用单引号from emp e;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/medias/loading.gif" data-original="https://sky03-blog-images.oss-cn-beijing.aliyuncs.com/blog-img/201904230857.PNG" alt></p></li><li><p>我们开发人员讲究代码可重用，最好使用通用函数，MySQL和Oracle都能用！</p></li></ul><h3 id="多行函数（聚合函数）"><a href="#多行函数（聚合函数）" class="headerlink" title="多行函数（聚合函数）"></a>多行函数（聚合函数）</h3><blockquote><p>作用于多行，返回一个值</p></blockquote><ol><li><p><code>count()</code>  统计记录数</p><pre class="line-numbers language-plsql"><code class="language-plsql">select count(1) from emp;---查询总数量-- 有时候写的是count(*)，其实底层走的还是count(1)-- count(1)的意思是count(第一个字段)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p><code>sum()</code>  求和函数</p><pre class="line-numbers language-plsql"><code class="language-plsql">select sum(sal) from emp;---工资总和<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><code>max()</code>  最大值</p><pre class="line-numbers language-plsql"><code class="language-plsql">select max(sal) from emp;---最大工资<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><code>min()</code>  最小值</p><pre class="line-numbers language-plsql"><code class="language-plsql">select min(sal) from emp;---最低工资<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><code>avg()</code>  平均值</p><pre class="line-numbers language-plsql"><code class="language-plsql">select avg(sal) from emp;---平均工资<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h2 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h2><h3 id="分组查询"><a href="#分组查询" class="headerlink" title="分组查询"></a>分组查询</h3><p>关键字 <code>group by</code></p><p>语法：<code>SELECT 分组字段 [聚合函数] FROM 表名 {GROUP BY 分组字段}</code></p><pre class="line-numbers language-plsql"><code class="language-plsql">select e.sex, avg(e.age) --, e.enamefrom emp egroup by e.sex;-- 整个语句意思是 以性别为组，统计男女的平均年龄<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>分组查询中，出现在group by后面的原始列，才能出现在select后面</p></li><li><p>没有出现在group by后面的列，想在select后面，必须加上聚合函数。</p></li></ul><hr><ul><li><p>不能使用别名当条件</p><p>因为一般条件的执行顺序高于查询</p><p>例如： where的执行优先级高于select，所以s是无效的</p><pre class="line-numbers language-plsql"><code class="language-plsql">select ename, sal s from emp where s>1500; --不能执行<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>正确：</p><pre class="line-numbers language-plsql"><code class="language-plsql">select ename, sal s from emp where sal>1500;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>where和having的区别</p><ul><li>查询出平均工资高于2000的部门信息</li></ul><pre class="line-numbers language-plsql"><code class="language-plsql">select e.deptno, avg(e.sal)from emp egroup by e.deptnohaving avg(e.sal)>2000;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>查询出每个部门工资高于800的员工的平均工资</li></ul><pre class="line-numbers language-plsql"><code class="language-plsql">select e.deptno, avg(e.sal) asalfrom emp ewhere e.sal>800group by e.deptno;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>where是过滤分组前的数据，having是过滤分组后的数据。</p><p>表现形式：where必须在group by之前，having是在group by之后。</p><p>先查询出每个部门工资高于800的员工的平均工资，然后再查询出平均工资高于2000的部门：</p><pre class="line-numbers language-plsql"><code class="language-plsql">select e.deptno, avg(e.sal) asalfrom emp ewhere e.sal>800group by e.deptnohaving avg(e.sal)>2000;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h3><h4 id="多表查询中的一些概念"><a href="#多表查询中的一些概念" class="headerlink" title="多表查询中的一些概念"></a>多表查询中的一些概念</h4><ul><li><p>笛卡尔积</p><pre class="line-numbers language-plsql"><code class="language-plsql">select * from emp e, dept d;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>emp有14条记录，dept有4条记录，查询出来的结果为14*4=56条记录，其中大部分没有意义</p></li><li><p>等值连接</p><pre class="line-numbers language-plsql"><code class="language-plsql">select * from emp e, dept dwhere e.deptno=d.deptno;-- 查询出主键相等的信息 14条信息<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>内连接（老版的等值连接）</p><pre class="line-numbers language-plsql"><code class="language-plsql">select *from emp e inner join dept don e.deptno = d.deptno;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>外连接（左连接和右连接）</p><pre class="line-numbers language-plsql"><code class="language-plsql">--查询出所有部门，以及部门下的员工信息select *from emp e right join dept don e.deptno=d.deptno;---查询所有员工信息，以及员工所属部门select *from emp e left join dept don e.deptno=d.deptno;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>oracle中专用外连接</p><pre class="line-numbers language-plsql"><code class="language-plsql">select *from emp e, dept dwhere e.deptno(+) = d.deptno;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>自连接：其实就是站在不同的角度把一张表看成多张表。</p><pre class="line-numbers language-plsql"><code class="language-plsql">-- 查询出员工姓名，员工领导姓名，员工和领导都在emp表select e1.ename, e2.enamefrom emp e1, emp e2where e1.mgr = e2.empno;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h3><blockquote><p>在一个查询的内部还包括另一个查询，则此查询称为子查询。</p><p>Sql的任何位置都可以加入子查询。</p></blockquote><ul><li><p>单列子查询，返回一列的一个内容</p><pre class="line-numbers language-plsql"><code class="language-plsql">---查询出工资和SCOTT一样的员工信息select * from emp where sal in --如果确定是ename是惟一的，in可以换成=(select sal from emp where ename = 'SCOTT');<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>单行子查询，返回多个列，有可能是一个完整的记录</p><pre class="line-numbers language-plsql"><code class="language-plsql">---查询出工资和10号部门任意员工一样的员工信息select * from emp where sal in(select sal from emp where deptno = 10);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>多行子查询，返回多条记录 </p><pre class="line-numbers language-plsql"><code class="language-plsql">---查询出每个部门最低工资，和最低工资员工姓名，和该员工所在部门名称---1，先查询出每个部门最低工资select deptno, min(sal) msalfrom emp group by deptno;---2，三表联查，得到最终结果。select t.deptno, t.msal, e.ename, d.dnamefrom (select deptno, min(sal) msal      from emp       group by deptno) t, emp e, dept dwhere t.deptno = e.deptnoand t.msal = e.saland e.deptno = d.deptno;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h3><pre class="line-numbers language-plsql"><code class="language-plsql">---rownum行号：当我们做select操作的时候，--每查询出一行记录，就会在该行上加上一个行号，--行号从1开始，依次递增，不能跳着走。----排序操作会影响rownum的顺序select rownum, e.* from emp e order by e.sal desc----如果涉及到排序，但是还要使用rownum的话，我们可以再次嵌套查询。select rownum, t.* from(select rownum, e.* from emp e order by e.sal desc) t;----emp表工资倒叙排列后，每页五条记录，查询第二页。----rownum行号不能写上大于一个正数。select * from(    select rownum rn, tt.* from(          select * from emp order by sal desc    ) tt where rownum<11) where rn>5<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h2><blockquote><p>视图的概念：视图就是封装了一条复杂查询的语句，提供一个查询的窗口，所有数据来自于原表。</p></blockquote><h3 id="创建视图"><a href="#创建视图" class="headerlink" title="创建视图"></a>创建视图</h3><blockquote><p>创建视图<strong>必须有DBA权限</strong></p></blockquote><p>语法1：<code>CREATE VIEW 视图名称  AS 子查询</code></p><pre class="line-numbers language-plsql"><code class="language-plsql">create view v_emp as select ename, job from emp;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>语法2：<code>CREATE OR REPLACE VIEW 视图名称  AS 子查询</code></p><p>如果视图已经存在我们可以使用语法2来创建视图，这样已有的视图会被覆盖。</p><h3 id="查询视图"><a href="#查询视图" class="headerlink" title="查询视图"></a>查询视图</h3><p>跟普通查询没什么区别：</p><pre class="line-numbers language-plsql"><code class="language-plsql">select * from v_emp;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="修改视图"><a href="#修改视图" class="headerlink" title="修改视图"></a>修改视图</h3><p>跟普通update没什么区别，视图修改的是原表的数据，不推介修改视图</p><pre class="line-numbers language-plsql"><code class="language-plsql">update v_emp set job='CLERK' where ename='ALLEN';commit;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="创建只读视图"><a href="#创建只读视图" class="headerlink" title="创建只读视图"></a>创建只读视图</h3><p> 为了防止修改视图还可以创建只读视图</p><pre class="line-numbers language-plsql"><code class="language-plsql"> create view v_emp1 as select ename, job from emp with read only;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="视图的作用"><a href="#视图的作用" class="headerlink" title="视图的作用"></a>视图的作用</h3><ol><li><p>视图可以屏蔽掉一些敏感字段。</p></li><li><p>保证总部和分部数据及时统一。</p></li></ol><h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>索引就是在表的列上构建一个二叉树。<br>达到大幅度提高<code>查询效率</code>的目的，但是索引 会影响<code>增删改</code>的效率。<br>索引分为 <code>单列索引</code> 和 <code>复合索引</code></p><h3 id="单列索引"><a href="#单列索引" class="headerlink" title="单列索引"></a>单列索引</h3><ul><li><p>创建单列索引</p><p>语法：<code>CREATE index 索引名  on 表名(列名)</code></p><pre class="line-numbers language-plsql"><code class="language-plsql">create index idx_ename on emp(ename);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>单列索引触发规则</p></li><li><p>查询条件必须是索引列中的原始值。</p></li><li><p>单行函数，模糊查询，都会影响索引的触发。</p></li></ul><h3 id="复合索引"><a href="#复合索引" class="headerlink" title="复合索引"></a>复合索引</h3><ul><li><p>创建复合索引</p><pre class="line-numbers language-plsql"><code class="language-plsql">create index idx_enamejob on emp(ename, job);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>复合索引触发规则  </p><ul><li>复合索引中第一列为优先检索列。</li><li>触发复合索引，必须包含有优先检索列中的原始值。</li></ul></li><li><p>示例：</p><ul><li>假设以上单列索引和复合索引同时存在</li></ul><pre class="line-numbers language-plsql"><code class="language-plsql">select * from emp where ename='SCOTT' and job='xx';---触发复合索引select * from emp where ename='SCOTT';---触发单列索引。select * from emp where ename='SCOTT' or job='xx';---这个相当于两条查询语句，一个条件为or的前者，触发单列索引；一个条件为or的后者，不触发任何索引。---or到一起，就是不触发索引<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="PL-SQL编程语言"><a href="#PL-SQL编程语言" class="headerlink" title="PL/SQL编程语言"></a>PL/SQL编程语言</h2><ul><li><p>pl/sql编程语言是对sql语言的扩展，使得sql语言具有过程化编程的特性。</p></li><li><p>pl/sql编程语言比一般的过程化编程语言，更加灵活高效。</p></li><li><p>pl/sql编程语言主要用来编写存储过程和存储函数等。</p></li></ul><h3 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h3><pre class="line-numbers language-plsql"><code class="language-plsql">declare     说明部分  （变量说明，游标申明，例外说明  〕   begin     语句序列  （DML语句〕…  exception     例外处理语句    End; <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>示例：</p><ul><li>赋值操作可以使用<code>:=</code>也可以使用<code>into</code>查询语句赋值</li></ul><pre class="line-numbers language-plsql"><code class="language-plsql">declare    i number(2) := 10;  -- `:=`是赋值的意思，相当于Java里的 `=`    s varchar2(10) := '小明';    ena emp.ename%type;---引用型变量    emprow emp%rowtype;---记录型变量begin    dbms_output.put_line(i); --输出变量    dbms_output.put_line(s);    select ename into ena from emp where empno = 7788;    dbms_output.put_line(ena);    select * into emprow from emp where empno = 7788;    dbms_output.put_line(emprow.ename || '的工作为：' || emprow.job);  -- 双竖线`||`是连接字符串的符号end;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="if判断语句"><a href="#if判断语句" class="headerlink" title="if判断语句"></a>if判断语句</h3><p>需求：</p><ol><li>输入小于18的数字，输出未成年</li><li>输入大于18小于40的数字，输出中年人</li><li>输入大于40的数字，输出老年人</li></ol><p>语法：</p><pre class="line-numbers language-plsql"><code class="language-plsql">declare  i number(3) := &i;  -- &i表示键盘输入，&后可以跟任何变量begin  if i<18 then    dbms_output.put_line('未成年');  elsif i<40 then  -- elsif相当于else if    dbms_output.put_line('中年人');  else    dbms_output.put_line('老年人');  end if;  --if语句结束再加分号;end;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="loop循环"><a href="#loop循环" class="headerlink" title="loop循环"></a>loop循环</h3><p>需求： 用三种方式输出1到10是个数字</p><ul><li><p>while循环</p><pre class="line-numbers language-plsql"><code class="language-plsql">declare  i number(2) := 1;begin  while i<11 loop  i小于11，就一直循环     dbms_output.put_line(i);     i := i+1;  end loop;end;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>exit循环</p><pre class="line-numbers language-plsql"><code class="language-plsql">declare  i number(2) := 1;begin  loop    exit when i>10; -- 当i大于10的时候推出循环    dbms_output.put_line(i);    i := i+1;  end loop;end;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>for循环</p><pre class="line-numbers language-plsql"><code class="language-plsql">declarebegin  for i in 1..10 loop  -- 变量i 从1循环到10结束     dbms_output.put_line(i);    end loop;end;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="游标"><a href="#游标" class="headerlink" title="游标"></a>游标</h3><blockquote><p>游标可以存放多个对象，多行记录。</p></blockquote><p>需求：输出emp表中所有员工的姓名</p><pre class="line-numbers language-plsql"><code class="language-plsql">declare  cursor c1 is select * from emp;  emprow emp%rowtype;begin  open c1;     loop         fetch c1 into emprow;         exit when c1%notfound;         dbms_output.put_line(emprow.ename);     end loop;  close c1;end;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 工具和中间件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> Oracle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Maven</title>
      <link href="/posts/38008.html"/>
      <url>/posts/38008.html</url>
      
        <content type="html"><![CDATA[<h2 id="什么是Maven？"><a href="#什么是Maven？" class="headerlink" title="什么是Maven？"></a>什么是Maven？</h2><p>Maven 是专门用于构建和管理Java相关项目的工具。</p><p>Maven 的正确发音是[ˈmevən]，而不是“马瘟”以及其他什么瘟。Maven 在美国代表专家、内行的意思。</p><p>所以用Maven管理Java 项目，你就是专家了 -_-!</p><h3 id="Maven-能帮我们做什么事？"><a href="#Maven-能帮我们做什么事？" class="headerlink" title="Maven 能帮我们做什么事？"></a>Maven 能帮我们做什么事？</h3><ol><li>统一管理各种jar包</li><li>编译java文件</li><li>单元测试</li><li>统一的项目结构</li></ol><h2 id="Maven的安装-windows"><a href="#Maven的安装-windows" class="headerlink" title="Maven的安装(windows)"></a>Maven的安装(windows)</h2><blockquote><p>macOS下直接brew install maven即可</p></blockquote><ol><li>去官网下载最新版Maven <a href="http://maven.apache.org/" target="_blank" rel="noopener">http://maven.apache.org/</a></li><li>下载后直接解压放在没有中文，没有空格的路径下</li><li>配置全局环境变量<code>MAVEN_HOME</code>为刚才的路径(需要JAVA_HOME)</li><li>在path里添加<code>%MAVEN_HOME%\bin</code></li><li>win+R  cmd 输入<code>mvn -v</code>，出现版本信息 即配置成功。</li></ol><h2 id="Maven仓库"><a href="#Maven仓库" class="headerlink" title="Maven仓库"></a>Maven仓库</h2><blockquote><p>所谓的仓库就是用于存放项目需要的jar包的。</p><p>maven采用一个仓库，多个项目的方式，让多个项目共享一个仓库里的相同jar包。</p></blockquote><h3 id="Maven仓库有三个："><a href="#Maven仓库有三个：" class="headerlink" title="Maven仓库有三个："></a>Maven仓库有三个：</h3><p><strong>本地仓库</strong>、<strong>远程仓库</strong>（私服）、<strong>中央仓库</strong></p><p>本地仓库一般位于<code>${user.home}/.m2/repository/</code>，也就是用户目录下的.m2文件夹</p><p>可以在maven/conf/settings.xml文件中配置<code>&lt;localRepository&gt;&lt;/localRepository&gt;</code>来指定本地仓库位置</p><p>一般不要将仓库放在C盘，系统崩了，重装系统，仓库就没了。</p><p>maven找jar包的顺序：现在本地仓库找，找不到再去中央仓库（联网状态下）。</p><h3 id="Maven镜像源配置"><a href="#Maven镜像源配置" class="headerlink" title="Maven镜像源配置"></a>Maven镜像源配置</h3><p>maven 会默认从maven官方提供的服务器下载jar包。</p><p>而官方服务器在国外，因为大家都知道的原因，网速很慢，而且容易卡断。 为了便于快速下载相关jar包，可以使用国内阿里云提供的maven仓库 官网：<a href="http://maven.aliyun.com/" target="_blank" rel="noopener">http://maven.aliyun.com</a></p><p>在<code>maven/conf/setting.xml</code>中的<code>&lt;mirror&gt;&lt;/mirror&gt;</code>加入一个阿里云的镜像地址：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirror</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirror</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>alimaven<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirrorOf</span><span class="token punctuation">></span></span>central<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirrorOf</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>aliyun maven<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>http://maven.aliyun.com/nexus/content/repositories/central/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirror</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirror</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中<code>&lt;id&gt;</code>为该镜像的唯一标识符。id用来区分不同的mirror元素。</p><p><code>&lt;mirrorOf&gt;</code>的值为<code>central</code>，表示该配置为中央仓库的镜像。</p><p><code>&lt;mirrorOf&gt;</code>的值如果为*，表示匹配所有远程仓库。</p><h2 id="Maven项目的一些简单命令"><a href="#Maven项目的一些简单命令" class="headerlink" title="Maven项目的一些简单命令"></a>Maven项目的一些简单命令</h2><h3 id="Maven项目目录结构"><a href="#Maven项目目录结构" class="headerlink" title="Maven项目目录结构"></a>Maven项目目录结构</h3><p>了解maven命令之前首先了解maven项目的目录结构</p><blockquote><p>src/main/java/              核心代码目录</p><p>src/main/resources/    配置文件目录</p><p>src/test/java/                测试代码部目录</p><p>src/test/resources/      测试配置文件目录</p><p>src/main/webapp/       web页面资源，js，css，图片等</p><p>target/                            编译后的文件所在目录</p></blockquote><h3 id="Maven命令"><a href="#Maven命令" class="headerlink" title="Maven命令"></a>Maven命令</h3><p>首先cd到maven项目的根目录</p><ul><li>mvn clean<ul><li>清除已编译的class文件等，也就是直接删除target文件夹。一般接手别人的项目后要先执行此命令。</li></ul></li><li>mvn compile<ul><li>编译项目文件，不包含测试类</li></ul></li><li>mvn test<ul><li>编译测试类文件，包括非测试类文件</li></ul></li><li>mvn package<ul><li>将项目打包成war包</li></ul></li><li>mvn install<ul><li>执行编译、测试、打包、并将当前项目放在本地仓库中</li></ul></li><li>mvn tomcat:run<ul><li>运行Tomcat，跑项目。默认版本Tomcat6</li></ul></li></ul><p>命令一般很少用到，了解一下即可</p><h2 id="Maven项目的配置文件pom-xml"><a href="#Maven项目的配置文件pom-xml" class="headerlink" title="Maven项目的配置文件pom.xml"></a>Maven项目的配置文件pom.xml</h2><p>POM是项目对象模型(Project Object Model)的简称。</p><p>pom.xml包含项目自身的信息、项目所依赖的jar包信息、项目的运行环境信息 (jdk、tomcat)等。它是Maven项目中必须包含的文件。</p><ul><li><p>依赖管理模型：<code>&lt;dependencies&gt;</code>标签内配置项目所依赖的jar包</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>     <span class="token comment" spellcheck="true">&lt;!--企业或组织的名称--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>servlet-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span> <span class="token comment" spellcheck="true">&lt;!--项目名--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>               <span class="token comment" spellcheck="true">&lt;!--版本号--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>provided<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span> <span class="token comment" spellcheck="true">&lt;!--scope代表作用域，provided表示只是在项目编译的时候使用，项目运行的时候不使用--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>&lt;scope&gt;</code>作用域比较：</p><p><img src="/medias/loading.gif" data-original="https://sky03-blog-images.oss-cn-beijing.aliyuncs.com/blog-img/20190408232026.png" alt></p><p>maven的插件<code>&lt;/build&gt;</code>标签的<code>&lt;plugins&gt;</code>中配置maven所需要的插件</p></li></ul><h2 id="idea创建Maven项目"><a href="#idea创建Maven项目" class="headerlink" title="idea创建Maven项目"></a>idea创建Maven项目</h2><p><img src="/medias/loading.gif" data-original="https://sky03-blog-images.oss-cn-beijing.aliyuncs.com/blog-img/20190408200606.png" alt></p><p>勾选Create from archetype，使用maven模板会从网上下载模板</p><p>不勾选直接创建maven项目</p>]]></content>
      
      
      <categories>
          
          <category> 工具和中间件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ajax&amp;Json</title>
      <link href="/posts/41602.html"/>
      <url>/posts/41602.html</url>
      
        <content type="html"><![CDATA[<h2 id="AJAX："><a href="#AJAX：" class="headerlink" title="AJAX："></a>AJAX：</h2><h3 id="概念：-ASynchronous-JavaScript-And-XML-异步的JavaScript-和-XML"><a href="#概念：-ASynchronous-JavaScript-And-XML-异步的JavaScript-和-XML" class="headerlink" title="概念： ASynchronous JavaScript And XML    异步的JavaScript 和 XML"></a>概念： ASynchronous JavaScript And XML    异步的JavaScript 和 XML</h3><blockquote><p>Ajax 是一种在无需重新加载整个网页的情况下，能够更新部分网页的技术。</p><p>通过在后台与服务器进行少量数据交换，Ajax 可以使网页实现异步更新。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新。提升了用户的体验。</p><p>传统的网页（不使用 Ajax）如果需要更新内容，必须重载整个网页页面。</p></blockquote><ol><li>异步和同步：客户端和服务器端相互通信的基础上<ul><li>客户端必须等待服务器端的响应。在等待的期间客户端不能做其他操作。</li><li>客户端不需要等待服务器端的响应。在服务器处理请求的过程中，客户端可以进行其他的操作。</li></ul></li></ol><h3 id="实现方式："><a href="#实现方式：" class="headerlink" title="实现方式："></a>实现方式：</h3><h4 id="原生的JS实现方式（了解）"><a href="#原生的JS实现方式（了解）" class="headerlink" title="原生的JS实现方式（了解）"></a>原生的JS实现方式（了解）</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//1.创建核心对象</span>var xmlhttp<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span>XMLHttpRequest<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// code for IE7+, Firefox, Chrome, Opera, Safari</span>    xmlhttp<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// code for IE6, IE5</span>    xmlhttp<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ActiveXObject</span><span class="token punctuation">(</span><span class="token string">"Microsoft.XMLHTTP"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//2. 建立连接</span><span class="token comment" spellcheck="true">/*参数：1. 请求方式：GET、POST* get方式，请求参数在URL后边拼接。send方法为空参* post方式，请求参数在send方法中定义2. 请求的URL：3. 同步或异步请求：true（异步）或 false（同步）*/</span>xmlhttp<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"GET"</span><span class="token punctuation">,</span><span class="token string">"ajaxServlet?username=tom"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//3.发送请求</span>xmlhttp<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//4.接受并处理来自服务器的响应结果</span><span class="token comment" spellcheck="true">//获取方式 ：xmlhttp.responseText</span><span class="token comment" spellcheck="true">//什么时候获取？当服务器响应成功后再获取</span><span class="token comment" spellcheck="true">//当xmlhttp对象的就绪状态改变时，触发事件onreadystatechange。</span>xmlhttp<span class="token punctuation">.</span>onreadystatechange<span class="token operator">=</span><span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//判断readyState就绪状态是否为4，判断status响应状态码是否为200</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>xmlhttp<span class="token punctuation">.</span>readyState<span class="token operator">==</span><span class="token number">4</span> <span class="token operator">&amp;&amp;</span> xmlhttp<span class="token punctuation">.</span>status<span class="token operator">==</span><span class="token number">200</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//获取服务器的响应结果</span>        var responseText <span class="token operator">=</span> xmlhttp<span class="token punctuation">.</span>responseText<span class="token punctuation">;</span>        <span class="token function">alert</span><span class="token punctuation">(</span>responseText<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="JQeury实现方式"><a href="#JQeury实现方式" class="headerlink" title="JQeury实现方式"></a>JQeury实现方式</h4><h5 id="ajax"><a href="#ajax" class="headerlink" title="$.ajax()"></a>$.ajax()</h5><ul><li><p>语法：$.ajax({键值对});</p><pre class="line-numbers language-java"><code class="language-java"> <span class="token comment" spellcheck="true">//使用$.ajax()发送异步请求</span> $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>     url<span class="token operator">:</span><span class="token string">"ajaxServlet"</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//请求路径</span>     type<span class="token operator">:</span><span class="token string">"get"</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//请求方式,默认get</span>     <span class="token comment" spellcheck="true">//data:"username=jack&amp;age=23",//请求参数</span>     data<span class="token operator">:</span><span class="token punctuation">{</span><span class="token string">"username"</span><span class="token operator">:</span><span class="token string">"jack"</span><span class="token punctuation">,</span><span class="token string">"age"</span><span class="token operator">:</span><span class="token string">"23"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>     success<span class="token operator">:</span><span class="token function">function</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token function">alert</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//响应成功后的回调函数</span>     error<span class="token operator">:</span><span class="token function">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"出错啦！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//表示如果请求响应出现错误，会执行的回调函数</span>     dataType<span class="token operator">:</span><span class="token string">"text"</span><span class="token comment" spellcheck="true">//设置接受到的响应数据的格式</span>     <span class="token comment" spellcheck="true">//每个属性之间用逗号分隔，最后一个后面不要加逗号</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h5 id="get-：发送get请求"><a href="#get-：发送get请求" class="headerlink" title="$.get()：发送get请求"></a>$.get()：发送get请求</h5><ul><li><p>语法：$.get(url, [data], [callback], [type])</p><ul><li><p>参数：</p><ul><li>url：请求路径</li><li>data：请求参数</li><li>callback：回调函数</li><li>type：响应结果的类型<ul><li>type的几种类型：xml，html，script，json，text，_default。</li></ul></li></ul></li><li><p>示例：</p><pre class="line-numbers language-java"><code class="language-java">function <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    $<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"ajaxServlet"</span><span class="token punctuation">,</span><span class="token punctuation">{</span>username<span class="token operator">:</span><span class="token string">"rose"</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token function">function</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">alert</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">"text"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><h5 id="post-：发送post请求"><a href="#post-：发送post请求" class="headerlink" title="$.post()：发送post请求"></a>$.post()：发送post请求</h5><ul><li>语法：$.post(url, [data], [callback], [type])<ul><li>参数：<ul><li>url：请求路径</li><li>data：请求参数</li><li>callback：回调函数</li><li>type：响应结果的类型<ul><li>type的取值和$.get()一样</li></ul></li></ul></li><li>用法：和$.get()一样。</li></ul></li></ul><h2 id="JSON："><a href="#JSON：" class="headerlink" title="JSON："></a>JSON：</h2><h3 id="全称：-JavaScript-Object-Notation"><a href="#全称：-JavaScript-Object-Notation" class="headerlink" title="全称： JavaScript Object Notation"></a>全称： JavaScript Object Notation</h3><p>   <strong>即：JavaScript对象表示法</strong></p><ul><li>JavaBean<pre class="line-numbers language-java"><code class="language-java">Person p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p<span class="token punctuation">.</span><span class="token function">setGender</span><span class="token punctuation">(</span><span class="token string">"男"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li>Json<pre class="line-numbers language-json"><code class="language-json">var p = <span class="token punctuation">{</span><span class="token property">"name"</span><span class="token operator">:</span><span class="token string">"张三"</span><span class="token punctuation">,</span><span class="token property">"age"</span><span class="token operator">:</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token property">"gender"</span><span class="token operator">:</span><span class="token string">"男"</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>json现在多用于存储和交换文本信息的语法</li><li>进行数据的传输</li><li>JSON 比 XML 更小、更快，更易解析。</li></ul><h3 id="语法："><a href="#语法：" class="headerlink" title="语法："></a>语法：</h3><h4 id="基本规则"><a href="#基本规则" class="headerlink" title="基本规则"></a>基本规则</h4><ul><li>数据一般是<code>名称/值</code>：json数据是由键值对构成的</li><li>键用引号(单双都行)引起来，也可以不使用引号</li><li>值得取值类型：<ol><li>数字（整数或浮点数）</li><li>字符串（在双引号中）</li><li>逻辑值（true 或 false）</li><li>数组（在方括号中）    {“persons”:[{},{}]}</li><li>对象（在花括号中） {“address”:{“province”：”陕西”….}}</li><li>null</li></ol></li><li>数据由逗号分隔：多个键值对由逗号分隔</li><li>花括号保存对象：使用{}定义json 格式</li><li>方括号保存数组：[]</li></ul><h4 id="获取数据"><a href="#获取数据" class="headerlink" title="获取数据:"></a>获取数据:</h4><ol><li><p>json对象.键名</p></li><li><p>json对象[“键名”]</p></li><li><p>数组对象[索引]</p><pre class="line-numbers language-js"><code class="language-js"><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token comment" spellcheck="true">//基本格式</span><span class="token keyword">var</span> person<span class="token operator">=</span><span class="token punctuation">{</span>name<span class="token punctuation">:</span><span class="token string">"张三"</span><span class="token punctuation">,</span><span class="token string">"age"</span><span class="token punctuation">:</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token string">'sex'</span><span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取Json格式的数据</span><span class="token comment" spellcheck="true">//var name = person.name;</span><span class="token keyword">var</span> name <span class="token operator">=</span> person<span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//嵌套格式1</span><span class="token keyword">var</span> persons<span class="token operator">=</span><span class="token punctuation">{</span>    persons<span class="token punctuation">:</span><span class="token punctuation">[</span>        <span class="token punctuation">{</span>name<span class="token punctuation">:</span><span class="token string">"张三"</span><span class="token punctuation">,</span>age<span class="token punctuation">:</span><span class="token number">23</span><span class="token punctuation">,</span>sex<span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>name<span class="token punctuation">:</span><span class="token string">"李四"</span><span class="token punctuation">,</span>age<span class="token punctuation">:</span><span class="token number">23</span><span class="token punctuation">,</span>sex<span class="token punctuation">:</span><span class="token boolean">false</span><span class="token punctuation">}</span>        <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">var</span> name1 <span class="token operator">=</span> persons<span class="token punctuation">.</span>persons<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>name1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//嵌套格式2</span><span class="token keyword">var</span> ps<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">{</span>name<span class="token punctuation">:</span><span class="token string">"张三"</span><span class="token punctuation">,</span>age<span class="token punctuation">:</span><span class="token number">23</span><span class="token punctuation">,</span>sex<span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>name<span class="token punctuation">:</span><span class="token string">"李四"</span><span class="token punctuation">,</span>age<span class="token punctuation">:</span><span class="token number">23</span><span class="token punctuation">,</span>sex<span class="token punctuation">:</span><span class="token boolean">false</span><span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//本质数组</span><span class="token function">alert</span><span class="token punctuation">(</span>ps<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>遍历</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//基本格式</span>var person<span class="token operator">=</span><span class="token punctuation">{</span>name<span class="token operator">:</span><span class="token string">"张三"</span><span class="token punctuation">,</span><span class="token string">"age"</span><span class="token operator">:</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token string">'sex'</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">;</span>var ps<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">{</span>name<span class="token operator">:</span><span class="token string">"张三"</span><span class="token punctuation">,</span>age<span class="token operator">:</span><span class="token number">23</span><span class="token punctuation">,</span>sex<span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>name<span class="token operator">:</span><span class="token string">"李四"</span><span class="token punctuation">,</span>age<span class="token operator">:</span><span class="token number">23</span><span class="token punctuation">,</span>sex<span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//本质数组</span><span class="token comment" spellcheck="true">//遍历 两种方式</span><span class="token keyword">for</span><span class="token punctuation">(</span>var key in person<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//用这种方式获取不行，相当于person."name"</span>    <span class="token comment" spellcheck="true">//alert(key+"："+ person.key);</span>    <span class="token function">alert</span><span class="token punctuation">(</span>key<span class="token operator">+</span><span class="token string">"："</span><span class="token operator">+</span>person<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//这样相当于person["name"]</span><span class="token punctuation">}</span><span class="token keyword">for</span> <span class="token punctuation">(</span>var i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>ps<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    var p<span class="token operator">=</span>ps<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>var key in p<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">alert</span><span class="token punctuation">(</span>key<span class="token operator">+</span><span class="token string">"："</span><span class="token operator">+</span>p<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="JSON数据和Java对象的相互转换"><a href="#JSON数据和Java对象的相互转换" class="headerlink" title="JSON数据和Java对象的相互转换"></a>JSON数据和Java对象的相互转换</h3><h4 id="JSON解析器："><a href="#JSON解析器：" class="headerlink" title="JSON解析器："></a>JSON解析器：</h4><blockquote><p>常见的解析器：Jsonlib(官方)，Gson(谷歌)，fastjson(阿里)，jackson(SpringMVC)</p></blockquote><h4 id="JSON转为Java对象-用的Jackson"><a href="#JSON转为Java对象-用的Jackson" class="headerlink" title="JSON转为Java对象(用的Jackson)"></a>JSON转为Java对象(用的Jackson)</h4><ol><li>导入jackson的相关jar包</li><li>创建Jackson核心对象 ObjectMapper</li><li>调用ObjectMapper的相关方法进行转换<ol><li>readValue(json字符串数据,Class)</li></ol></li></ol><h4 id="Java对象转换JSON"><a href="#Java对象转换JSON" class="headerlink" title="Java对象转换JSON"></a>Java对象转换JSON</h4><ol><li><p>使用步骤：</p><ol><li><p>导入jackson的相关jar包<code>jackson-annotations.jar</code> <code>jackson-core.jar</code> <code>jackson-databind.jar</code></p></li><li><p>创建Jackson核心对象 ObjectMapper</p><pre class="line-numbers language-java"><code class="language-java">ObjectMapper mapper<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>调用ObjectMapper的相关方法进行转换</p><ol><li><p>转换方法：</p><ul><li><p><code>writeValue(参数1，obj)</code>:  //obj为 javabean 对象</p><ul><li>参数1的几种形式：<ol><li>File：将obj对象转换为JSON字符串，并<code>保存到指定的文件中</code></li><li>Writer：将obj对象转换为JSON字符串，并将json数据填充到<code>字符输出流</code>中</li><li>OutputStream：将obj对象转换为JSON字符串，并将json数据填充到<code>字节输出流</code>中</li></ol></li></ul></li><li><p><code>writeValueAsString(obj)</code>:将对象转为json字符串</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//创建一个java对象</span>Person p <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p<span class="token punctuation">.</span><span class="token function">setGender</span><span class="token punctuation">(</span><span class="token string">"男"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//创建Jackson的核心对象 ObjectMapper</span>ObjectMapper mapper<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>String json <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//{"name":"张三","age":21,"gender":"男"}</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ol></li></ol></li><li><p>注解：</p><ol><li><p>@JsonIgnore：排除属性。</p></li><li><p>@JsonFormat：属性值的格式化(有参数)</p><ul><li>@JsonFormat(pattern = “yyyy-MM-dd”)</li></ul></li><li><p>使用方式：</p><ul><li><p>把以上两个注解放在放在<code>javabean属性的上面</code></p></li><li><p>示例：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@JsonIgnore</span>  <span class="token comment" spellcheck="true">//忽略该属性</span><span class="token keyword">private</span> String gender<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//格式化日期，不然会以毫秒值的形式显示</span><span class="token annotation punctuation">@JsonFormat</span><span class="token punctuation">(</span>pattern <span class="token operator">=</span> <span class="token string">"yyyy-MM-dd"</span><span class="token punctuation">)</span> <span class="token keyword">private</span> Date birthday<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ol></li><li><p>复杂java对象转换json</p><ol><li>List：数组 <code>[{},{},{}]</code></li><li>Map：对象格式一致 <code>{&quot;key&quot;,value}</code></li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> J2EE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> J2EE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis</title>
      <link href="/posts/27273.html"/>
      <url>/posts/27273.html</url>
      
        <content type="html"><![CDATA[<h2 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h2><h3 id="概念：-redis是一款高性能的NOSQL系列的非关系型数据库"><a href="#概念：-redis是一款高性能的NOSQL系列的非关系型数据库" class="headerlink" title="概念： redis是一款高性能的NOSQL系列的非关系型数据库"></a>概念： redis是一款高性能的NOSQL系列的非关系型数据库</h3><h3 id="什么是NOSQL？"><a href="#什么是NOSQL？" class="headerlink" title="什么是NOSQL？"></a>什么是<code>NOSQL</code>？</h3><p>NoSQL(NoSQL = Not Only SQL)，意即“不仅仅是SQL”，是一项全新的数据库理念，泛指非关系型的数据库。</p><p>随着互联网web2.0网站(动态网站)的兴起，传统的关系数据库在应付web2.0网站，特别是超大规模和高并发的SNS类型的web2.0纯动态网站已经显得力不从心，暴露了很多难以克服的问题，而非关系型的数据库则由于其本身的特点得到了非常迅速的发展。NoSQL数据库的产生就是为了解决大规模数据集合多重数据种类带来的挑战，尤其是大数据应用难题。</p><h3 id="NOSQL和关系型数据库比较"><a href="#NOSQL和关系型数据库比较" class="headerlink" title="NOSQL和关系型数据库比较"></a>NOSQL和关系型数据库比较</h3><ul><li><p>优点：</p><ol><li>成本：nosql数据库简单易部署，基本都是开源软件，不需要像使用oracle那样花费大量成本购买使用，相比关系型数据库价格便宜。</li><li>查询速度：nosql数据库将数据存储于缓存之中，关系型数据库将数据存储在硬盘中，自然查询速度远不及nosql数据库。</li><li>存储数据的格式：nosql的存储格式是key,value形式、文档形式、图片形式等等，所以可以存储基础类型以及对象或者是集合等各种格式，而数据库则只支持基础类型。</li><li>扩展性：关系型数据库有类似join这样的多表查询机制的限制导致扩展很艰难。</li></ol></li><li><p>缺点：</p><ol><li><p>维护的工具和资料有限，因为nosql是属于新的技术，不能和关系型数据库10几年的技术同日而语。</p></li><li><p>不提供对sql的支持，如果不支持sql这样的工业标准，将产生一定用户的学习和使用成本。</p></li><li><p>不提供关系型数据库对事务的处理。</p></li></ol></li></ul><h3 id="非关系型数据库的优势："><a href="#非关系型数据库的优势：" class="headerlink" title="非关系型数据库的优势："></a>非关系型数据库的优势：</h3><ol><li><p>性能NOSQL是基于键值对的，可以想象成表中的主键和值的对应关系，而且不需要经过SQL层的解析，所以性能非常高。</p></li><li><p>可扩展性同样也是因为基于键值对，数据之间没有耦合性，所以非常容易水平扩展。</p></li><li><p>关系型数据库的优势：</p><ol><li><p>复杂查询可以用SQL语句方便的在一个表以及多个表之间做非常复杂的数据查询。</p></li><li><p>事务支持使得对于安全性能很高的数据访问要求得以实现。对于这两类数据库，对方的优势就是自己的弱势，反之亦然。</p></li></ol></li></ol><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>关系型数据库与NoSQL数据库并非对立而是互补的关系，即通常情况下使用关系型数据库，在适合使用NoSQL的时候使用NoSQL数据库，</p><p>让NoSQL数据库对关系型数据库的不足进行弥补。</p><p>一般会将数据存储在关系型数据库中，在nosql数据库中备份存储关系型数据库的数据</p><h3 id="主流的NOSQL产品"><a href="#主流的NOSQL产品" class="headerlink" title="主流的NOSQL产品"></a>主流的NOSQL产品</h3><ul><li><p>键值(Key-Value)存储数据库</p><p> 相关产品： Tokyo Cabinet/Tyrant、Redis、Voldemort、Berkeley DB</p><p> 典型应用： 内容缓存，主要用于处理大量数据的高访问负载。 </p><p> 数据模型： 一系列键值对</p><p> 优势： 快速查询</p><p> 劣势： 存储的数据缺少结构化</p></li><li><p>列存储数据库</p><p> 相关产品：Cassandra, HBase, Riak</p><p> 典型应用：分布式的文件系统</p><p> 数据模型：以列簇式存储，将同一列数据存在一起</p><p> 优势：查找速度快，可扩展性强，更容易进行分布式扩展</p><p> 劣势：功能相对局限</p></li><li><p>文档型数据库</p><p> 相关产品：CouchDB、MongoDB</p><p> 典型应用：Web应用（与Key-Value类似，Value是结构化的）</p><p> 数据模型： 一系列键值对</p><p> 优势：数据结构要求不严格</p><p> 劣势： 查询性能不高，而且缺乏统一的查询语法</p></li><li><p>图形(Graph)数据库</p><p> 相关数据库：Neo4J、InfoGrid、Infinite Graph</p><p> 典型应用：社交网络</p><p> 数据模型：图结构</p><p> 优势：利用图结构相关算法。</p><p> 劣势：需要对整个图做计算才能得出结果，不容易做分布式的集群方案。</p></li></ul><h3 id="什么是Redis"><a href="#什么是Redis" class="headerlink" title="什么是Redis"></a>什么是Redis</h3><p>Redis是用C语言开发的一个开源的高性能键值对（key-value）数据库，官方提供测试数据，50个并发执行100000个请求,读的速度是110000次/s,写的速度是81000次/s ，且Redis通过提供多种键值数据类型来适应不同场景下的存储需求。</p><ul><li><p>目前为止Redis支持的键值数据类型如下：</p><ol><li>字符串类型 string</li><li>哈希类型 hash</li><li>列表类型 list</li><li>集合类型 set</li><li>有序集合类型 sortedset</li></ol></li><li><p>redis的应用场景</p><ul><li>缓存（数据查询、短连接、新闻内容、商品内容等等）</li><li>聊天室的在线好友列表</li><li>任务队列。（秒杀、抢购、12306等等）</li><li>应用排行榜</li><li>网站访问统计</li><li>数据过期处理（可以精确到毫秒</li><li>分布式集群架构中的session分离</li></ul></li></ul><h2 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h2><ol><li>官网：<a href="https://redis.io" target="_blank" rel="noopener">https://redis.io</a></li><li>中文网：<a href="http://www.redis.net.cn/" target="_blank" rel="noopener">http://www.redis.net.cn/</a></li><li>解压直接可以使用：<ul><li>redis.windows.conf：配置文件</li><li>redis-cli.exe：redis的客户端</li><li>redis-server.exe：redis服务器端</li></ul></li></ol><h2 id="命令操作"><a href="#命令操作" class="headerlink" title="命令操作"></a>命令操作</h2><h3 id="macOS下的操作命令："><a href="#macOS下的操作命令：" class="headerlink" title="macOS下的操作命令："></a>macOS下的操作命令：</h3><p>默认端口：<code>6379</code></p><p><code>redis-server</code>和<code>redis-cli</code>分别是服务器和客户端</p><p><code>redis-server</code>和<code>redis-cli</code>位于<code>redis-5.0.4/src</code>目录下</p><ul><li><p>Redis的启动</p><pre class="line-numbers language-bash"><code class="language-bash"> redis-server        <span class="token comment" spellcheck="true">#直接启动</span> redis-server /usr/local/etc/redis.conf  <span class="token comment" spellcheck="true">#启动并加载配置文件</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p> <img src="/medias/loading.gif" data-original="https://sky03-blog-images.oss-cn-beijing.aliyuncs.com/blog-img/20190403181749.png" alt></p></li><li><p>Redis的停止</p><ul><li><p>在<code>客户端执行SHUTDOWN</code>即可关闭 redis 服务</p><ul><li>如果关闭不了就加个参数，<code>SHUTDOWN NOSAVE</code>即可关闭 redis 服务</li></ul></li><li><p>或者如果安装了oh-my-zsh，可以执行<code>kill redis</code>，并按<code>tab键</code>会自动转换成对应的pid</p></li></ul></li></ul><h3 id="Redis的数据结构："><a href="#Redis的数据结构：" class="headerlink" title="Redis的数据结构："></a>Redis的数据结构：</h3><ul><li><p>Redis存储的是：key,value格式的数据，其中key都是字符串，value有5种不同的数据结构</p></li><li><p>value的数据结构：</p><ol><li><p>字符串类型 <code>string</code></p></li><li><p>哈希类型 <code>hash</code> ： map格式  </p></li><li><p>列表类型 <code>list</code> ： linkedlist格式。支持重复元素</p></li><li><p>集合类型 <code>set</code>  ： 不允许重复元素</p></li><li><p>有序集合类型<code>sortedset</code>：不允许重复元素，且元素有顺序</p></li></ol></li></ul><h4 id="字符串类型-string"><a href="#字符串类型-string" class="headerlink" title="字符串类型 string"></a>字符串类型 string</h4><ol><li><p>存储： <code>set key value</code></p><pre class="line-numbers language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> <span class="token keyword">set</span> username zhangsanOK<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>获取：<code>get key</code></p><pre class="line-numbers language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> get username<span class="token string">"zhangsan"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>删除： <code>del key</code></p><pre class="line-numbers language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> del age<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>查看 key 是否存在：<code>exists key</code></p><pre class="line-numbers language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> exists name<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>查看所有的 key：<code>keys *</code></p><pre class="line-numbers language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> keys *1<span class="token punctuation">)</span> <span class="token string">"name"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>消除所有的 <code>key：flushall</code></p><pre class="line-numbers language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> flushallOK<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><h4 id="哈希类型-hash"><a href="#哈希类型-hash" class="headerlink" title="哈希类型 hash"></a>哈希类型 hash</h4><ol><li><p>存储： <code>hset key field value</code></p><pre class="line-numbers language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> hset myhash username lisi<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> hset myhash password 123<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>获取： </p><ul><li><p><code>hget key field</code>: 获取指定的field对应的值</p><pre class="line-numbers language-bash"><code class="language-bash"> 127.0.0.1:6379<span class="token operator">></span> hget myhash username <span class="token string">"lisi"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><code>hgetall key</code>：获取所有的field和value</p><pre class="line-numbers language-bash"><code class="language-bash"> 127.0.0.1:6379<span class="token operator">></span> hgetall myhash 1<span class="token punctuation">)</span> <span class="token string">"username"</span> 2<span class="token punctuation">)</span> <span class="token string">"lisi"</span> 3<span class="token punctuation">)</span> <span class="token string">"password"</span> 4<span class="token punctuation">)</span> <span class="token string">"123"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>删除： <code>hdel key field</code></p><pre class="line-numbers language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> hdel myhash username<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><h4 id="列表类型-list-可以添加一个元素到列表的头部（左边）或者尾部（右边）"><a href="#列表类型-list-可以添加一个元素到列表的头部（左边）或者尾部（右边）" class="headerlink" title="列表类型 list:可以添加一个元素到列表的头部（左边）或者尾部（右边）"></a>列表类型 list:可以添加一个元素到列表的头部（左边）或者尾部（右边）</h4><ol><li><p>添加：</p><ol><li><p><code>lpush key value</code>: 将元素加入列表左表(链表结构)</p></li><li><p><code>rpush key value</code>：将元素加入列表右边</p><pre class="line-numbers language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> lpush myList a<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> lpush myList b<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 2127.0.0.1:6379<span class="token operator">></span> rpush myList c<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol></li><li><p>获取：</p><ul><li><p><code>lrange key start end</code> ：范围获取</p><pre class="line-numbers language-bash"><code class="language-bash"> 127.0.0.1:6379<span class="token operator">></span> lrange myList 0 -1 1<span class="token punctuation">)</span> <span class="token string">"b"</span> 2<span class="token punctuation">)</span> <span class="token string">"a"</span> 3<span class="token punctuation">)</span> <span class="token string">"c"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>删除：</p><ul><li><p><code>lpop key</code>： 删除列表最左边的元素，并将元素返回</p></li><li><p><code>rpop key</code>： 删除列表最右边的元素，并将元素返回</p></li></ul></li></ol><h4 id="集合类型-set-：-不允许重复元素"><a href="#集合类型-set-：-不允许重复元素" class="headerlink" title="集合类型 set ： 不允许重复元素"></a>集合类型 set ： 不允许重复元素</h4><ol><li><p>存储：<code>sadd key value</code></p><pre class="line-numbers language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> sadd myset a<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> sadd myset a<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>获取：<code>smembers key</code>:获取set集合中所有元素</p><pre class="line-numbers language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> smembers myset1<span class="token punctuation">)</span> <span class="token string">"a"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>删除：<code>srem key value</code>:删除set集合中的某个元素    </p><pre class="line-numbers language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> srem myset a<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><h4 id="有序集合类型-sortedset：不允许重复元素，且元素有顺序-每个元素都会关联一个double类型的分数-score-。redis正是通过分数来为集合中的成员进行从小到大的排序。"><a href="#有序集合类型-sortedset：不允许重复元素，且元素有顺序-每个元素都会关联一个double类型的分数-score-。redis正是通过分数来为集合中的成员进行从小到大的排序。" class="headerlink" title="有序集合类型 sortedset：不允许重复元素，且元素有顺序.每个元素都会关联一个double类型的分数(score)。redis正是通过分数来为集合中的成员进行从小到大的排序。"></a>有序集合类型 sortedset：不允许重复元素，且元素有顺序.每个元素都会关联一个double类型的分数(score)。redis正是通过分数来为集合中的成员进行从小到大的排序。</h4><ol><li><p>存储：<code>zadd key score value</code></p><pre class="line-numbers language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> zadd mysort 60 zhangsan<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> zadd mysort 50 lisi<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> zadd mysort 80 wangwu<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>获取：<code>zrange key start end [withscores]</code></p><pre class="line-numbers language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> zrange mysort 0 -11<span class="token punctuation">)</span> <span class="token string">"lisi"</span>2<span class="token punctuation">)</span> <span class="token string">"zhangsan"</span>3<span class="token punctuation">)</span> <span class="token string">"wangwu"</span>127.0.0.1:6379<span class="token operator">></span> zrange mysort 0 -1 withscores1<span class="token punctuation">)</span> <span class="token string">"zhangsan"</span>2<span class="token punctuation">)</span> <span class="token string">"60"</span>3<span class="token punctuation">)</span> <span class="token string">"wangwu"</span>4<span class="token punctuation">)</span> <span class="token string">"80"</span>5<span class="token punctuation">)</span> <span class="token string">"lisi"</span>6<span class="token punctuation">)</span> <span class="token string">"500"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>删除：<code>zrem key value</code></p><pre class="line-numbers language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> zrem mysort lisi<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><h3 id="通用命令"><a href="#通用命令" class="headerlink" title="通用命令"></a>通用命令</h3><ol><li><code>keys *</code> : 查询所有的键</li><li><code>type key</code> ： 获取键对应的value的类型</li><li><code>del key</code>：删除指定的key value</li></ol><h3 id="持久化"><a href="#持久化" class="headerlink" title="持久化"></a>持久化</h3><ol><li><p>redis是一个内存数据库，当redis服务器重启，获取电脑重启，数据会丢失，我们可以将redis内存中的数据持久化保存到硬盘的文件中。</p></li><li><p>redis持久化机制：</p><ol><li><p>RDB：默认方式，不需要进行配置，默认就使用这种机制</p><ul><li><p>在一定的间隔时间中，检测key的变化情况，然后持久化数据</p></li><li><p>编辑redis.conf文件</p><pre class="line-numbers language-redis"><code class="language-redis"> # after 900 sec (15 min) if at least 1 key changed save 900 1 # after 300 sec (5 min) if at least 10 keys changed save 300 10 # after 60 sec if at least 10000 keys changed # 60秒内有10000个key改变就持久化保存一次,保存为.rdb文件 save 60 10000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>启动redis服务器时，要指定刚才的配置文件名称</p><pre class="line-numbers language-sql"><code class="language-sql"> redis<span class="token operator">-</span>server <span class="token operator">/</span>usr<span class="token operator">/</span><span class="token keyword">local</span><span class="token operator">/</span>etc<span class="token operator">/</span>redis<span class="token punctuation">.</span>conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li><li><p>AOF：日志记录的方式，可以记录每一条命令的操作。可以每一次命令操作后，持久化数据</p><ol><li><p>编辑redis.conf文件</p><pre class="line-numbers language-sql"><code class="language-sql">appendonly <span class="token keyword">no</span>（关闭AOF） <span class="token comment" spellcheck="true">--> appendonly yes （开启AOF）</span>appendfsync always ： 每一次操作都进行持久化（默认被注释）appendfsync everysec ： 每隔一秒进行一次持久化appendfsync <span class="token keyword">no</span> ： 不进行持久化（默认被注释）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol></li></ol></li></ol><h2 id="Java客户端-Jedis"><a href="#Java客户端-Jedis" class="headerlink" title="Java客户端 Jedis"></a>Java客户端 Jedis</h2><h3 id="Jedis-一款java操作redis数据库的工具"><a href="#Jedis-一款java操作redis数据库的工具" class="headerlink" title="Jedis: 一款java操作redis数据库的工具."></a>Jedis: 一款java操作redis数据库的工具.</h3><h3 id="使用步骤："><a href="#使用步骤：" class="headerlink" title="使用步骤："></a>使用步骤：</h3><h4 id="导入jedis的jar包"><a href="#导入jedis的jar包" class="headerlink" title="导入jedis的jar包"></a>导入jedis的jar包</h4><p><code>jedis-2.9.0.jar</code>  <code>commons-pool2-2.3.jar</code></p><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//1.获取连接</span>Jedis jedis<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Jedis</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span><span class="token number">6379</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//如果使用空参构造，默认值 "localhost",6379端口</span><span class="token comment" spellcheck="true">//2.操作</span>jedis<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span><span class="token string">"hah"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//3.关闭连接</span>jedis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Jedis操作各种redis中的数据结构"><a href="#Jedis操作各种redis中的数据结构" class="headerlink" title="Jedis操作各种redis中的数据结构"></a>Jedis操作各种redis中的数据结构</h3><h4 id="字符串类型-string-1"><a href="#字符串类型-string-1" class="headerlink" title="字符串类型 string"></a>字符串类型 <code>string</code></h4><pre class="line-numbers language-java"><code class="language-java">setget<span class="token comment" spellcheck="true">//1. 获取连接</span>Jedis jedis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jedis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//如果使用空参构造，默认值 "localhost",6379端口</span><span class="token comment" spellcheck="true">//2. 操作</span><span class="token comment" spellcheck="true">//存储</span>jedis<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">,</span><span class="token string">"zhangsan"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取</span>String username <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//可以使用setex()方法存储可以指定过期时间的 key value</span>jedis<span class="token punctuation">.</span><span class="token function">setex</span><span class="token punctuation">(</span><span class="token string">"activecode"</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token string">"hehe"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将activecode：hehe键值对存入redis，并且20秒后自动删除该键值对</span><span class="token comment" spellcheck="true">//3. 关闭连接</span>jedis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="哈希类型-hash-：-map格式"><a href="#哈希类型-hash-：-map格式" class="headerlink" title="哈希类型 hash ： map格式"></a>哈希类型 <code>hash</code> ： map格式</h4><pre class="line-numbers language-java"><code class="language-java">hsethgethgetAll<span class="token comment" spellcheck="true">//1. 获取连接</span>Jedis jedis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jedis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//如果使用空参构造，默认值 "localhost",6379端口</span><span class="token comment" spellcheck="true">//2. 操作</span><span class="token comment" spellcheck="true">// 存储hash</span>jedis<span class="token punctuation">.</span><span class="token function">hset</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">,</span><span class="token string">"name"</span><span class="token punctuation">,</span><span class="token string">"lisi"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>jedis<span class="token punctuation">.</span><span class="token function">hset</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">,</span><span class="token string">"age"</span><span class="token punctuation">,</span><span class="token string">"23"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>jedis<span class="token punctuation">.</span><span class="token function">hset</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">,</span><span class="token string">"gender"</span><span class="token punctuation">,</span><span class="token string">"female"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 获取hash</span>String name <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">hget</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">,</span> <span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 获取hash的所有map中的数据</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> user <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">hgetAll</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// keyset</span>Set<span class="token operator">&lt;</span>String<span class="token operator">></span> keySet <span class="token operator">=</span> user<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>String key <span class="token operator">:</span> keySet<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">//获取value</span>   String value <span class="token operator">=</span> user<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>   System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>key <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//3. 关闭连接</span>jedis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="列表类型-list-：-linkedlist格式。支持重复元素"><a href="#列表类型-list-：-linkedlist格式。支持重复元素" class="headerlink" title="列表类型 list ： linkedlist格式。支持重复元素"></a>列表类型 <code>list</code> ： linkedlist格式。支持重复元素</h4><pre class="line-numbers language-java"><code class="language-java">lpush <span class="token operator">/</span> rpushlpop <span class="token operator">/</span> rpoplrange start end <span class="token operator">:</span> 范围获取<span class="token comment" spellcheck="true">//1. 获取连接</span>Jedis jedis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jedis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//如果使用空参构造，默认值 "localhost",6379端口</span><span class="token comment" spellcheck="true">//2. 操作</span><span class="token comment" spellcheck="true">// list 存储</span>jedis<span class="token punctuation">.</span><span class="token function">lpush</span><span class="token punctuation">(</span><span class="token string">"mylist"</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token string">"b"</span><span class="token punctuation">,</span><span class="token string">"c"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//从左边存</span>jedis<span class="token punctuation">.</span><span class="token function">rpush</span><span class="token punctuation">(</span><span class="token string">"mylist"</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token string">"b"</span><span class="token punctuation">,</span><span class="token string">"c"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//从右边存</span><span class="token comment" spellcheck="true">// list 范围获取</span>List<span class="token operator">&lt;</span>String<span class="token operator">></span> mylist <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">lrange</span><span class="token punctuation">(</span><span class="token string">"mylist"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>mylist<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// list 弹出(删除)</span>String element1 <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">lpop</span><span class="token punctuation">(</span><span class="token string">"mylist"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//c</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>element1<span class="token punctuation">)</span><span class="token punctuation">;</span>String element2 <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">rpop</span><span class="token punctuation">(</span><span class="token string">"mylist"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//c</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>element2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// list 范围获取</span>List<span class="token operator">&lt;</span>String<span class="token operator">></span> mylist2 <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">lrange</span><span class="token punctuation">(</span><span class="token string">"mylist"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>mylist2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//3. 关闭连接</span>jedis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="集合类型-set-：-不允许重复元素-1"><a href="#集合类型-set-：-不允许重复元素-1" class="headerlink" title="集合类型 set ： 不允许重复元素"></a>集合类型 set ： 不允许重复元素</h4><pre class="line-numbers language-java"><code class="language-java">saddsmembers<span class="token operator">:</span>获取元素<span class="token comment" spellcheck="true">//1. 获取连接</span>Jedis jedis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jedis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//如果使用空参构造，默认值 "localhost",6379端口</span><span class="token comment" spellcheck="true">//2. 操作</span><span class="token comment" spellcheck="true">// set 存储</span>jedis<span class="token punctuation">.</span><span class="token function">sadd</span><span class="token punctuation">(</span><span class="token string">"myset"</span><span class="token punctuation">,</span><span class="token string">"java"</span><span class="token punctuation">,</span><span class="token string">"php"</span><span class="token punctuation">,</span><span class="token string">"c++"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// set 获取</span>Set<span class="token operator">&lt;</span>String<span class="token operator">></span> myset <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">smembers</span><span class="token punctuation">(</span><span class="token string">"myset"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>myset<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//3. 关闭连接</span>jedis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="有序集合类型-sortedset：不允许重复元素，且元素有顺序"><a href="#有序集合类型-sortedset：不允许重复元素，且元素有顺序" class="headerlink" title="有序集合类型 sortedset：不允许重复元素，且元素有顺序"></a>有序集合类型 sortedset：不允许重复元素，且元素有顺序</h4><pre class="line-numbers language-java"><code class="language-java">zaddzrange<span class="token comment" spellcheck="true">//1. 获取连接</span>Jedis jedis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jedis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//如果使用空参构造，默认值 "localhost",6379端口</span><span class="token comment" spellcheck="true">//2. 操作</span><span class="token comment" spellcheck="true">// sortedset 存储</span>jedis<span class="token punctuation">.</span><span class="token function">zadd</span><span class="token punctuation">(</span><span class="token string">"mysortedset"</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">"亚瑟"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>jedis<span class="token punctuation">.</span><span class="token function">zadd</span><span class="token punctuation">(</span><span class="token string">"mysortedset"</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token string">"后裔"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>jedis<span class="token punctuation">.</span><span class="token function">zadd</span><span class="token punctuation">(</span><span class="token string">"mysortedset"</span><span class="token punctuation">,</span><span class="token number">55</span><span class="token punctuation">,</span><span class="token string">"孙悟空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// sortedset 获取</span>Set<span class="token operator">&lt;</span>String<span class="token operator">></span> mysortedset <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">zrange</span><span class="token punctuation">(</span><span class="token string">"mysortedset"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>mysortedset<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//3. 关闭连接</span>jedis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="jedis连接池：-JedisPool"><a href="#jedis连接池：-JedisPool" class="headerlink" title="jedis连接池： JedisPool"></a>jedis连接池： JedisPool</h3><h4 id="使用："><a href="#使用：" class="headerlink" title="使用："></a>使用：</h4><ol><li><p>创建JedisPool连接池对象</p></li><li><p>调用方法 getResource()方法获取Jedis连接</p><p>示例：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//0.创建一个配置对象</span>JedisPoolConfig config <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JedisPoolConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>config<span class="token punctuation">.</span><span class="token function">setMaxTotal</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>config<span class="token punctuation">.</span><span class="token function">setMaxIdle</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//1.创建Jedis连接池对象</span>JedisPool jedisPool <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JedisPool</span><span class="token punctuation">(</span>config<span class="token punctuation">,</span><span class="token string">"localhost"</span><span class="token punctuation">,</span><span class="token number">6379</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//2.获取连接</span>Jedis jedis <span class="token operator">=</span> jedisPool<span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//3. 使用</span>jedis<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"hehe"</span><span class="token punctuation">,</span><span class="token string">"heihei"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//4. 关闭 归还到连接池中</span>jedis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h4 id="连接池工具类"><a href="#连接池工具类" class="headerlink" title="连接池工具类"></a>连接池工具类</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JedisPoolUtils</span> <span class="token punctuation">{</span>   <span class="token keyword">private</span> <span class="token keyword">static</span> JedisPool jedisPool<span class="token punctuation">;</span>   <span class="token keyword">static</span><span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//读取配置文件</span>      InputStream is <span class="token operator">=</span> JedisPoolUtils<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"jedis.properties"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//创建Properties对象</span>      Properties pro <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//关联文件</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>            pro<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>is<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">//获取数据，设置到JedisPoolConfig中</span>      JedisPoolConfig config <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JedisPoolConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      config<span class="token punctuation">.</span><span class="token function">setMaxTotal</span><span class="token punctuation">(</span>Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>pro<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"maxTotal"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      config<span class="token punctuation">.</span><span class="token function">setMaxIdle</span><span class="token punctuation">(</span>Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>pro<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"maxIdle"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//初始化JedisPool</span>      jedisPool <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JedisPool</span><span class="token punctuation">(</span>config<span class="token punctuation">,</span>pro<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"host"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>pro<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"port"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">/**   * 获取连接方法   */</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> Jedis <span class="token function">getJedis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">return</span> jedisPool<span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> J2EE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> J2EE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Filter&amp;Listener</title>
      <link href="/posts/50659.html"/>
      <url>/posts/50659.html</url>
      
        <content type="html"><![CDATA[<h2 id="JavaWeb三大组件："><a href="#JavaWeb三大组件：" class="headerlink" title="JavaWeb三大组件："></a>JavaWeb三大组件：</h2><ul><li><strong>Servlet</strong></li><li><strong>Filter</strong></li><li><strong>Listener</strong></li></ul><h2 id="Filter：过滤器"><a href="#Filter：过滤器" class="headerlink" title="Filter：过滤器"></a>Filter：过滤器</h2><h3 id="概念："><a href="#概念：" class="headerlink" title="概念："></a>概念：</h3><ul><li>web中的过滤器：当访问服务器的资源时，过滤器可以将请求拦截下来，完成一些特殊的功能。</li><li>过滤器的作用：</li></ul><ul><li>一般用于完成通用的操作。如：登录验证、统一编码处理、敏感字符过滤…</li></ul><h3 id="快速入门："><a href="#快速入门：" class="headerlink" title="快速入门："></a>快速入门：</h3><h4 id="步骤："><a href="#步骤：" class="headerlink" title="步骤："></a>步骤：</h4><ol><li><p>定义一个类，实现接口<code>Filter</code></p></li><li><p>复写方法 <code>init()</code> <code>doFilter()</code> <code>destroy()</code></p></li><li><p>配置拦截路径（两种方式）</p><ol><li><p>web.xml</p><pre class="line-numbers language-xml"><code class="language-xml"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>demo1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-class</span><span class="token punctuation">></span></span>cn.itcast.web.filter.FilterDemo1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-class</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>demo1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>     <span class="token comment" spellcheck="true">&lt;!-- 拦截路径 --></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>注解</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@WebFilter</span><span class="token punctuation">(</span><span class="token string">"/*"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//访问任何路径，都会执行该过滤器</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol></li><li><p><strong>注意</strong>：要将doFilte()里的两个参数（ServletRequest req,ServletResponse,resp）强转为<code>HttpServletRequest req,HttpServletResponse,resp</code></p><ul><li><p>示例代码：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@WebFilter</span><span class="token punctuation">(</span><span class="token string">"/*"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//访问所有资源之前，都会执行该过滤器</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FilterDemo1</span> <span class="token keyword">implements</span> <span class="token class-name">Filter</span> <span class="token punctuation">{</span>  <span class="token annotation punctuation">@Override</span><span class="token comment" spellcheck="true">//初始化</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span>FilterConfig filterConfig<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException <span class="token punctuation">{</span>  <span class="token punctuation">}</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span>ServletRequest servletRequest<span class="token punctuation">,</span> ServletResponse servletResponse<span class="token punctuation">,</span> FilterChain filterChain<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> ServletException <span class="token punctuation">{</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"filterDemo1被执行了...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//放行</span>      filterChain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>servletRequest<span class="token punctuation">,</span>servletResponse<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token annotation punctuation">@Override</span><span class="token comment" spellcheck="true">//销毁</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ol><h3 id="过滤器细节："><a href="#过滤器细节：" class="headerlink" title="过滤器细节："></a>过滤器细节：</h3><h4 id="过滤器执行流程"><a href="#过滤器执行流程" class="headerlink" title="过滤器执行流程"></a>过滤器执行流程</h4><ol><li>发送请求</li><li>执行过滤器</li><li>执行放行后的资源</li><li>回来执行过滤器放行代码下边的代码，<code>Chain.doFilter()</code>后的代码</li><li>接收响应</li></ol><h4 id="过滤器生命周期方法"><a href="#过滤器生命周期方法" class="headerlink" title="过滤器生命周期方法"></a>过滤器生命周期方法</h4><ol><li>init:在服务器启动后，会创建Filter对象，然后调用init方法。只执行一次。用于加载资源</li><li>doFilter:每一次请求被拦截资源时，会执行。执行多次</li><li>destroy:在服务器关闭后，Filter对象被销毁。如果服务器是<code>正常关闭</code>，则会执行destroy方法。只执行一次。用于释放资源</li></ol><h4 id="过滤器配置详解"><a href="#过滤器配置详解" class="headerlink" title="过滤器配置详解"></a>过滤器配置详解</h4><h5 id="拦截路径配置："><a href="#拦截路径配置：" class="headerlink" title="拦截路径配置："></a>拦截路径配置：</h5><ol><li>具体资源路径： /index.jsp   只有访问index.jsp资源时，过滤器才会被执行</li><li>拦截目录： /user/*    访问/user下的所有资源时，过滤器都会被执行</li><li>后缀名拦截： *.jsp        访问所有后缀名为jsp资源时，过滤器都会被执行</li><li>拦截所有资源：/*        访问所有资源时，过滤器都会被执行</li></ol><h5 id="拦截方式配置：资源被访问的方式（直接访问、转发、等）"><a href="#拦截方式配置：资源被访问的方式（直接访问、转发、等）" class="headerlink" title="拦截方式配置：资源被访问的方式（直接访问、转发、等）"></a>拦截方式配置：资源被访问的方式（直接访问、转发、等）</h5><ul><li><p>注解配置：</p><ul><li>设置dispatcherTypes属性<ol><li>REQUEST：浏览器直接请求资源（默认值）</li><li>FORWARD：转发访问资源</li><li>INCLUDE：包含访问资源</li><li>ERROR：错误跳转资源</li><li>ASYNC：异步访问资源</li></ol></li></ul></li><li><p>web.xml配置</p><ul><li>在<code>&lt;filter-mapping&gt;</code>标签里设置<code>&lt;dispatcher&gt;&lt;/dispatcher&gt;</code>标签即可</li></ul></li><li><p>拦截方式可以配置多个<br>示例：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@WebFilter</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">"/*"</span><span class="token punctuation">,</span>dispatcherTypes<span class="token operator">=</span><span class="token punctuation">{</span>DispatcherType<span class="token punctuation">.</span>REQUEST<span class="token punctuation">,</span>DispatcherType<span class="token punctuation">.</span>FORWARD<span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h4 id="过滤器链-配置多个过滤器"><a href="#过滤器链-配置多个过滤器" class="headerlink" title="过滤器链(配置多个过滤器)"></a>过滤器链(配置多个过滤器)</h4><h5 id="执行顺序：如果有两个过滤器：过滤器1和过滤器2"><a href="#执行顺序：如果有两个过滤器：过滤器1和过滤器2" class="headerlink" title="执行顺序：如果有两个过滤器：过滤器1和过滤器2"></a>执行顺序：如果有两个过滤器：过滤器1和过滤器2</h5><ol><li>过滤器1</li><li>过滤器2</li><li>资源执行</li><li>过滤器2</li><li>过滤器1 </li></ol><h5 id="过滤器先后顺序问题："><a href="#过滤器先后顺序问题：" class="headerlink" title="过滤器先后顺序问题："></a>过滤器先后顺序问题：</h5><ol><li>注解配置：按照<code>类名</code>的字符串比较规则比较，值小的先执行<ul><li>如： AFilter 和 BFilter，AFilter就先执行了。</li></ul></li><li>web.xml配置： <code>&lt;filter-mapping&gt;</code>谁定义在上边，谁先执行</li></ol><h4 id="增强对象的功能-设计模式-："><a href="#增强对象的功能-设计模式-：" class="headerlink" title="增强对象的功能(设计模式)："></a>增强对象的功能(设计模式)：</h4><p><strong>装饰模式</strong>  (设计模式的一种)<br><strong>代理模式</strong>  (设计模式的一种)</p><ul><li>概念：<ol><li>真实对象：被代理的对象</li><li>代理对象：</li><li>代理模式：<code>代理对象代理真实对象，达到增强真实对象功能的目的</code><ul><li>实现方式：<ul><li><code>静态代理</code>：有一个类文件描述代理模式</li><li><code>动态代理</code>：在内存中形成代理类 (用的较多)</li></ul></li><li>实现步骤：<ol><li>代理对象和真实对象实现相同的接口</li><li>代理对象 = Proxy.newProxyInstance();</li><li>使用代理对象调用方法。</li><li>增强方法</li></ol></li><li>增强方式：<ol><li>增强参数列表</li><li>增强返回值类型</li><li>增强方法体执行逻辑    </li></ol></li></ul></li></ol></li></ul><h2 id="Listener：监听器"><a href="#Listener：监听器" class="headerlink" title="Listener：监听器"></a>Listener：监听器</h2><ul><li><p>概念：web的三大组件之一。</p><ul><li>事件监听机制<ul><li>事件    ：一件事情</li><li>事件源 ：事件发生的地方</li><li>监听器 ：一个对象</li><li>注册监听：将事件、事件源、监听器绑定在一起。 </li></ul></li><li>当事件源上发生某个事件后，执行监听器代码</li><li><code>主要用于加载资源文件</code></li></ul></li><li><p>ServletContextListener（接口）:监听ServletContext对象的创建和销毁 (监听器的一种)</p><ul><li>方法：<ul><li>void contextDestroyed(ServletContextEvent sce) ：ServletContext对象被销毁之前会调用该方法</li><li>void contextInitialized(ServletContextEvent sce) ：ServletContext对象创建后会调用该方法</li><li>ServletContext对象会在服务器启动时创建</li></ul></li></ul></li><li><p>步骤：</p><ol><li><p>定义一个类，实现<code>ServletContextListener接口</code></p></li><li><p>复写方法</p></li><li><p>配置</p><ol><li><p>web.xml （只配置一个class路径就可以了）</p><pre class="line-numbers language-java"><code class="language-java"><span class="token operator">&lt;</span>listener<span class="token operator">></span>    <span class="token operator">&lt;</span>listener<span class="token operator">-</span><span class="token keyword">class</span><span class="token operator">></span>cn<span class="token punctuation">.</span>itcast<span class="token punctuation">.</span>web<span class="token punctuation">.</span>listener<span class="token punctuation">.</span>ContextLoaderListener<span class="token operator">&lt;</span><span class="token operator">/</span>listener<span class="token operator">-</span><span class="token keyword">class</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>listener<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>指定初始化参数<code>&lt;context-param&gt;</code></li></ul></li><li><p>注解：</p><ul><li>@WebListener       //不带参数</li></ul></li></ol></li></ol></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> J2EE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> J2EE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JSP的EL&amp;JSTL</title>
      <link href="/posts/34183.html"/>
      <url>/posts/34183.html</url>
      
        <content type="html"><![CDATA[<h2 id="JSP"><a href="#JSP" class="headerlink" title="JSP:"></a>JSP:</h2><h3 id="1-指令"><a href="#1-指令" class="headerlink" title="1.指令"></a>1.指令</h3><ul><li><p>作用：用于配置JSP页面，导入资源文件</p></li><li><p>格式：</p><p><code>&lt;%@ 指令名称 属性名1=属性值1 属性名2=属性值2 ... %&gt;</code></p></li><li><p>分类：</p><ol><li><p>page        ： 配置JSP页面的</p><ul><li><p>contentType：等同于<code>response.setContentType()</code></p><ol><li>设置响应体的mime类型以及字符集</li><li>设置当前jsp页面的编码（只能是高级的IDE才能生效，如果使用低级工具，则需要设置pageEncoding属性设置当前页面的字符集）</li></ol></li><li><p>import：导包</p></li><li><p>errorPage：当前页面发生异常后，会自动跳转到指定的错误页面</p></li><li><p>isErrorPage：标识当前页面是否是错误页面。</p><ul><li><p>true：是，可以使用内置对象exception（exception可以用来打印错误日志）</p></li><li><p>false：否。<code>默认值</code>。不可以使用内置对象exception</p></li></ul></li></ul></li><li><p>include    ： 页面包含的。导入页面的资源文件</p><pre class="line-numbers language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">%</span><span class="token annotation punctuation">@include</span> file<span class="token operator">=</span><span class="token string">"filename.jsp"</span><span class="token operator">%</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>taglib    ： 导入资源</p><pre class="line-numbers language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">%</span>@ taglib prefix<span class="token operator">=</span><span class="token string">"c"</span> uri<span class="token operator">=</span><span class="token string">"http://java.sun.com/jsp/jstl/core"</span> <span class="token operator">%</span><span class="token operator">></span><span class="token comment" spellcheck="true">//prefix：前缀，是自定义的</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol></li></ul><h3 id="2-注释"><a href="#2-注释" class="headerlink" title="2.注释"></a>2.注释</h3><ol><li><p>html注释：</p><p><code>&lt;!-- --&gt;</code>:只能注释HTML代码片段</p></li><li><p>Jsp注释：（推荐使用）</p><p><code>&lt;%-- --%&gt;</code>：可以注释所有（包括HTML）</p></li></ol><h3 id="3-内置对象"><a href="#3-内置对象" class="headerlink" title="3.内置对象"></a>3.内置对象</h3><ul><li><p>在jsp页面中不需要创建，直接使用的对象</p></li><li><p>一共有9个：</p><table><thead><tr><th align="center"><strong>变量名</strong></th><th align="center">真实类型</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">pageContext</td><td align="center">PageContext</td><td align="center">当前页面共享数据，还可以获取其他八个内置对象</td></tr><tr><td align="center">request</td><td align="center">HttpServletRequest</td><td align="center">一次请求访问的多个资源(转发)</td></tr><tr><td align="center">session</td><td align="center">HttpSession</td><td align="center">一次会话的多个请求间</td></tr><tr><td align="center">application</td><td align="center">ServletContext</td><td align="center">所有用户间共享数据</td></tr><tr><td align="center">response</td><td align="center">HttpServletResponse</td><td align="center">响应对象</td></tr><tr><td align="center">page</td><td align="center">Object</td><td align="center">当前页面(Servlet)的对象 this</td></tr><tr><td align="center">out</td><td align="center">JspWriter</td><td align="center">输出对象，数据输出到页面上</td></tr><tr><td align="center">config</td><td align="center">ServletConfig</td><td align="center">Servlet的配置对象</td></tr><tr><td align="center">exception</td><td align="center">Throwable</td><td align="center">异常对象</td></tr></tbody></table></li></ul><h2 id="MVC：开发模式"><a href="#MVC：开发模式" class="headerlink" title="MVC：开发模式"></a>MVC：开发模式</h2><h3 id="1-jsp演变历史"><a href="#1-jsp演变历史" class="headerlink" title="1.jsp演变历史"></a>1.jsp演变历史</h3><ol><li><p>早期只有servlet，只能使用response输出标签数据，非常麻烦</p></li><li><p>后来有了jsp，简化了Servlet的开发，如果过度使用jsp，在jsp中既写大量的java代码，又写html表，造成难于维护，难于分工协作</p></li><li><p>再后来，java的web开发，借鉴mvc开发模式，使得程序的设计更加合理性</p></li></ol><h3 id="2-MVC："><a href="#2-MVC：" class="headerlink" title="2.MVC："></a>2.MVC：</h3><ol><li>M：Model，模型。JavaBean<ul><li>完成具体的业务操作，如：查询数据库，封装对象</li></ul></li><li>V：View，视图。JSP<ul><li>展示数据</li></ul></li><li>C：Controller，控制器。Servlet<ul><li>获取用户的输入</li><li>调用模型</li><li>将数据交给视图进行展示</li></ul></li></ol><ul><li><p>优缺点：</p><ol><li><p>优点：</p><ol><li>耦合性低，方便维护，可以利于分工协作</li><li>重用性高</li></ol></li><li><p>缺点：</p><ol><li>使得项目架构变得复杂，对开发人员要求高</li></ol></li></ol></li></ul><h2 id="EL表达式"><a href="#EL表达式" class="headerlink" title="EL表达式"></a>EL表达式</h2><h3 id="概念：Expression-Language-表达式语言"><a href="#概念：Expression-Language-表达式语言" class="headerlink" title="概念：Expression Language 表达式语言"></a>概念：Expression Language 表达式语言</h3><h3 id="作用：替换和简化jsp页面中java代码的编写"><a href="#作用：替换和简化jsp页面中java代码的编写" class="headerlink" title="作用：替换和简化jsp页面中java代码的编写"></a>作用：替换和简化jsp页面中java代码的编写</h3><h3 id="语法：-表达式"><a href="#语法：-表达式" class="headerlink" title="语法：${表达式}"></a>语法：${表达式}</h3><h3 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h3><ul><li>jsp默认支持EL表达式的。如果要忽略EL表达式<ol><li>设置jsp中page指令中：<code>isELIgnored=&quot;true&quot;</code> 忽略当前jsp页面中所有的el表达式</li><li><code>\${表达式}</code> ：忽略当前这个el表达式</li></ol></li></ul><h3 id="使用："><a href="#使用：" class="headerlink" title="使用："></a>使用：</h3><h4 id="运算符："><a href="#运算符：" class="headerlink" title="运算符："></a>运算符：</h4><ol><li>算数运算符： +  -  *  /(div)  %(mod)</li><li>比较运算符： &gt; &lt; &gt;= &lt;= == !=</li><li>逻辑运算符： &amp;&amp;(and)  ||(or)  !(not)</li><li>空运算符： empty<ul><li>功能：用于判断字符串、集合、数组对象是否为null或者长度是否为0</li><li>${empty list}:判断字符串、集合、数组对象是否为null或者长度为0</li><li>${not empty str}:表示判断字符串、集合、数组对象是否不为null 并且 长度&gt;0</li></ul></li></ol><h4 id="获取值"><a href="#获取值" class="headerlink" title="获取值"></a>获取值</h4><h5 id="el表达式只能从域对象中获取值"><a href="#el表达式只能从域对象中获取值" class="headerlink" title="el表达式只能从域对象中获取值"></a>el表达式只能从域对象中获取值</h5><h5 id="语法："><a href="#语法：" class="headerlink" title="语法："></a>语法：</h5><ol><li><p><strong>${域名称.键名}：从指定域中获取指定键的值</strong></p><ul><li>域名称：<ol><li>pageScope        –&gt; pageContext</li><li>requestScope     –&gt; request</li><li>sessionScope     –&gt; session</li><li>applicationScope –&gt; application（ServletContext）<ul><li>举例：在request域中存储了name=张三</li><li>获取：${requestScope.name}</li></ul></li></ol></li></ul></li><li><p><strong>${键名}：表示依次从最小的域中查找是否有该键对应的值，直到找到为止。</strong></p></li><li><p><strong>获取对象、List集合、Map集合的值</strong></p><ol><li><p>对象：${域名称.键名.属性名}</p><ul><li>本质上会去调用对象的getter方法</li></ul></li><li><p>List集合：${域名称.键名[索引]}</p></li><li><p>Map集合：</p><ul><li>${域名称.键名.key名称}</li><li>${域名称.键名[“key名称”]}</li></ul></li></ol></li><li><p><strong>隐式对象：</strong></p><ul><li>el表达式中有11个隐式对象</li><li>pageContext：<ul><li>获取jsp其他八个内置对象<ul><li>${pageContext.request.contextPath}：动态获取虚拟目录</li></ul></li></ul></li></ul></li></ol><h2 id="JSTL"><a href="#JSTL" class="headerlink" title="JSTL"></a>JSTL</h2><h3 id="概念：JavaServer-Pages-Tag-Library-JSP标准标签库"><a href="#概念：JavaServer-Pages-Tag-Library-JSP标准标签库" class="headerlink" title="概念：JavaServer Pages Tag Library  JSP标准标签库"></a>概念：JavaServer Pages Tag Library  JSP标准标签库</h3><ul><li>是由Apache组织提供的开源的免费的jsp标签        &lt;标签&gt;</li></ul><h3 id="作用：用于简化和替换jsp页面上的java代码"><a href="#作用：用于简化和替换jsp页面上的java代码" class="headerlink" title="作用：用于简化和替换jsp页面上的java代码"></a>作用：用于简化和替换jsp页面上的java代码</h3><h3 id="使用步骤："><a href="#使用步骤：" class="headerlink" title="使用步骤："></a>使用步骤：</h3><ol><li>导入jstl相关jar包</li><li>引入标签库：taglib指令：  <code>&lt;%@ taglib prefix=&quot;&quot; uri=&quot;&quot; %&gt;</code></li><li>使用标签</li></ol><h3 id="常用的JSTL标签"><a href="#常用的JSTL标签" class="headerlink" title="常用的JSTL标签"></a>常用的JSTL标签</h3><h4 id="if-相当于java代码的if语句"><a href="#if-相当于java代码的if语句" class="headerlink" title="if:相当于java代码的if语句"></a>if:相当于java代码的if语句</h4><ol><li>属性：<ul><li>test 必须属性，接受boolean表达式<ul><li>如果表达式为true，则显示if标签体内容，如果为false，则不显示标签体内容</li><li>一般情况下，test属性值会结合el表达式一起使用</li></ul></li></ul></li><li>注意：<ul><li>c:if标签没有else情况，想要else情况，则可以在定义一个c:if标签</li></ul></li></ol><h4 id="choose-相当于java代码的switch语句"><a href="#choose-相当于java代码的switch语句" class="headerlink" title="choose:相当于java代码的switch语句"></a>choose:相当于java代码的switch语句</h4><ol><li>使用choose标签声明                     相当于switch声明</li><li>使用when标签做判断                     相当于case</li><li>使用otherwise标签做其他情况的声明        相当于default</li></ol><ul><li><p>示例代码：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span><span class="token attr-name">request.setAttribute("number",51);</span><span class="token attr-name">%</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">c:</span>choose</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">c:</span>when</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${number <span class="token punctuation">=</span><span class="token punctuation">=</span> 1}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>星期一<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">c:</span>when</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">c:</span>when</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${number <span class="token punctuation">=</span><span class="token punctuation">=</span> 2}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>星期二<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">c:</span>when</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">c:</span>when</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${number <span class="token punctuation">=</span><span class="token punctuation">=</span> 3}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>星期三<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">c:</span>when</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">c:</span>when</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${number <span class="token punctuation">=</span><span class="token punctuation">=</span> 4}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>星期四<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">c:</span>when</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">c:</span>when</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${number <span class="token punctuation">=</span><span class="token punctuation">=</span> 5}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>星期五<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">c:</span>when</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">c:</span>when</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${number <span class="token punctuation">=</span><span class="token punctuation">=</span> 6}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>星期六<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">c:</span>when</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">c:</span>when</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${number <span class="token punctuation">=</span><span class="token punctuation">=</span> 7}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>星期天<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">c:</span>when</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">c:</span>otherwise</span><span class="token punctuation">></span></span>数字输入有误<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">c:</span>otherwise</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">c:</span>choose</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="foreach-相当于java代码的for语句"><a href="#foreach-相当于java代码的for语句" class="headerlink" title="foreach:相当于java代码的for语句"></a>foreach:相当于java代码的for语句</h4><ol><li><p>完成重复的操作</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>属性：<ul><li>begin：开始值</li><li>end：结束值</li><li>var：临时变量</li><li>step：步长</li><li>varStatus：循环状态对象</li></ul></li></ul></li><li><p>遍历容器</p><pre class="line-numbers language-java"><code class="language-java">List<span class="token operator">&lt;</span>User<span class="token operator">></span> list<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>User user <span class="token operator">:</span> list<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="三层架构：软件设计架构"><a href="#三层架构：软件设计架构" class="headerlink" title="三层架构：软件设计架构"></a>三层架构：软件设计架构</h2><ol><li>界面层(表示层)：用户看的得界面。用户可以通过界面上的组件和服务器进行交互</li><li>业务逻辑层：处理业务逻辑的。</li><li>数据访问层：操作数据存储文件。</li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> J2EE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> J2EE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cookie&amp;Session</title>
      <link href="/posts/54103.html"/>
      <url>/posts/54103.html</url>
      
        <content type="html"><![CDATA[<h2 id="会话技术"><a href="#会话技术" class="headerlink" title="会话技术"></a>会话技术</h2><ol><li>会话：一次会话中包含多次请求和响应。<ul><li>一次会话：浏览器第一次给服务器资源发送请求，会话建立，直到有一方断开为止</li></ul></li><li>功能：在一次会话的范围内的多次请求间，共享数据</li><li>方式：<ol><li>客户端会话技术：<code>Cookie</code></li><li>服务器端会话技术：<code>Session</code></li></ol></li></ol><h2 id="Cookie：小甜点"><a href="#Cookie：小甜点" class="headerlink" title="Cookie：小甜点"></a>Cookie：小甜点</h2><h3 id="1-概念："><a href="#1-概念：" class="headerlink" title="1.概念："></a>1.概念：</h3><ul><li>客户端会话技术，将数据保存到客户端</li></ul><h3 id="2-快速入门："><a href="#2-快速入门：" class="headerlink" title="2.快速入门："></a>2.快速入门：</h3><h4 id="创建Cookie对象，绑定数据"><a href="#创建Cookie对象，绑定数据" class="headerlink" title="创建Cookie对象，绑定数据"></a>创建Cookie对象，绑定数据</h4><ul><li>new Cookie(String name, String value) </li></ul><h4 id="发送Cookie对象"><a href="#发送Cookie对象" class="headerlink" title="发送Cookie对象"></a>发送Cookie对象</h4><ul><li>response.addCookie(Cookie cookie) </li></ul><h4 id="获取Cookie，拿到数据"><a href="#获取Cookie，拿到数据" class="headerlink" title="获取Cookie，拿到数据"></a>获取Cookie，拿到数据</h4><ul><li>Cookie[]  request.getCookies()  </li></ul><h3 id="3-实现原理"><a href="#3-实现原理" class="headerlink" title="3.实现原理"></a>3.实现原理</h3><ul><li>基于响应头<code>set-cookie:name=value</code>和请求头<code>cookie:name=value</code>实现</li></ul><h3 id="4-cookie的细节"><a href="#4-cookie的细节" class="headerlink" title="4.cookie的细节"></a>4.cookie的细节</h3><h4 id="一次可不可以发送多个cookie"><a href="#一次可不可以发送多个cookie" class="headerlink" title="一次可不可以发送多个cookie?"></a>一次可不可以发送多个cookie?</h4><ul><li>可以</li><li>可以创建<code>多个Cookie对象</code>，使用response<code>调用多次addCookie方法</code>发送cookie即可。</li></ul><h4 id="cookie在浏览器中保存多长时间？"><a href="#cookie在浏览器中保存多长时间？" class="headerlink" title="cookie在浏览器中保存多长时间？"></a>cookie在浏览器中保存多长时间？</h4><h5 id="默认情况下，当浏览器关闭后，Cookie数据被销毁"><a href="#默认情况下，当浏览器关闭后，Cookie数据被销毁" class="headerlink" title="默认情况下，当浏览器关闭后，Cookie数据被销毁"></a>默认情况下，当浏览器关闭后，Cookie数据被销毁</h5><h5 id="持久化存储："><a href="#持久化存储：" class="headerlink" title="持久化存储："></a>持久化存储：</h5><ul><li>setMaxAge(int seconds)<ol><li>正数：将Cookie数据写到硬盘的文件中。持久化存储。并指定cookie存活时间(单位为秒)，时间到后，cookie文件自动失效</li><li>负数：默认值，当浏览器关闭后，Cookie数据被销毁</li><li>零：删除cookie信息</li></ol></li></ul><h4 id="cookie能不能存中文？"><a href="#cookie能不能存中文？" class="headerlink" title="cookie能不能存中文？"></a>cookie能不能存中文？</h4><ul><li>在tomcat 8 之前 cookie中不能直接存储中文数据。<ul><li>需要将中文数据转码—一般采用URL编码(%E3)</li></ul></li><li>在tomcat 8 之后，cookie支持中文数据。特殊字符还是不支持，建议使用URL编码存储，URL解码解析</li></ul><h4 id="cookie共享问题？"><a href="#cookie共享问题？" class="headerlink" title="cookie共享问题？"></a>cookie共享问题？</h4><h5 id="假设在一个tomcat服务器中，部署了多个web项目，那么在这些web项目中cookie能不能共享？"><a href="#假设在一个tomcat服务器中，部署了多个web项目，那么在这些web项目中cookie能不能共享？" class="headerlink" title="假设在一个tomcat服务器中，部署了多个web项目，那么在这些web项目中cookie能不能共享？"></a>假设在一个tomcat服务器中，部署了多个web项目，那么在这些web项目中cookie能不能共享？</h5><ul><li>默认情况下cookie不能共享</li><li>setPath(String path):设置cookie的获取范围。默认情况下，设置的是当前的虚拟目录</li><li>如果要共享，则可以将path设置为”/“</li></ul><h5 id="不同的tomcat服务器间cookie共享问题？"><a href="#不同的tomcat服务器间cookie共享问题？" class="headerlink" title="不同的tomcat服务器间cookie共享问题？"></a>不同的tomcat服务器间cookie共享问题？</h5><ul><li>setDomain(String path):如果设置一级域名相同，那么多个服务器之间cookie可以共享</li><li>setDomain(“.baidu.com”),那么tieba.baidu.com和news.baidu.com中cookie可以共享</li></ul><h3 id="5-Cookie的特点和作用"><a href="#5-Cookie的特点和作用" class="headerlink" title="5.Cookie的特点和作用"></a>5.Cookie的特点和作用</h3><ol><li>cookie存储数据在客户端浏览器</li><li>浏览器对于单个cookie 的大小有限制(4kb) 以及 对同一个域名下的总cookie数量也有限制(20个)<ul><li>作用：<ol><li>cookie一般用于存出少量的不太敏感的数据</li><li>在不登录的情况下，完成服务器对客户端的身份识别</li></ol></li></ul></li></ol><h2 id="JSP：入门学习"><a href="#JSP：入门学习" class="headerlink" title="JSP：入门学习"></a>JSP：入门学习</h2><h3 id="1-概念：-1"><a href="#1-概念：-1" class="headerlink" title="1.概念："></a>1.概念：</h3><ul><li>Java Server Pages： java服务器端页面<ul><li>可以理解为：一个特殊的页面，其中既可以指定定义html标签，又可以定义java代码</li><li>用于简化书写！！！</li></ul></li></ul><h3 id="2-原理"><a href="#2-原理" class="headerlink" title="2.原理"></a>2.原理</h3><ul><li>JSP本质上就是一个Servlet</li></ul><h3 id="3-JSP的脚本：JSP定义Java代码的方式"><a href="#3-JSP的脚本：JSP定义Java代码的方式" class="headerlink" title="3.JSP的脚本：JSP定义Java代码的方式"></a>3.JSP的脚本：JSP定义Java代码的方式</h3><ol><li><code>&lt;%  代码 %&gt;</code>：定义的java代码，在service方法中。<code>service方法中可以定义什么，该脚本中就可以定义什么</code>。</li><li><code>&lt;%! 代码 %&gt;</code>：定义的java代码，在jsp转换后的java<code>类的成员位置</code>。(会引发线程安全问题)</li><li><code>&lt;%= 代码 %&gt;</code>：定义的java代码，会输出到页面上。<code>输出语句中可以定义什么，该脚本中就可以定义什么</code>。</li></ol><h3 id="4-JSP的内置对象："><a href="#4-JSP的内置对象：" class="headerlink" title="4. JSP的内置对象："></a>4. JSP的内置对象：</h3><ul><li>在jsp页面中不需要获取和创建，可以直接使用的对象</li><li>jsp一共有9个内置对象。</li><li>今天学习3个：<ul><li>request</li><li>response</li><li>out：字符输出流对象。可以将数据输出到页面上。和response.getWriter()类似<ul><li>response.getWriter()和out.write()的区别：<ul><li>在tomcat服务器真正给客户端做出响应之前，会先找response缓冲区数据，再找out缓冲区数据。</li><li><strong>response.getWriter()数据输出永远在out.write()之前</strong></li><li>所以建议统一用一种方式来输出，以免容易打乱布局，建议用out.write()</li></ul></li></ul></li></ul></li></ul><h2 id="Session：主菜"><a href="#Session：主菜" class="headerlink" title="Session：主菜"></a>Session：主菜</h2><h3 id="1-概念：-2"><a href="#1-概念：-2" class="headerlink" title="1.概念："></a>1.概念：</h3><ul><li>服务器端会话技术，在一次会话的多次请求间共享数据，将数据保存在服务器端的对象中。<code>HttpSession</code></li></ul><h3 id="2-快速入门：-1"><a href="#2-快速入门：-1" class="headerlink" title="2.快速入门："></a>2.快速入门：</h3><ul><li><p>获取HttpSession对象：</p><pre class="line-numbers language-java"><code class="language-java">HttpSession session <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>使用HttpSession对象：</p><pre class="line-numbers language-java"><code class="language-java">Object <span class="token function">getAttribute</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token keyword">void</span> <span class="token function">setAttribute</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> Object value<span class="token punctuation">)</span><span class="token keyword">void</span> <span class="token function">removeAttribute</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="3-原理"><a href="#3-原理" class="headerlink" title="3.原理"></a>3.原理</h3><ul><li>Session的实现是依赖于Cookie的。</li></ul><h3 id="4-细节："><a href="#4-细节：" class="headerlink" title="4.细节："></a>4.细节：</h3><h4 id="当客户端关闭后，服务器不关闭，两次获取session是否为同一个？"><a href="#当客户端关闭后，服务器不关闭，两次获取session是否为同一个？" class="headerlink" title="当客户端关闭后，服务器不关闭，两次获取session是否为同一个？"></a>当客户端关闭后，服务器不关闭，两次获取session是否为同一个？</h4><ul><li><p>默认情况下。不是。</p><ul><li><p>如果需要相同，则可以创建Cookie,键为JSESSIONID，设置最大存活时间，让cookie持久化保存。</p><pre class="line-numbers language-java"><code class="language-java">Cookie c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cookie</span><span class="token punctuation">(</span><span class="token string">"JSESSIONID"</span><span class="token punctuation">,</span>session<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>c<span class="token punctuation">.</span><span class="token function">setMaxAge</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token operator">*</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span>response<span class="token punctuation">.</span><span class="token function">addCookie</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><h4 id="客户端不关闭，服务器关闭后，两次获取的session是同一个吗？"><a href="#客户端不关闭，服务器关闭后，两次获取的session是同一个吗？" class="headerlink" title="客户端不关闭，服务器关闭后，两次获取的session是同一个吗？"></a>客户端不关闭，服务器关闭后，两次获取的session是同一个吗？</h4><ul><li>不是同一个，但是要让他们为同一个。tomcat会自动完成以下工作(idea不行，idea会直接把work目录里的SESSION.ser删掉)<ul><li>session的钝化：<ul><li>在服务器正常关闭之前，将session对象系列化到硬盘上</li></ul></li><li>session的活化：<ul><li>在服务器启动后，将session文件转化为内存中的session对象即可。</li></ul></li></ul></li></ul><h4 id="session什么时候被销毁？"><a href="#session什么时候被销毁？" class="headerlink" title="session什么时候被销毁？"></a>session什么时候被销毁？</h4><h5 id="服务器关闭"><a href="#服务器关闭" class="headerlink" title="服务器关闭"></a>服务器关闭</h5><h5 id="session对象调用invalidate-。"><a href="#session对象调用invalidate-。" class="headerlink" title="session对象调用invalidate() 。"></a>session对象调用invalidate() 。</h5><h5 id="session默认失效时间-30分钟"><a href="#session默认失效时间-30分钟" class="headerlink" title="session默认失效时间 30分钟"></a>session默认失效时间 30分钟</h5><ul><li><p>可以在 $Tomcat/conf/<code>web.xml</code> 选择性配置修改 </p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>session-config</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>session-timeout</span><span class="token punctuation">></span></span>30<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>session-timeout</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>session-config</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="5-session的特点"><a href="#5-session的特点" class="headerlink" title="5.session的特点"></a>5.session的特点</h3><p><strong>session用于存储一次会话的多次请求的数据，存在服务器端</strong></p><p><strong>session可以存储任意类型，任意大小的数据</strong></p><h3 id="6-session与Cookie的区别："><a href="#6-session与Cookie的区别：" class="headerlink" title="6.session与Cookie的区别："></a>6.session与Cookie的区别：</h3><ol><li>session存储数据在服务器端，Cookie在客户端</li><li>session没有数据大小限制，Cookie有</li><li>session数据安全，Cookie相对于不安全</li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> J2EE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> J2EE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Servlet-下</title>
      <link href="/posts/33672.html"/>
      <url>/posts/33672.html</url>
      
        <content type="html"><![CDATA[<h2 id="HTTP协议："><a href="#HTTP协议：" class="headerlink" title="HTTP协议："></a>HTTP协议：</h2><h3 id="1-请求消息：客户端发送给服务器端的数据"><a href="#1-请求消息：客户端发送给服务器端的数据" class="headerlink" title="1. 请求消息：客户端发送给服务器端的数据"></a>1. 请求消息：客户端发送给服务器端的数据</h3><ul><li><p>数据格式：</p><ol><li><p>请求行</p></li><li><p>请求头</p></li><li><p>请求空行</p></li><li><p>请求体</p></li></ol></li></ul><h3 id="2-响应消息：服务器端发送给客户端的数据"><a href="#2-响应消息：服务器端发送给客户端的数据" class="headerlink" title="2. 响应消息：服务器端发送给客户端的数据"></a>2. 响应消息：服务器端发送给客户端的数据</h3><ul><li><p>数据格式：</p><ol><li><p>响应行</p><ol><li><p>组成：协议/版本 响应状态码 状态码描述</p></li><li><p>响应状态码：服务器告诉客户端浏览器本次请求和响应的一个状态。</p><ol><li><p>状态码都是3位数字</p></li><li><p>分类：</p><ol><li><p>1xx：服务器接收客户端消息，但没有接受完成，等待一段时间后，发送1xx状态码。问客户端：你还有没有消息要发送啊？</p></li><li><p>2xx：成功。代表：200</p></li><li><p>3xx：重定向。代表：302(重定向)，304(访问缓存)</p></li><li><p>4xx：客户端错误。</p><ul><li><p>代表：</p><ul><li><p>404（请求路径没有对应的资源）</p></li><li><p>405：请求方式没有对应的<code>doGet/doPost</code>方法</p></li></ul></li></ul></li><li><p>5xx：服务器端错误。代表：500(服务器内部出现异常)</p></li></ol></li></ol></li></ol></li><li><p>响应头：</p><ol><li><p>格式：头名称： 值</p></li><li><p>常见的响应头：</p><ol><li><p>Content-Type：服务器告诉客户端本次响应体数据格式以及编码格式</p></li><li><p>Content-disposition：服务器告诉客户端以什么格式打开响应体数据</p><ul><li><p>值：</p><ul><li><p>in-line:默认值,在当前页面内打开</p></li><li><p>attachment;filename=xxx：以附件形式打开响应体。文件下载</p></li></ul></li></ul></li></ol></li></ol></li><li><p>响应空行(空的一行)</p></li><li><p>响应体:传输的数据（HTML）</p></li></ol><ul><li>响应字符串格式</li></ul><pre><code>HTTP/1.1 200Date: Mon, 25 Mar 2019 13:26:40 GMTAccept-Ranges: bytesETag: W/&quot;393-1553517200000&quot;Last-Modified: Mon, 25 Mar 2019 12:33:20 GMTContent-Type: text/htmlContent-Length: 393&lt;html&gt;&lt;head&gt;    &lt;title&gt;$Title$&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    hello , response&lt;/body&gt;&lt;/html&gt;</code></pre></li></ul><h2 id="Response对象"><a href="#Response对象" class="headerlink" title="Response对象"></a>Response对象</h2><h3 id="1-设置响应消息"><a href="#1-设置响应消息" class="headerlink" title="1.设置响应消息"></a>1.设置响应消息</h3><ol><li><p>设置响应行</p><ol><li><p>格式：HTTP/1.1 200 ok</p></li><li><p>设置状态码：setStatus(int sc)</p></li></ol></li><li><p>设置响应头：void  setHeader(String name, String value)</p></li><li><p>设置响应体：</p><ul><li><p>使用步骤：</p><ol><li><p>获取输出流</p><ul><li><p>字符输出流：PrintWriter getWriter()</p></li><li><p>字节输出流：ServletOutputStream getOutputStream()</p></li></ul></li><li><p>使用输出流，将数据输出到客户端浏览器</p></li></ol></li></ul></li></ol><h3 id="2-重定向"><a href="#2-重定向" class="headerlink" title="2.重定向"></a>2.重定向</h3><ul><li><p>重定向：资源跳转的方式</p></li><li><p>代码实现：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//1. 设置状态码为302</span>response<span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span><span class="token number">302</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//2.设置响应头location</span>response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"location"</span><span class="token punctuation">,</span><span class="token string">"/servlet/responseDemo2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//第一个参数表示设置的是哪个响应头</span>                    <span class="token comment" spellcheck="true">//第二个参数表示该响应头的值为多少</span><span class="token comment" spellcheck="true">//-----------------------------------------------------</span><span class="token comment" spellcheck="true">//简单的重定向方法， 直接设置重定向路径即可</span>response<span class="token punctuation">.</span><span class="token function">sendRedirect</span><span class="token punctuation">(</span><span class="token string">"/day15/responseDemo2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>forward</code> 和 <code>redirect</code> 区别</p><ul><li><p>重定向的特点:<code>redirect</code></p><ol><li><p>地址栏发生变化</p></li><li><p>重定向可以访问其他站点(服务器)的资源</p></li><li><p>重定向是两次请求。不能使用request对象来共享数据</p></li><li><p>重定向的路径要加上<code>站点名称</code>，一般要使用`request.getContextPath()+``来获取站点路径</p><pre class="line-numbers language-java"><code class="language-java">response<span class="token punctuation">.</span><span class="token function">sendRedirect</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getContextPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"/responseDemo2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol></li><li><p>转发的特点：<code>forward</code></p><ol><li><p>转发地址栏路径不变</p></li><li><p>转发只能访问当前服务器下的资源</p></li><li><p>转发是一次请求，可以使用request对象来共享数据</p></li><li><p><strong>要转发的路径可以直接写</strong></p><pre class="line-numbers language-java"><code class="language-java">req<span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span><span class="token string">"/requestDemo6"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>resp<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol></li></ul></li></ul><h3 id="3-服务器输出字符数据到浏览器"><a href="#3-服务器输出字符数据到浏览器" class="headerlink" title="3.服务器输出字符数据到浏览器"></a>3.服务器输出字符数据到浏览器</h3><ul><li><p>代码实现：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//获取流对象之前，设置流的默认编码：ISO-8859-1 设置为：GBK</span><span class="token comment" spellcheck="true">// response.setCharacterEncoding("utf-8");</span><span class="token comment" spellcheck="true">//告诉浏览器，服务器发送的消息体数据的编码。建议浏览器使用该编码解码</span><span class="token comment" spellcheck="true">//response.setHeader("content-type","text/html;charset=utf-8");</span><span class="token comment" spellcheck="true">//简单的形式，设置编码</span>response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"text/html;charset=utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//1.获取字符输出流</span>PrintWriter pw <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//2.输出数据</span>pw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"你好啊啊啊 response"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>步骤：</p><ol><li><p>获取字符输出流</p></li><li><p>输出数据</p></li></ol></li><li><p>注意：</p><ul><li><p>乱码问题：</p><ol><li><p>PrintWriter pw = response.getWriter();//获取的流的默认编码是ISO-8859-1</p></li><li><p>设置该流的默认编码</p></li><li><p>告诉浏览器响应体使用的编码</p></li><li><p><strong>流是respose获取的，在一次请求结束后response会自动销毁，相应的流也会被自动清理</strong></p></li></ol></li><li><p>设置编码的简单形式，记得<strong>在获取流之前设置</strong></p><pre class="line-numbers language-java"><code class="language-java">response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"text/html;charset=utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li></ul><h3 id="4-服务器输出字节数据到浏览器"><a href="#4-服务器输出字节数据到浏览器" class="headerlink" title="4.服务器输出字节数据到浏览器"></a>4.服务器输出字节数据到浏览器</h3><ul><li>代码实现：</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//1.获取字节输出流</span>ServletOutputStream sos <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//2.输出数据</span>sos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"你好"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="ServletContext对象："><a href="#ServletContext对象：" class="headerlink" title="ServletContext对象："></a>ServletContext对象：</h2><h3 id="1-概念："><a href="#1-概念：" class="headerlink" title="1.概念："></a>1.概念：</h3><ul><li>代表整个web应用，可以和程序的容器(服务器)来通信</li></ul><h3 id="2-获取："><a href="#2-获取：" class="headerlink" title="2.获取："></a>2.获取：</h3><ol><li><p>通过request对象获取</p><ul><li>request.getServletContext();</li></ul></li><li><p>通过HttpServlet获取（推介）</p><ul><li>this.getServletContext();</li></ul></li></ol><ul><li><p>总结：</p><ul><li>以上两种方式获取的对象相同！</li></ul></li></ul><h3 id="3-功能"><a href="#3-功能" class="headerlink" title="3.功能:"></a>3.功能:</h3><ol><li><p>获取MIME类型：</p><ul><li><p>MIME类型:在互联网通信过程中定义的一种文件数据类型</p><ul><li>格式： 大类型/小类型 text/html   image/jpeg</li></ul></li><li><p>获取：String getMimeType(String file)</p></li></ul></li><li><p>域对象：共享数据</p><ol><li><p>setAttribute(String name,Object value)</p></li><li><p>getAttribute(String name)</p></li><li><p>removeAttribute(String name)</p></li></ol><ul><li>ServletContext对象范围：所有用户所有请求的数据</li></ul></li><li><p>获取文件的真实(服务器)路径</p><ol><li>方法：String getRealPath(String path)</li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> J2EE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> J2EE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JDBC连接池</title>
      <link href="/posts/27625.html"/>
      <url>/posts/27625.html</url>
      
        <content type="html"><![CDATA[<h2 id="数据库连接池"><a href="#数据库连接池" class="headerlink" title="数据库连接池"></a>数据库连接池</h2><h3 id="概念："><a href="#概念：" class="headerlink" title="概念："></a>概念：</h3><ul><li>其实就是一个容器(集合)，存放数据库连接的容器。<br>当系统初始化好后，容器被创建，容器中会申请一些连接对象，当用户来访问数据库时，从容器中获取连接对象，用户访问完之后，会将连接对象归还给容器。</li></ul><h3 id="好处："><a href="#好处：" class="headerlink" title="好处："></a>好处：</h3><ol><li>节约资源</li><li>用户访问高效</li></ol><h3 id="实现："><a href="#实现：" class="headerlink" title="实现："></a>实现：</h3><ol><li>标准接口：<code>DataSource</code>   javax.sql包下的<ol><li>方法：<ul><li>获取连接：getConnection()</li><li>归还连接：Connection.close()。如果连接对象Connection是从连接池中获取的，那么调用Connection.close()方法，则不会再关闭连接了。而是归还连接</li></ul></li><li>一般我们不去实现它，有数据库厂商来实现<ol><li><code>C3P0</code>：数据库连接池技术，由Hibernate提供</li><li><code>Druid</code>：数据库连接池实现技术，由阿里巴巴提供的</li></ol></li></ol></li></ol><h3 id="C3P0"><a href="#C3P0" class="headerlink" title="C3P0"></a>C3P0</h3><ul><li><p>步骤：</p><ol><li><p>导入jar包 (两个) <code>c3p0-0.9.5.2.jar</code> <code>mchange-commons-java-0.2.12.jar</code></p><ul><li>不要忘记导入数据库驱动jar包</li></ul></li><li><p>定义配置文件：</p><ul><li>名称：<code>必须``c3p0.properties</code> 或者<code>c3p0-config.xml</code></li><li>路径：直接将文件放在src目录下即可。</li><li>c3p0可以在一个配置文件内使用不同的配置，只要在新建数据库连接对象的时候传个参数<ul><li>DataSource ds = new ComboPooledDataSource(“配置文件name”)；</li></ul></li></ul></li><li><p>创建核心对象 数据库连接池对象 <code>ComboPooledDataSource</code></p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//创建数据库连接池对象 （可以传参，使用不同的配置文件）</span><span class="token comment" spellcheck="true">//DataSource ds=new ComboPooledDataSource("c3p0_2");</span>DataSource ds<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ComboPooledDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>获取连接： getConnection</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//获取连接对象</span>Connection connection<span class="token operator">=</span>ds<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol></li><li><p><strong>注意：</strong>close()不是关闭连接而是<code>归还连接</code>！</p></li></ul><h3 id="Druid"><a href="#Druid" class="headerlink" title="Druid"></a>Druid</h3><ol><li><p>步骤：</p><ol><li><p>导入jar包 <code>druid.jar</code> </p></li><li><p>定义配置文件：</p><ul><li>是properties形式的</li><li>可以叫任意名称，可以放在任意目录下</li></ul></li><li><p>加载配置文件。</p><pre class="line-numbers language-java"><code class="language-java"> Properties pro <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//使用ClassLoader加载配置文件，获取字节输入流</span> InputStream is <span class="token operator">=</span> JDBCUtils<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"druid.properties"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> pro<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>is<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>获取数据库连接池对象：通过工厂来来获取 DruidDataSourceFactory</p><pre class="line-numbers language-java"><code class="language-java">DataSource ds <span class="token operator">=</span> DruidDataSourceFactory<span class="token punctuation">.</span><span class="token function">createDataSource</span><span class="token punctuation">(</span>pro<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//参数是配置文件对象</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>获取连接：getConnection</p><pre class="line-numbers language-java"><code class="language-java">ds<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>归还连接：close</p><pre class="line-numbers language-java"><code class="language-java">ds<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>注意：</strong>这里的close()也不是关闭连接，而是<code>归还连接</code>！</p></li></ol></li></ol><h2 id="Spring-JDBC"><a href="#Spring-JDBC" class="headerlink" title="Spring JDBC"></a>Spring JDBC</h2><ul><li><p>Spring框架对JDBC的简单封装。提供了一个JDBCTemplate对象简化JDBC的开发</p></li><li><p>步骤：</p><ol><li><p><strong>导入jar包</strong></p></li><li><p><strong>创建JdbcTemplate对象。依赖于DataSource对象</strong></p><pre class="line-numbers language-java"><code class="language-java">JdbcTemplate template <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JdbcTemplate</span><span class="token punctuation">(</span>ds<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//ds为DataSource的对象</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或者也可以</p><pre class="line-numbers language-java"><code class="language-java">JdbcTemplate template <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JdbcTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>template<span class="token punctuation">.</span><span class="token function">setDataSource</span><span class="token punctuation">(</span>ds<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><strong>调用JdbcTemplate的方法来完成CRUD的操作</strong></p><ul><li><p><code>update()</code>:执行DML语句。增、删、改语句。可以有参数。返回值为此次操作影响的记录数。</p></li><li><p><code>execute()</code>:作用跟 <code>update()</code> 一样，但是不可以使用参数。无返回值。</p></li><li><p><code>queryForMap()</code>:查询结果将结果集封装为map集合，将<code>字段</code>作为<code>key</code>，将<code>值</code>作为<code>value</code> 将这条记录封装为一个map集合</p><ul><li><strong>注意</strong>：这个方法查询的结果集<code>长度只能是1</code></li></ul></li><li><p><code>queryForList()</code>:查询结果将结果集封装为list集合</p><ul><li>注意：将每一条记录封装为一个Map集合，再将Map集合装载到List集合中</li></ul></li><li><p><code>query()</code>:查询结果，将结果封装为JavaBean对象</p><ul><li>query的参数：RowMapper<ul><li>一般我们使用BeanPropertyRowMapper实现类。可以完成数据到JavaBean的自动封装</li><li>new BeanPropertyRowMapper&lt;类型&gt;(类型.class)</li></ul></li></ul></li><li><p><code>queryForObject</code>：查询结果，将结果封装为对象</p><ul><li>一般用于聚合函数的查询</li></ul></li></ul></li></ol></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JDBC</title>
      <link href="/posts/23591.html"/>
      <url>/posts/23591.html</url>
      
        <content type="html"><![CDATA[<h2 id="驱动包的注册"><a href="#驱动包的注册" class="headerlink" title="驱动包的注册"></a>驱动包的注册</h2><pre class="line-numbers language-java"><code class="language-java">Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.mysql.jdbc.Driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这句可以不写，因为在mysql5之后的驱动jar包可以省略注册驱动。</p><p>在驱动包<code>META-INF/servicesjava.sql.Driver/</code>文件里会自动加载驱动</p><p>实际注册驱动的是<code>DriverManager</code>，在<code>com.mysql.jdbc.Driver</code>包里可以找到下面的语句：</p><pre class="line-numbers language-java"><code class="language-java">DriverManager<span class="token punctuation">.</span><span class="token function">registerDriver</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Driver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>连接数据库时，如果连接的是本地数据库并且端口为3306，则连接的URL可以简写为：<code>jdbc:mysql:///&lt;数据库名&gt;</code></li></ul><h2 id="连接数据库的对象"><a href="#连接数据库的对象" class="headerlink" title="连接数据库的对象"></a>连接数据库的对象</h2><ol><li><p>DriverManager：驱动管理对象</p><ul><li><p>注册驱动</p></li><li><p>获取数据库连接<code>DriverManager.getconnection()</code></p></li></ul></li><li><p>Connection：数据库连接对象</p><ol><li><p>功能：</p><ul><li>获取执行sql 的对象</li></ul></li><li><p>管理事务：</p><ul><li><p>开启事务：setAutoCommit(boolean autoCommit) ：调用该方法设置参数为false，即开启事务</p></li><li><p>提交事务：commit()</p></li><li><p>回滚事务：rollback()</p></li></ul></li></ol></li><li><p>Statement：执行sql的对象</p><ul><li><p>执行sql</p><ol><li><p>boolean execute(String sql) ：可以执行任意的sql （了解）</p></li><li><p>int executeUpdate(String sql) ：执行DML（增删改）语句、DDL(create，alter、drop)语句（不常用，一般设计数据库用专业软件）</p><ul><li>返回值为：影响的行数，可以通过这个影响的行数判断DML语句是否执行成功 返回值&gt;0的则执行成功，反之，则失败。</li></ul></li><li><p>ResultSet executeQuery(String sql) ：执行DQL（select)查询语句</p></li></ol></li></ul></li><li><p>ResultSet：结果集对象,封装查询结果</p><ul><li><p>boolean next(): 游标向下移动一行，判断当前行是否是最后一行末尾(是否有数据)，如果是(最后一行没有数据)，则返回false，如果不是则返回true</p></li><li><p>getXxx(参数):获取数据</p><ul><li><p>Xxx：代表数据类型 如： int getInt() , String getString()  //根据字段的类型</p></li><li><p>参数有两种类型：</p><ol><li><p>int：代表列的编号,从1开始 如： getString(1)   //表示获取第几个字段，从1开始，注意不带双引号</p></li><li><p>String：代表列名称。 如： getDouble(“balance”)    //表示获取哪个具体字段</p></li></ol></li><li><p>注意：</p><ul><li><p>使用步骤：</p><ol><li><p>游标向下移动一行</p></li><li><p>判断是否有数据(不然会有异常)</p></li><li><p>获取数据</p></li></ol></li></ul></li></ul></li></ul></li><li><p>PreparedStatement：执行sql的对象</p><ol><li>SQL注入问题：在拼接sql时，有一些sql的特殊关键字参与字符串的拼接。会造成安全性问题<ul><li>例子<ol><li>输入用户名：随便，输入密码：a’ or ‘a’ = ‘a</li><li>整个SQL语句就变成：<code>select * from user where username = &#39;fhdsjkf&#39; and password = &#39;a&#39; or &#39;a&#39; = &#39;a&#39;</code><ul><li><code>username = &#39;fhdsjkf&#39;</code>肯定为false，<code>password = &#39;a&#39;</code>也为false，但是后面有个<code>or &#39;a&#39; = &#39;a&#39;</code></li><li><code>&#39;a&#39; = &#39;a&#39;</code>是一个恒等式，一定是个true，那么整体就是<code>false or true</code> 结果就是<code>true</code>，然后就可以强行登陆，做一些坏事！ </li></ul></li></ol></li></ul></li><li>解决方案：使用<code>PreparedStatement对象</code>来解决</li><li>预编译的SQL：参数使用<code>?</code>作为占位符</li><li>具体使用步骤：<ol><li>导入驱动jar包 mysql-connector-java-5.1.37-bin.jar</li><li>注册驱动</li><li>获取数据库连接对象 Connection</li><li>定义sql<ul><li>注意：sql的参数使用？作为占位符。 如：select * from user where username = ? and password = ?;</li></ul></li><li>获取执行sql语句的对象 PreparedStatement ps=connection.prepareStatement(String sql) //这里要直接传个sql语句做参数,Statement对象没有</li><li>给？赋值：<ul><li>方法： setXxx(参数1,参数2) //Xxx为数据类型<ul><li>参数1：？的位置编号 从<code>1</code>开始</li><li>参数2：？的值</li></ul></li></ul></li><li>执行sql，接受返回结果，不需要传递sql语句</li><li>处理结果</li><li>释放资源</li></ol></li><li>注意：后期都会使用PreparedStatement来完成增删改查的所有操作<ol><li>可以防止SQL注入</li><li>效率更高</li></ol></li></ol></li></ol><h2 id="抽取JDBC工具类-：-JDBCUtils"><a href="#抽取JDBC工具类-：-JDBCUtils" class="headerlink" title="抽取JDBC工具类 ： JDBCUtils"></a>抽取JDBC工具类 ： JDBCUtils</h2><ul><li><strong>注意！注意！注意！：</strong><br><code>jdbc.properties</code>数据库配置文件一定要放在src根目录下，不然会报<code>Exception in thread &quot;main&quot; java.lang.NoClassDefFoundError: Could not initialize class xyz.sky03.JDBC.util.JDBCUtils</code>这种错误。</li></ul><p>具体实现：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> xyz<span class="token punctuation">.</span>sky03<span class="token punctuation">.</span>JDBC<span class="token punctuation">.</span>util<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileReader<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>URL<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Properties<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JDBCUtils</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> String url<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//只有静态的变量才能被静态代码块读取到，才能被静态方法所访问</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> String user<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> String password<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> String driver<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//文件的读取以及注册驱动，只需要读取一次即可拿到这些值，所以使用静态代码块</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//读取资源文件，获取值</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//1. 创建Properties集合类。</span>            Properties pro <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//获取src路径下的文件的方式--->ClassLoader 类加载器</span>            ClassLoader classLoader <span class="token operator">=</span> JDBCUtils<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            URL res  <span class="token operator">=</span> classLoader<span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token string">"jdbc.properties"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String path <span class="token operator">=</span> res<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//2. 加载文件</span>            pro<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//3. 获取数据，赋值</span>            url<span class="token operator">=</span>pro<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"url"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            user<span class="token operator">=</span>pro<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            password<span class="token operator">=</span>pro<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            driver<span class="token operator">=</span>pro<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//4. 注册驱动</span>            Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>driver<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> <span class="token operator">|</span> ClassNotFoundException e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Connection <span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException <span class="token punctuation">{</span>        <span class="token keyword">return</span> DriverManager<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span>user<span class="token punctuation">,</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//释放资源</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span>Statement stat<span class="token punctuation">,</span> Connection conn<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>stat<span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                stat<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//conn.close(); 这里不能把下面的conn.close()方法放到一起</span>                <span class="token comment" spellcheck="true">//因为如果stat.close()没有正常关闭，就会直接catch到下面了，conn.close()就会被跳过去，没有执行</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>conn<span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                conn<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//重载一个带ResultSet的方法</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span>ResultSet rs<span class="token punctuation">,</span>Statement stat<span class="token punctuation">,</span> Connection conn<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>rs<span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                rs<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>stat<span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                stat<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>conn<span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                conn<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="JDBC控制事务："><a href="#JDBC控制事务：" class="headerlink" title="JDBC控制事务："></a>JDBC控制事务：</h2><ol><li>事务：一个包含多个步骤的业务操作。如果这个业务操作被事务管理，则这多个步骤要么同时成功，要么同时失败。</li><li>操作：<ol><li>开启事务</li><li>提交事务</li><li>回滚事务</li></ol></li><li>使用Connection对象来管理事务的时机<ul><li>开启事务：setAutoCommit(boolean autoCommit) ：调用该方法设置参数为false，即开启事务<ul><li>在执行sql语句之前开启事务</li></ul></li><li>提交事务：commit() <ul><li>当所有sql都执行完提交事务</li></ul></li><li>回滚事务：rollback() <ul><li>在catch中回滚事务</li></ul></li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Servlet-上</title>
      <link href="/posts/55715.html"/>
      <url>/posts/55715.html</url>
      
        <content type="html"><![CDATA[<h2 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h2><ul><li><p><strong>概念</strong>：运行在服务器端的小程序</p></li><li><p>快速入门：</p><ol><li>创建JavaEE项目</li><li>定义一个类，实现(implements)Servlet接口</li><li>实现接口中的抽象方法(五个)</li><li>配置Servlet（web.xml）</li></ol></li><li><p>Servlet的生命周期方法：</p><ol><li><p>被创建：执行init()方法，只执行一次</p><ul><li>Servlet什么时候创建？<ul><li>默认情况下，第一次访问时，Servlet被创建</li><li>可以配置创建Servlet的创建时机<ul><li>在<code>&lt;Servlet&gt;</code>标签下配置<ol><li>第一次被访问时，创建（默认）<ul><li><code>&lt;load-on-startup&gt;</code>的值为负整数（默认值为-1）</li></ul></li><li>在服务器启动时，创键<ul><li><code>&lt;laod-on-startup&gt;</code>的值为0或者正整数</li><li>如果有多个Servlet都配置了自动启动，数字越小，启动的优先级越高</li></ul></li></ol></li></ul></li></ul></li><li>Servlet的init方法，只执行一次，Servlet是单例<ul><li>线程安全问题（有很多人访问）</li></ul></li></ul></li><li><p>提供服务： 执行service()方法，执行多次</p><ul><li>每次访问Servlet时，service方法都会被调用一次</li></ul></li><li><p>被销毁：执行destroy()方法，只执行一次</p><ul><li>Servlet被销毁时执行。服务器关闭时，Servlet被销毁</li><li>只有服务器正常关闭时，才会执行destroy()方法。</li><li>destroy()方法在Servlet被销毁之前执行，一般用于释放资源</li></ul></li></ol></li></ul><h2 id="Servlet3-0-注解配置"><a href="#Servlet3-0-注解配置" class="headerlink" title="Servlet3.0 注解配置"></a>Servlet3.0 注解配置</h2><ul><li>好处：<ul><li>支持注解配置，不需要web.xml。</li></ul></li><li>使用：<ul><li>在业务类的上面加上一行注解即可，以下是三种使用方法：<ul><li><code>@WebServlet(urlPatterns = &quot;/demo&quot;)</code></li><li><code>@WebServlet(value = &quot;/demo&quot;)</code>  （value表示最重要的东西，最重要的就是urlPatterns）</li><li><code>@WebServlet(&quot;/demo&quot;)</code>     （只有value一个值的时候可以省略不写，注意不要忘了<code>/</code>）</li></ul></li></ul></li></ul><h2 id="idea与Tomcat相关配置"><a href="#idea与Tomcat相关配置" class="headerlink" title="idea与Tomcat相关配置"></a>idea与Tomcat相关配置</h2><ol><li>IDEA会为每一个Tomcat部署的项目单独生成一份配置文件<ul><li>可以查看控制台log中的 <code>CATALINA_BASE</code> 来查看路径</li></ul></li><li>IDEA项目的发布路径</li></ol><h2 id="Servlet的体系结构"><a href="#Servlet的体系结构" class="headerlink" title="Servlet的体系结构"></a>Servlet的体系结构</h2><p>Servlet  – 接口<br>        ↓<br>GenericServlet – 抽象类<br>        ↓<br>HttpServlet   –  抽象类</p><ul><li>Servlet： <code>实现</code>（implements）Servlet接口，它的五个方法必需全部实现，不然报错！</li><li>GenericServlet：实现了Servlet接口，将Servlet接口中的其他方法做了默认空实现，只将service()方法作为抽象(必需实现的)<ul><li><code>继承</code>（extends）GenericServlet，可以只重写service()方法，其他的可以根据需要重写</li></ul></li><li>HttpServlet：对Http协议的一种封装，简化操作（常用）<ul><li>一般进行业务操作都要对请求的方法进行判断（GET/POST）</li><li><code>继承</code>HttpServlet可以直接使用<code>doGet()/doPost()</code>方法，不用进行判断</li></ul></li></ul><h2 id="Servlet注解路径详解"><a href="#Servlet注解路径详解" class="headerlink" title="Servlet注解路径详解"></a>Servlet注解路径详解</h2><p>urlpartten：Servlet访问路径(注解方式)</p><ol><li>一个Servlet可以定义多个访问路径<ul><li><code>@WebServlet({&quot;/d4&quot;,&quot;/dd4&quot;,&quot;/ddd4&quot;})</code></li></ul></li><li>路径定义规则：<ol><li><code>/xxx</code></li><li><code>/xxx/xxx</code><ul><li><code>/abc/*</code>  ：abc下的所有路径都可以访问</li><li><code>/*</code> ：所有路径都可以访问，如果输入目录与其他路径相同，先访问其他目录，即该方式的优先级最低</li></ul></li><li><code>*.do</code><ul><li>注意不要带<code>/</code>  </li></ul></li></ol></li></ol><h2 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h2><ul><li>URL(Uniform Resource Locator) 统一资源定位符.<ul><li>它是可以唯一标识一个资源的位置。(就是浏览器里的网址)</li><li>写法：<ul><li><code>协议</code> + <code>主机</code> + <code>端口</code> + <code>URI</code></li><li>Like this：<code>https://sky03.xyz:443/blogs/2019/55715.html</code></li></ul></li></ul></li><li>URI(Uniform Resource Identifier) 统一资源标识符.<ul><li>它是在应用中可以唯一定位一个资源的。</li></ul></li></ul><h2 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h2><ul><li><p>概念：Hyper Text Transfer Protocol 超文本传输协议</p><ul><li>传输协议：发送数据的格式</li><li>特点：<ol><li>基于TCP/IP的高级协议</li><li>默认端口：80</li><li>基于请求/响应的模型：一次请求对应一次响应</li><li>无状态的：每次请求之间相互独立，不能相互的交互数据</li></ol></li><li>历史版本：<ul><li>1.0：每一次请求响应都会建立新的连接，然后断开，然后重连，传输，再断开。。。<ul><li>断开和重连都会消耗时间，所以此版本体验极差</li></ul></li><li>1.1：复用连接，会等一会，如果还有信息传输，就继续用这个连接，从而节省时间</li></ul></li></ul></li><li><p>请求消息数据格式</p><ol><li><p>请求行<br>请求方式  请求url  请求协议/版本</p><pre><code>GET /login.html HTTP/1.1</code></pre><ul><li>请求方式：<ul><li>HTTP协议有7中请求方式，常用的有2种</li><li>GET：<ol><li>请求参数在请求行中，在url后。</li><li>请求的url长度有限制的</li><li>不太安全（能看到表单密码）</li></ol></li><li>POST：<ol><li>请求参数在请求体中</li><li>请求的url长度没有限制的</li><li>相对安全（看不到表单密码）</li></ol></li></ul></li></ul></li><li><p>请求头：客户端浏览器告诉服务器一些信息<br>请求头名称: 请求头值</p><pre><code>Host: localhost:8080 Connection: keep-alive Upgrade-Insecure-Requests: 1 User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.100 Safari/537.36 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8 Accept-Encoding: gzip, deflate, br Accept-Language: zh-CN,zh;q=0.9 Cookie: JSESSIONID=CC05E35CD1E8E96DBC1FDCAD55987ED2</code></pre><ul><li>常见的请求头：<ol><li><code>User-Agent</code>：浏览器告诉服务器，我访问你使用的浏览器版本信息<ul><li>可以在服务器端获取该头的信息，解决浏览器的兼容性问题</li></ul></li><li><code>Referer</code>：<a href="http://localhost/login.html" target="_blank" rel="noopener">http://localhost/login.html</a><ul><li>告诉服务器，我(当前请求)从哪里来？<ul><li>作用：<ol><li>防盗链</li><li>统计工作</li></ol></li></ul></li></ul></li></ol></li></ul></li><li><p>请求空行</p><ul><li><p>空行(空的一行)，就是用于分割POST请求的请求头，和请求体的。</p><pre><code></code></pre></li></ul></li></ol></li></ul><ol start="4"><li><p>请求体(正文)：</p><pre><code>username=zhangsan</code></pre><ul><li>封装POST请求消息的请求参数的</li></ul></li><li><p>整个请求消息的字符串格式为：</p><pre><code>GET /ServletDemo/?name=zhangsan HTTP/1.1Host: localhost:8080Connection: keep-aliveUpgrade-Insecure-Requests: 1User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.100 Safari/537.36Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8Accept-Encoding: gzip, deflate, brAccept-Language: zh-CN,zh;q=0.9Cookie: JSESSIONID=CC05E35CD1E8E96DBC1FDCAD55987ED2username=zhangsan</code></pre></li></ol><ul><li>响应消息数据格式</li></ul><h2 id="Request"><a href="#Request" class="headerlink" title="Request"></a>Request</h2><h3 id="1-功能："><a href="#1-功能：" class="headerlink" title="1. 功能："></a>1. <strong>功能</strong>：</h3><h4 id="1-获取请求消息数据"><a href="#1-获取请求消息数据" class="headerlink" title="1. 获取请求消息数据"></a>1. 获取请求消息数据</h4><h4 id="2-获取请求行数据"><a href="#2-获取请求行数据" class="headerlink" title="2. 获取请求行数据"></a>2. 获取请求行数据</h4><ol><li>获取请求方式 ：GET<ul><li>String getMethod()</li></ul></li><li>(重点)获取虚拟目录：/servlet<ul><li>String getContextPath()</li></ul></li><li>获取Servlet路径(urlpartten): /demo1<ul><li>String getServletPath()</li></ul></li><li>获取get方式请求参数：?name=zhangsan<ul><li>String getQueryString()</li></ul></li><li>(重点)获取请求URI：/day14/demo1<ul><li>String getRequestURI():    /day14/demo1</li><li>StringBuffer getRequestURL() :          <a href="http://localhost/day14/demo1" target="_blank" rel="noopener">http://localhost/day14/demo1</a></li><li>URL：统一资源定位符</li><li>URI：统一资源标识符</li></ul></li><li>获取协议及版本：HTTP/1.1<ul><li>String getProtocol()</li></ul></li><li>获取客户机的IP地址：<ul><li>String getRemoteAddr()</li></ul></li></ol><h4 id="3-获取请求头数据"><a href="#3-获取请求头数据" class="headerlink" title="3. 获取请求头数据"></a>3. 获取请求头数据</h4><ul><li>方法：<ul><li>(重点)String getHeader(String name):通过请求头的名称获取请求头的值</li></ul></li><li>Enumeration<code>&lt;String&gt;</code> getHeaderNames():获取所有的请求头名称</li></ul><h4 id="4-获取请求体数据"><a href="#4-获取请求体数据" class="headerlink" title="4. 获取请求体数据:"></a>4. 获取请求体数据:</h4><ul><li><p>请求体：只有POST请求方式，才有请求体，在请求体中封装了POST请求的请求参数</p></li><li><p>方法：</p><ol><li><p>获取流对象</p><ul><li>BufferedReader getReader()：获取字符输入流，只能操作字符数据</li><li>ServletInputStream getInputStream()：获取字节输入流，可以操作所有类型数据</li></ul></li><li><p>再从流对象中拿数据</p></li></ol></li></ul><h4 id="5-其他功能："><a href="#5-其他功能：" class="headerlink" title="5. 其他功能："></a>5. 其他功能：</h4><ol><li><p>获取请求参数通用方式：<code>不论get还是post</code>请求方式都可以使用下列方法来获取请求参数</p><p>所以将来可以只在<code>doPost/doGet</code>方法里写一份代码，在另一个方法里这么写：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">doPost</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//或者</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">doGet</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol><li><p>String   getParameter(String name):根据参数名称获取参数值 username=zs&amp;password=123</p></li><li><p>String[]   getParameterValues(String name):根据参数名称获取参数值的数组 hobby=xx&amp;hobby=game</p></li><li><p>Enumeration &lt;String&gt;   getParameterNames():获取所有请求的参数名称的枚举</p></li><li><p>Map &lt;String,String[]&gt;   getParameterMap():获取所有参数的map集合</p></li></ol><ul><li>中文乱码问题：<ul><li>get方式：tomcat 8 已经将get方式乱码问题解决了</li><li>post方式：会乱码</li></ul></li><li>解决：在获取参数前，设置request的编码<code>request.setCharacterEncoding(&quot;utf-8&quot;);</code></li></ul></li></ol><h3 id="2-请求转发：一种在服务器内部的资源跳转方式"><a href="#2-请求转发：一种在服务器内部的资源跳转方式" class="headerlink" title="2. 请求转发：一种在服务器内部的资源跳转方式"></a>2. 请求转发：一种在服务器内部的资源跳转方式</h3><h4 id="1-步骤："><a href="#1-步骤：" class="headerlink" title="1. 步骤："></a>1. 步骤：</h4><ol><li><p>通过request对象获取请求转发器对象：RequestDispatcher getRequestDispatcher(String path)</p></li><li><p>使用RequestDispatcher对象来进行转发：forward(ServletRequest request, ServletResponse response)</p><ul><li><p>一般的写法</p><pre class="line-numbers language-java"><code class="language-java">RequestDispatcher requestDispatcher <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>requestDispatcher<span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>resp<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>可以使用链式编程</p><pre class="line-numbers language-java"><code class="language-java">req<span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span><span class="token string">"/requestDemo4"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>resp<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li></ol><h4 id="2-特点："><a href="#2-特点：" class="headerlink" title="2. 特点："></a>2. 特点：</h4><ol><li>浏览器地址栏路径不发生变化</li><li>只能转发到当前服务器内部资源中。(这个跳转不能直接转到别的服务器网址)</li><li>转发是一次请求（只有一次请求）</li></ol><h3 id="3-共享数据："><a href="#3-共享数据：" class="headerlink" title="3. 共享数据："></a>3. 共享数据：</h3><ul><li>域对象：一个有作用范围的对象，可以在范围内共享数据</li><li>request域：代表<code>一次请求</code>的范围，一般用于请求转发的<code>多个资源</code>中共享数据</li><li>方法：<ol><li>void  setAttribute(String name,Object obj):存储数据</li><li>Object  getAttitude(String name):通过键获取值</li><li>void  removeAttribute(String name):通过键移除键值对</li></ol></li></ul><h3 id="4-获取ServletContext："><a href="#4-获取ServletContext：" class="headerlink" title="4. 获取ServletContext："></a>4. 获取ServletContext：</h3><ul><li>ServletContext getServletContext()</li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> J2EE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> J2EE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac使用优化</title>
      <link href="/posts/10258.html"/>
      <url>/posts/10258.html</url>
      
        <content type="html"><![CDATA[<h2 id="让Mac的Dock快速显示和隐藏"><a href="#让Mac的Dock快速显示和隐藏" class="headerlink" title="让Mac的Dock快速显示和隐藏"></a>让Mac的Dock快速显示和隐藏</h2><p>使用OS X的时候都会选择将Dock隐藏，等使用时将光标向下划Dock会自动弹出显示。这个显示或隐藏会有一点点（大概1秒左右）的延迟，使用下面的方法可以消除这个延迟：</p><p>打开终端，输入代码：</p><pre class="line-numbers language-bash"><code class="language-bash">defaults <span class="token function">write</span> com.apple.Dock autohide-delay -float 0 <span class="token operator">&amp;&amp;</span> <span class="token function">killall</span> Dock<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后输入密码，就可以快速的隐藏和显示Dock栏了。</p><p>如果想恢复成以前的延迟速度，可以在终端输入一下代码：</p><pre class="line-numbers language-bash"><code class="language-bash">defaults delete com.apple.Dock autohide-delay <span class="token operator">&amp;&amp;</span> <span class="token function">killall</span> Dock<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="Tomcat中文乱码问题"><a href="#Tomcat中文乱码问题" class="headerlink" title="Tomcat中文乱码问题"></a>Tomcat中文乱码问题</h2><p>使用Homebrew安装的Tomcat会有中文乱码的问题</p><ul><li>解决方案，修改Tomcat的启动脚本 <code>tomcat_dir/bin/catclina.sh</code></li></ul><p>把</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token keyword">if</span> <span class="token punctuation">[</span> -z <span class="token string">"<span class="token variable">$LOGGING_MANAGER</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>  LOGGING_MANAGER<span class="token operator">=</span><span class="token string">"-Djava.util.logging.manager=org.apache.juli.ClassLoaderLogManager"</span><span class="token keyword">fi</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>修改为</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token keyword">if</span> <span class="token punctuation">[</span> -z <span class="token string">"<span class="token variable">$LOGGING_MANAGER</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>  LOGGING_MANAGER<span class="token operator">=</span><span class="token string">"-Djava.util.logging.manager=org.apache.juli.ClassLoaderLogManager -Dfile.encoding=UTF-8"</span><span class="token keyword">fi</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> Mac </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo安装教程</title>
      <link href="/posts/41882.html"/>
      <url>/posts/41882.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>本项目基于macOS（Windows也同样适用）</p></blockquote><h2 id="0-前言"><a href="#0-前言" class="headerlink" title="0. 前言"></a>0. 前言</h2><p>使用github pages服务搭建博客的好处有：</p><blockquote><ol><li><p>全是静态文件，访问速度快；</p></li><li><p>免费方便，不用花一分钱就可以搭建一个自由的个人博客，不需要服务器不需要后台；</p></li><li><p>可以随意绑定自己的域名，不仔细看的话根本看不出来你的网站是基于github的；</p></li><li><p>数据绝对安全，基于github的版本管理，想恢复到哪个历史版本都行；</p></li><li><p>博客内容可以轻松打包、转移、发布到其它平台；</p></li><li><p>等等；</p></li></ol></blockquote><h2 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1. 准备工作"></a>1. 准备工作</h2><ol><li><p>首先安装git、node，Mac需先安装Homebrew，Windows可以去<a href="http://nodejs.cn" target="_blank" rel="noopener">node官网</a>和<a href="https://git-scm.com" target="_blank" rel="noopener">git官网</a>下载安装</p><pre class="line-numbers language-sh"><code class="language-sh">brew install gitbrew install node<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>配置SSH key，用于连接GitHub上传博客</p><pre class="line-numbers language-sh"><code class="language-sh">cd ~/.ssh #检查本机已存在的ssh密钥<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>如果提示：No such file or directory 说明你是第一次使用git。</p><pre class="line-numbers language-bash"><code class="language-bash">ssh-keygen -t rsa -C <span class="token string">"你的邮箱地址"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>第一次回车确认生成路径，第二次会车输入密码，第三次回车确认密码；这个密码pull或push的时候会用到，当然也可以为空</p><p><img src="/medias/loading.gif" data-original="https://sky03-blog-images.oss-cn-beijing.aliyuncs.com/2019-3-7/2019-03-07%2013.03.24.png" alt="SSH"></p></li><li><p>生成的密钥一般在用户目录下，打开用户目录，找到<code>.ssh/id_rsa.pub</code>文件，记事本打开并复制里面的内容，打开你的github主页，进入个人设置 -&gt; SSH and GPG keys -&gt; New SSH key: </p><p>将刚复制的内容粘贴到key那里，title随便填，保存。</p></li><li><p>测试是否成功</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">ssh</span> -T git@github.com  <span class="token comment" spellcheck="true">#注意邮箱地址不用改</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>有密码的会提示输入密码，就是刚才自己设置的密码</p><p>如果提示<code>Are you sure you want to continue connecting (yes/no)?</code>，输入yes，然后会看到：</p><blockquote><p>Hi skyls03! You’ve successfully authenticated, but GitHub does not provide shell access.</p></blockquote><p>看到这个信息说明SSH已配置成功！<br>此时你还需要配置：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> config --global user.name <span class="token string">"skyls03"</span>  <span class="token comment" spellcheck="true"># 你的github用户名，非昵称</span><span class="token function">git</span> config --global user.email  <span class="token string">"skyls03@qq.com"</span>  <span class="token comment" spellcheck="true"># 填写你的github注册邮箱</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这个是提交的时候的一种身份声明，说明你是谁。</p></li></ol><h2 id="配置Hexo"><a href="#配置Hexo" class="headerlink" title="配置Hexo"></a>配置Hexo</h2><p>Hexo官网：<a href="http://hexo.io" target="_blank" rel="noopener">http://hexo.io</a></p><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>由于github pages存放的都是静态文件，博客存放的不只是文章内容，还有文章列表、分类、标签、翻页等动态内容，假如每次写完一篇文章都要手动更新博文目录和相关链接信息，相信谁都会疯掉，所以hexo所做的就是将这些md文件都放在本地，每次写完文章后调用写好的命令来批量完成相关页面的生成，然后再将有改动的页面提交到github。</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>执行命令：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-cli -g<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="初始化博客"><a href="#初始化博客" class="headerlink" title="初始化博客"></a>初始化博客</h3><p>cd到你电脑上放博客的位置(必需是空文件夹,注意是否包含隐藏文件)，然后再初始化</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">cd</span> /Users/sky03/Bloghexo init<span class="token function">npm</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>然后生成静态博客文件</p><pre class="line-numbers language-bash"><code class="language-bash">hexo g<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>本地预览博客</p><pre class="line-numbers language-bash"><code class="language-bash">hexo s<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在浏览器中输入 <code>http://localhost:4000</code><br>如果出现以下画面就说明成功了！<br><img src="/medias/loading.gif" data-original="https://sky03-blog-images.oss-cn-beijing.aliyuncs.com/2019-3-7/2019-03-07%2013.42.04.png" alt="HEXO"></p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac终端配置</title>
      <link href="/posts/33696.html"/>
      <url>/posts/33696.html</url>
      
        <content type="html"><![CDATA[<h2 id="安装Homebrew"><a href="#安装Homebrew" class="headerlink" title="安装Homebrew"></a>安装Homebrew</h2><p>终端执行代码：</p><pre class="line-numbers language-bash"><code class="language-bash">/usr/bin/ruby -e <span class="token string">"<span class="token variable"><span class="token variable">$(</span>curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install<span class="token variable">)</span></span>"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或者去<a href="https://brew.sh/" target="_blank" rel="noopener">Homebrew官网</a>查看安装命令</p><p>一般会自动安装Command Line Tools for Xcode（安装Homebrew必需的插件）</p><h3 id="Homebrew常用语句"><a href="#Homebrew常用语句" class="headerlink" title="Homebrew常用语句"></a>Homebrew常用语句</h3><p>搜索：<code>brew search &lt;SoftwareName&gt;</code></p><p>更新：<code>brew install &lt;SoftwareName&gt;</code></p><p>卸载：<code>brew uninstall &lt;SoftwareName&gt;</code></p><p>显示已安装软件: <code>brew ls(list)</code></p><p>显示软件的信息：<code>brew info &lt;SoftWareName&gt;</code></p><p>Homebrew其他使用命令可以参考 <a href="https://www.jianshu.com/p/de6f1d2d37bf" target="_blank" rel="noopener">https://www.jianshu.com/p/de6f1d2d37bf</a></p><h3 id="使用brew-services管理服务开机启动"><a href="#使用brew-services管理服务开机启动" class="headerlink" title="使用brew services管理服务开机启动"></a>使用brew services管理服务开机启动</h3><p>GitHub: <a href="https://github.com/Homebrew/homebrew-services" target="_blank" rel="noopener">https://github.com/Homebrew/homebrew-services</a></p><p>一般macOS使软件开机自启的命令一般是 <code>launchctl</code>命令加载开机自动运行服务，使用<code>brew service</code>可以简化操作。</p><ul><li><p>launchctl的配置方式，以MySQL为例：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">ln</span> -sfv /usr/local/opt/mysql/*.plist ~/Library/LaunchAgentslaunchctl load ~/Library/LaunchAgents/homebrew.mxcl.mysql.plist<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>如使用brew service可以简化为:</p><pre class="line-numbers language-bash"><code class="language-bash">brew services start mysql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><p><img src="/medias/loading.gif" data-original="https://sky03-blog-images.oss-cn-beijing.aliyuncs.com/blog-img/20190403172950.png" alt></p><h4 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h4><pre class="line-numbers language-bash"><code class="language-bash">brew services list  <span class="token comment" spellcheck="true"># 查看使用brew安装的服务列表</span>brew services run formula<span class="token operator">|</span>--all  <span class="token comment" spellcheck="true"># 启动服务（仅启动不注册）</span>brew services start formula<span class="token operator">|</span>--all  <span class="token comment" spellcheck="true"># 启动服务，并注册开机启动</span>brew services stop formula<span class="token operator">|</span>--all   <span class="token comment" spellcheck="true"># 停止服务，并取消注册开机启动</span>brew services restart formula<span class="token operator">|</span>--all  <span class="token comment" spellcheck="true"># 重启服务，并注册开机启动</span>brew services cleanup  <span class="token comment" spellcheck="true"># 清除已卸载应用的无用的配置</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="plist配置文件存放目录"><a href="#plist配置文件存放目录" class="headerlink" title=".plist配置文件存放目录"></a>.plist配置文件存放目录</h4><ol><li><p>开机自启存放目录，需要sudo</p><pre class="line-numbers language-bash"><code class="language-bash">/Library/LaunchDaemons<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>用户登录后自启存放目录</p><pre class="line-numbers language-bash"><code class="language-bash">~/Library/LaunchAgents<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><p>可以在homebrew.mxcl.kafka.plist文件中找到服务路径、启动参数、日志路径等</p><h2 id="安装ZSH"><a href="#安装ZSH" class="headerlink" title="安装ZSH"></a>安装ZSH</h2><ol><li><p>直接用Homebrew安装zsh：</p><pre class="line-numbers language-bash"><code class="language-bash">brew <span class="token function">install</span> zsh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>接着使zsh生效</p><p>先使用命令</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">cat</span> /etc/shells<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看/etc/shells文件中有没有</p><pre class="line-numbers language-bash"><code class="language-bash">/usr/local/bin/zsh或者/bin/zsh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如果没有就用<code>vim /etc/shells</code>加上；如果有，就执行下一命令使zsh生效：</p><pre class="line-numbers language-bash"><code class="language-bash">chsh -s /usr/local/bin/zsh或者chsh -s /bin/zsh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>安装oh-my-zsh</p><p>安装oh-my-zsh需要使用git工具，先安装git:</p><pre class="line-numbers language-bash"><code class="language-bash">brew <span class="token function">install</span> <span class="token function">git</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在执行以下代码：（如果失效，可以去查看<a href="https://github.com/robbyrussell/oh-my-zsh" target="_blank" rel="noopener">oh-my-zsh</a>开源项目）</p><p>via curl</p><pre class="line-numbers language-bash"><code class="language-bash">sh -c <span class="token string">"<span class="token variable"><span class="token variable">$(</span>curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh<span class="token variable">)</span></span>"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>via wget</p><pre class="line-numbers language-bash"><code class="language-bash">sh -c <span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token function">wget</span> https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -<span class="token variable">)</span></span>"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>最终效果如图：</p><p><img src="/medias/loading.gif" data-original="https://sky03-blog-images.oss-cn-beijing.aliyuncs.com/19-3-5-terminal-images/2019-03-05%2018.34.21.png" alt="oh-my-zsh"></p></li><li><p>关于配置文件</p><p>默认Shell的<del>/.bashrc文件默认不再加载了，替代的是</del>/.zlogin和~/.zshrc。</p></li></ol><h2 id="配置Mac终端iTerm2（powerlevel9k）"><a href="#配置Mac终端iTerm2（powerlevel9k）" class="headerlink" title="配置Mac终端iTerm2（powerlevel9k）"></a>配置Mac终端iTerm2（powerlevel9k）</h2><p>经过以上配置已经很完美了<br>现在缺少一个很漂亮的主题</p><p>首先创建一个暂存文件夹,然后进入这个文件夹，在克隆iTerm2的配色方案，依次执行以下三行代码：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">mkdir</span> tmp<span class="token function">cd</span> tmp<span class="token function">git</span> clone https://github.com/MartinSeeler/iterm2-material-design.git<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>然后在该目录双击’<code>material-design-colors.itermcolors</code>‘文件，点确定！<br>然后rm -rf删库跑路(tmp)</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">cd</span> <span class="token punctuation">..</span><span class="token function">rm</span> -rf tmp/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>打开iTerm2 <code>command+,</code> 打开设置-&gt;Profiles-&gt;Colors-&gt;Color Presets-&gt;material-design-colors-&gt;command+W</p><p>安装powerlevel9k：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> clone https://github.com/bhilburn/powerlevel9k.git ~/.oh-my-zsh/custom/themes/powerlevel9k<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>修改 ~/.zshrc 配置文件，配置该主题</p><pre class="line-numbers language-bash"><code class="language-bash">vim ~/.zshrc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在里面设置主题</p><pre class="line-numbers language-bash"><code class="language-bash">ZSH_THEME<span class="token operator">=</span><span class="token string">"powerlevel9k/powerlevel9k"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>重启终端，会发现有些字符显示乱码</p><p><img src="/medias/loading.gif" data-original="https://sky03-blog-images.oss-cn-beijing.aliyuncs.com/19-3-5-terminal-images/2019-03-05%2021.31.47.png" alt="Terminal"></p><p>这时候需要安装<a href="https://github.com/ryanoasis/nerd-fonts" target="_blank" rel="noopener">Nerd</a>字体</p><p>安装可能很慢可以使用以下安装命令：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">cd</span> ~/Library/Fonts <span class="token operator">&amp;&amp;</span> curl -fLo <span class="token string">"Droid Sans Mono for Powerline Nerd Font Complete.otf"</span> https://github.com/ryanoasis/nerd-fonts/raw/master/patched-fonts/DroidSansMono/complete/Droid%20Sans%20Mono%20Nerd%20Font%20Complete.otf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装完字体后更改iTerm2终端字体 搜索nerd选择就行了<br>安装成功后就是这样的：<br><img src="/medias/loading.gif" data-original="https://sky03-blog-images.oss-cn-beijing.aliyuncs.com/19-3-5-terminal-images/2019-03-05%2022.26.34.png" alt="Terminal"></p><p>接下来配置powerlevel9k主题</p><pre class="line-numbers language-bash"><code class="language-bash">vim ~/.zshrc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在主题<code>ZSH_THEME=xxxxxxx</code>前面加上</p><pre class="line-numbers language-bash"><code class="language-bash">POWERLEVEL9K_MODE<span class="token operator">=</span><span class="token string">"nerdfont-complete"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在最后添加以下内容：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># ================= powerlevel9k Settings =================</span><span class="token comment" spellcheck="true"># Please only use this battery segment if you have material icons in your nerd font (or font)</span><span class="token comment" spellcheck="true"># Otherwise, use the font awesome one in "User Segments"</span>POWERLEVEL9K_PROMPT_ON_NEWLINE<span class="token operator">=</span>truePOWERLEVEL9K_PROMPT_ADD_NEWLINE<span class="token operator">=</span>truePOWERLEVEL9K_RPROMPT_ON_NEWLINE<span class="token operator">=</span>truePOWERLEVEL9K_SHORTEN_DIR_LENGTH<span class="token operator">=</span>2POWERLEVEL9K_SHORTEN_STRATEGY<span class="token operator">=</span><span class="token string">"truncate_beginning"</span>POWERLEVEL9K_RVM_BACKGROUND<span class="token operator">=</span><span class="token string">"black"</span>POWERLEVEL9K_RVM_FOREGROUND<span class="token operator">=</span><span class="token string">"249"</span>POWERLEVEL9K_RVM_VISUAL_IDENTIFIER_COLOR<span class="token operator">=</span><span class="token string">"red"</span>POWERLEVEL9K_TIME_BACKGROUND<span class="token operator">=</span><span class="token string">"black"</span>POWERLEVEL9K_TIME_FOREGROUND<span class="token operator">=</span><span class="token string">"249"</span>POWERLEVEL9K_TIME_FORMAT<span class="token operator">=</span><span class="token string">"\UF43A %D{%I:%M  \UF133  %m.%d.%y}"</span>POWERLEVEL9K_RVM_BACKGROUND<span class="token operator">=</span><span class="token string">"black"</span>POWERLEVEL9K_RVM_FOREGROUND<span class="token operator">=</span><span class="token string">"249"</span>POWERLEVEL9K_RVM_VISUAL_IDENTIFIER_COLOR<span class="token operator">=</span><span class="token string">"red"</span>POWERLEVEL9K_STATUS_VERBOSE<span class="token operator">=</span>falsePOWERLEVEL9K_VCS_CLEAN_FOREGROUND<span class="token operator">=</span><span class="token string">'black'</span>POWERLEVEL9K_VCS_CLEAN_BACKGROUND<span class="token operator">=</span><span class="token string">'green'</span>POWERLEVEL9K_VCS_UNTRACKED_FOREGROUND<span class="token operator">=</span><span class="token string">'black'</span>POWERLEVEL9K_VCS_UNTRACKED_BACKGROUND<span class="token operator">=</span><span class="token string">'yellow'</span>POWERLEVEL9K_VCS_MODIFIED_FOREGROUND<span class="token operator">=</span><span class="token string">'white'</span>POWERLEVEL9K_VCS_MODIFIED_BACKGROUND<span class="token operator">=</span><span class="token string">'black'</span>POWERLEVEL9K_COMMAND_EXECUTION_TIME_BACKGROUND<span class="token operator">=</span><span class="token string">'black'</span>POWERLEVEL9K_COMMAND_EXECUTION_TIME_FOREGROUND<span class="token operator">=</span><span class="token string">'blue'</span>POWERLEVEL9K_FOLDER_ICON<span class="token operator">=</span><span class="token string">''</span>POWERLEVEL9K_STATUS_OK_IN_NON_VERBOSE<span class="token operator">=</span>truePOWERLEVEL9K_STATUS_VERBOSE<span class="token operator">=</span>falsePOWERLEVEL9K_COMMAND_EXECUTION_TIME_THRESHOLD<span class="token operator">=</span>0POWERLEVEL9K_VCS_UNTRACKED_ICON<span class="token operator">=</span><span class="token string">'\u25CF'</span>POWERLEVEL9K_VCS_UNSTAGED_ICON<span class="token operator">=</span><span class="token string">'\u00b1'</span>POWERLEVEL9K_VCS_INCOMING_CHANGES_ICON<span class="token operator">=</span><span class="token string">'\u2193'</span>POWERLEVEL9K_VCS_OUTGOING_CHANGES_ICON<span class="token operator">=</span><span class="token string">'\u2191'</span>POWERLEVEL9K_VCS_COMMIT_ICON<span class="token operator">=</span><span class="token string">"\uf417"</span>POWERLEVEL9K_MULTILINE_FIRST_PROMPT_PREFIX<span class="token operator">=</span><span class="token string">"%F{blue}\u256D\u2500%f"</span>POWERLEVEL9K_MULTILINE_LAST_PROMPT_PREFIX<span class="token operator">=</span><span class="token string">"%F{blue}\u2570\uf460%f "</span>POWERLEVEL9K_CUSTOM_BATTERY_STATUS<span class="token operator">=</span><span class="token string">"prompt_zsh_battery_level"</span>POWERLEVEL9K_LEFT_PROMPT_ELEMENTS<span class="token operator">=</span><span class="token punctuation">(</span>context os_icon custom_internet_signal custom_battery_status_joined <span class="token function">ssh</span> root_indicator <span class="token function">dir</span> dir_writable vcs<span class="token punctuation">)</span>POWERLEVEL9K_RIGHT_PROMPT_ELEMENTS<span class="token operator">=</span><span class="token punctuation">(</span>command_execution_time  status  time<span class="token punctuation">)</span>HIST_STAMPS<span class="token operator">=</span><span class="token string">"mm/dd/yyyy"</span>DISABLE_UPDATE_PROMPT<span class="token operator">=</span>true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最终显示效果：</p><p><img src="/medias/loading.gif" data-original="https://sky03-blog-images.oss-cn-beijing.aliyuncs.com/19-3-5-terminal-images/2019-03-05%2022.58.28.png" alt="terminal"></p><h2 id="再安装两个插件："><a href="#再安装两个插件：" class="headerlink" title="再安装两个插件："></a>再安装两个插件：</h2><p>安装 autosuggestions（自动提示）</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> clone https://github.com/zsh-users/zsh-autosuggestions <span class="token variable">$ZSH_CUSTOM</span>/plugins/zsh-autosuggestions<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装 syntax-highlighting（动态高亮）</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> clone https://github.com/zsh-users/zsh-syntax-highlighting.git <span class="token variable">${ZSH_CUSTOM:-~/.oh-my-zsh/custom}</span>/plugins/zsh-syntax-highlighting<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在配置文件里启用插件：<br><code>vim ~/.zshrc</code></p><pre class="line-numbers language-bash"><code class="language-bash">plugins<span class="token operator">=</span><span class="token punctuation">(</span>    <span class="token function">git</span>    zsh-autosuggestions    zsh-syntax-highlighting<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 注意：zsh-syntax-highlighting 必须放在最后面（官方推荐）</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> Mac </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java之注解</title>
      <link href="/posts/26879.html"/>
      <url>/posts/26879.html</url>
      
        <content type="html"><![CDATA[<h2 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h2><ul><li>概念：说明程序的，给计算机看的</li><li>作用分类：<ol><li>编写文档：通过代码里标识的注解生成文档【生成doc文档】</li><li>代码分析：通过代码里标识的注解对代码进行分析【使用注解】</li><li>编译检查：通过代码里标识的注解让编译器能够实现基本的编译检查【Override】</li></ol></li></ul><h3 id="基本内置注解"><a href="#基本内置注解" class="headerlink" title="基本内置注解"></a>基本内置注解</h3><ul><li><p><code>@Override</code> :检测被该注解标注的方法<code>是否是继承自父类</code>（借口）的,如果不是，则报错</p></li><li><p><code>@Deprecated</code> :表示这个方法<code>已经过期</code>，不建议开发者使用。(暗示在将来某个不确定的版本，就有可能会取消掉)</p></li><li><p><code>@SuppressWarnings</code>:Suppress英文的意思是抑制的意思，这个注解的用处是<code>忽略警告信息</code>。</p><ul><li><p>这个注解是有参数的，对应参数及作用如下：  </p><p>1.deprecation：使用了不赞成使用的类或方法时的警告(使用@Deprecated使得编译器产生的警告)；</p><p>2.unchecked：执行了未检查的转换时的警告，例如当使用集合时没有用泛型 (Generics) 来指定集合保存的类型; 关闭编译器警告</p><p>3.fallthrough：当 Switch 程序块直接通往下一种情况而没有 Break 时的警告;</p><p>4.path：在类路径、源文件路径等中有不存在的路径时的警告;</p><p>5.serial：当在可序列化的类上缺少 serialVersionUID 定义时的警告;</p><p>6.finally：任何 finally 子句不能正常完成时的警告;</p><p>7.rawtypes 泛型类型未指明</p><p>8.unused 引用定义了，但是没有被使用</p><p>9.all：关于以上所有情况的警告。  </p></li><li><p>使用示范：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token string">"rawtypes"</span><span class="token punctuation">,</span> <span class="token string">"unused"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//注意不要带分号</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li><li><p><code>@FunctionalInterface</code>这是Java1.8 新增的注解，用于约定函数式接口。</p><p>函数式接口概念： 如果接口中只有一个抽象方法（可以包含多个默认方法或多个static方法），该接口称为函数式接口。函数式接口其存在的意义，主要是配合Lambda 表达式 来使用。</p></li></ul><h2 id="自定义注解"><a href="#自定义注解" class="headerlink" title="自定义注解"></a>自定义注解</h2><ul><li><p>格式：</p><pre class="line-numbers language-java"><code class="language-java">  元注解  <span class="token keyword">public</span> @<span class="token keyword">interface</span> 注解名称<span class="token punctuation">{</span>      属性<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>本质：注解本质上<code>就是一个接口</code>，该接口<code>默认继承Annotation接口</code></p><ul><li>public interface MyAnno extends java.lang.annotation.Annotation {}</li></ul></li><li><p>属性：接口中可以定义的成员方法</p><ul><li><p>要求：</p><ol><li><p>属性的返回值类型有下列取值：（注意没有void！）</p><ul><li>基本数据类型</li><li>String</li><li>枚举</li><li>注解</li><li>以上类型的数组</li></ul></li><li><p>定义了属性，在使用时需要给属性赋值</p><ol><li>如果定义属性时，可以用<code>default</code>关键字给属性默认初始化值；使用注解时，就可以不进行属性的赋值。</li><li>如果只有一个属性需要赋值，并且属性的名称是value，则value可以省略，直接定义值即可。</li><li>数组赋值时，值使用{}包裹。如果数组中只有一个值，则{}可以省略</li></ol></li></ol></li></ul></li><li><p>元注解：用于描述注解的注解</p><ul><li>@Target：描述注解能够作用的位置<ul><li>ElementType取值：<ul><li>TYPE：可以作用于类上</li><li>METHOD：可以作用于方法上</li><li>FIELD：可以作用于成员变量上</li></ul></li></ul></li><li>@Retention：描述注解被保留的阶段<ul><li>@Retention(RetentionPolicy.RUNTIME)：当前被描述的注解，会保留到class字节码文件中，并被JVM读取到</li></ul></li><li>@Documented：描述注解是否被抽取到api文档中</li><li>@Inherited：描述注解是否被子类继承</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java之反射</title>
      <link href="/posts/31610.html"/>
      <url>/posts/31610.html</url>
      
        <content type="html"><![CDATA[<h3 id="Java反射：框架设计的灵魂"><a href="#Java反射：框架设计的灵魂" class="headerlink" title="Java反射：框架设计的灵魂"></a>Java反射：框架设计的灵魂</h3><blockquote><p>设计框架用的，学会能对框架有更好的理解</p></blockquote><ul><li>反射：将类的各个组成部分封装为其他对象，这就是反射机制<ul><li>好处：<ol><li>可以在程序运行过程中，操作这些对象</li><li>可以解耦，提高程序的可拓展性</li></ol></li></ul></li></ul><h3 id="类对象"><a href="#类对象" class="headerlink" title="类对象"></a>类对象</h3><h4 id="什么是类对象"><a href="#什么是类对象" class="headerlink" title="什么是类对象"></a>什么是类对象</h4><blockquote><p><code>类对象</code>，就是用于描述这种类，都有什么属性，什么方法的</p></blockquote><p>作用：<br>从class文件里提取出一个类的<code>成员变量</code>、<code>构造方法</code>、<code>成员方法</code>（主要）<br>并将其封装成数组<code>Field[] fields</code>、<code>Constructor[] cons</code>、<code>Method[] methods</code></p><h4 id="获取类对象方式"><a href="#获取类对象方式" class="headerlink" title="获取类对象方式"></a>获取类对象方式</h4><p>获取类对象有3种方式</p><ol><li>Class.forName(“全类名”)    //将字节码文件加载进内存，返回Class对象<ul><li>全类名，就是包名.类名</li><li>多用于配置文件，将类名定义在配置文件中。读取文件，加载类</li></ul></li><li>类名.class                 //通过类名的属性class获取<ul><li>多用于参数的传递</li></ul></li><li>已经实例对象.getClass()     //getClass()在Object类中定义着（换句话说：所有类都这个方法）<ul><li>多用于对象的获取字节码的方式</li></ul></li></ol><p><code>在一个JVM中，一种类，只会有一个类对象存在。所以以上三种方式取出来的类对象，都是一样的</code>。<br>方法示例：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> reflection<span class="token punctuation">;</span><span class="token keyword">import</span> charactor<span class="token punctuation">.</span>Hero<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestReflection</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>            String className <span class="token operator">=</span> <span class="token string">"charactor.Hero"</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                Class <span class="token class-name">pClass1</span><span class="token operator">=</span>Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>className<span class="token punctuation">)</span><span class="token punctuation">;</span>                Class <span class="token class-name">pClass2</span><span class="token operator">=</span>Hero<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>                Class <span class="token class-name">pClass3</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Hero</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>pClass1<span class="token operator">==</span>pClass2<span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>pClass1<span class="token operator">==</span>pClass3<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// TODO Auto-generated catch block</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="获取类对象的时候，会导致类属性被初始化"><a href="#获取类对象的时候，会导致类属性被初始化" class="headerlink" title="获取类对象的时候，会导致类属性被初始化"></a>获取类对象的时候，会导致类属性被初始化</h4><p>无论什么途径获取类对象，都会导致静态属性被初始化，而且只会执行一次。（除了直接使用 Class c = Hero.class 这种方式，这种方式不会导致静态属性被初始化）  </p><h3 id="类对象功能（即获取类的各个部分）"><a href="#类对象功能（即获取类的各个部分）" class="headerlink" title="类对象功能（即获取类的各个部分）"></a>类对象功能（即获取类的各个部分）</h3><ol><li><p>获取成员变量们</p><ul><li><p>Field[] getFields()   ：获取所有public修饰的成员变量，包括<code>从父类继承来</code>的变量</p></li><li><p>Field getField(String name) ：获取指定名称的public修饰的成员变量，包括<code>从父类继承来</code>的</p></li><li><p>Field[] getDeclaredFields() ：获取所有的成员变量，不考虑修饰符，但是<code>不能获取继承来</code>的字段</p></li><li><p>Field getDeclaredField(String name) ：获取指定名称的成员变量，不考虑修饰符，但是<code>不能获取继承来</code>的字段</p></li></ul></li><li><p>获取构造方法们</p><ul><li><p>Constructor&lt;?&gt;[] getconstructors()</p></li><li><p>Constructor<?> getconstructor(类<?>… parameterTypes)</p></li><li><p>Constructor<t> getDeclaredconstructor()</t></p></li><li><p>Constructor&lt;?&gt;[] getDeclaredconstructors()</p></li></ul></li><li><p>获取成员方法们</p><ul><li><p>Method[] getMethods()</p></li><li><p>Method getMethod(String name,类)</p></li><li><p>Method[] getDeclaredMethods()</p></li><li><p>Method getDeclaredMethod(String name,类)</p></li></ul></li><li><p>获取类名</p><ul><li>String getName()</li></ul></li></ol><h3 id="获取类的各个部分之后，进行的操作"><a href="#获取类的各个部分之后，进行的操作" class="headerlink" title="获取类的各个部分之后，进行的操作"></a>获取类的各个部分之后，进行的<strong>操作</strong></h3><ul><li><p>Field:成员变量</p><ul><li><p>操作</p><ol><li><p>设置值</p><ul><li>void set(Object obj,Object value)</li></ul></li><li><p>获取值</p><ul><li>get(Object obj)</li></ul></li><li><p>忽略访问权限修饰符的安全检查</p><ul><li>setAccessible(true) :暴力反射（用于<code>访问和修改</code>private修饰的成员变量的值，对于其他类的部分也能使用）</li></ul></li></ol></li></ul></li><li><p>Constructor:构造方法</p><ul><li><p>创建对象：</p><ul><li><p>用获取到的构造器调用newInstance()</p></li><li><p>如果使用空参数构造方法创建对象，操作可以简化：Class对象的newInstance()方法（Object提供的）</p></li></ul></li></ul></li><li><p>Method:方法对象</p><ul><li><p>执行方法</p><ul><li>Object invoke(Object obj,Object args)</li></ul></li><li><p>获取方法名称：</p><ul><li>String getName:获取方法名</li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 高级 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Junit测试</title>
      <link href="/posts/38653.html"/>
      <url>/posts/38653.html</url>
      
        <content type="html"><![CDATA[<h2 id="Junit单元测试"><a href="#Junit单元测试" class="headerlink" title="Junit单元测试"></a>Junit单元测试</h2><ul><li><p>测试分类：</p><ol><li>黑盒测试：不需要写代码，给输入值，看程序是否能够输出期望的值</li><li>白盒测试：需要写代码，关注程序具体的执行流程</li></ol></li><li><p>Junit使用：白盒测试</p><ul><li><p>步骤：</p><ol><li><p>定义一个测试类（测试用例）</p><ul><li>建议命名规则：<ul><li>测试类名：被测试的类名Test      CalculatorTest</li><li>包名：xxx.xxxx.test        com.sky03.test</li></ul></li></ul></li><li><p>定义测试方法：可以独立运行</p><ul><li>建议：<ul><li>方法名：test测试的方法名        eg： testAdd()</li><li>返回值：void</li><li>参数列表：空参</li></ul></li></ul></li><li><p>给要测试的方法前加@Test</p></li><li><p>导入junit依赖环境</p></li></ol></li><li><p>判断结果（idea下）：</p><ul><li>红色（横杠）：失败</li><li>绿色（对勾）：成功</li><li>一般使用断言操作来处理结果<ul><li>Assert.assertEquals(期望的结果，运算的结果);</li></ul></li></ul></li><li><p>补充：</p><ul><li>@Before:<ul><li>修饰的方法会在测试方法<code>执行之前</code>被自动执行；</li></ul></li><li>@After:<ul><li>修饰的方法会在测试方法<code>执行之后</code>自动执行；</li></ul></li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring</title>
      <link href="/posts/18155.html"/>
      <url>/posts/18155.html</url>
      
        <content type="html"><![CDATA[<h2 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h2><h3 id="Spring概述"><a href="#Spring概述" class="headerlink" title="Spring概述"></a>Spring概述</h3><p>Spring 是分层的 Java SE/EE 应用 全栈式（full-stack）轻量级开源框架，以 <code>IoC</code>(Inverse Of Control: 控制反转)和 <code>AOP</code>(Aspect Oriented Programming:面向切面编程)为内核，提供了表现层 Spring MVC 和持久层 Spring JDBC 以及业务层事务管理等众多的企业级应用技术，还能整合开源世界众多 著名的第三方框架和类库，逐渐成为使用最多的 Java EE 企业应用开源框架。</p><h3 id="Spring的发展历程"><a href="#Spring的发展历程" class="headerlink" title="Spring的发展历程"></a>Spring的发展历程</h3><p>1997 年 IBM 提出了 EJB 的思想<br>Spring 诞生于2002，成型与2003，作者是Rod Johnson，他写了两本书  </p><ul><li><code>《Expert One-to-One J2EE Desion and Development》</code>  </li><li><code>《Expert One-to-One J2EE Development without EJB》</code>(2004)  </li></ul><p>阐述了 J2EE 开发不使用 EJB 的解决方式(Spring 雏形)<br>2017年9月份发布了Spring的最新版本Spring 5.0通用版(GA)  JDK版本要求1.8及以上</p><h3 id="Spring的优势"><a href="#Spring的优势" class="headerlink" title="Spring的优势"></a>Spring的优势</h3><h4 id="方便解耦，简化开发"><a href="#方便解耦，简化开发" class="headerlink" title="方便解耦，简化开发"></a>方便解耦，简化开发</h4><p>   通过 Spring 提供的 IoC 容器，可以将对象间的依赖关系交由 Spring 进行控制，避免硬编码所造成的过度程序耦合。用户也不必再为单例模式类、属性文件解析等这些很底层的需求编写代码，可以更专注于上层的应用。</p><h4 id="AOP-编程的支持"><a href="#AOP-编程的支持" class="headerlink" title="AOP 编程的支持"></a>AOP 编程的支持</h4><p>   通过 Spring 的 AOP 功能，方便进行面向切面的编程，许多不容易用传统OOP实现的功能可以通过 AOP 轻松应付。</p><h4 id="声明式事务的支持"><a href="#声明式事务的支持" class="headerlink" title="声明式事务的支持"></a>声明式事务的支持</h4><p>   可以将我们从单调烦闷的事务管理代码中解脱出来，通过声明式方式灵活的进行事务的管理，提高开发效率和质量。</p><h4 id="方便程序的测试"><a href="#方便程序的测试" class="headerlink" title="方便程序的测试"></a>方便程序的测试</h4><p>   可以用非容器依赖的编程方式进行几乎所有的测试工作，测试不再是昂贵的操作，而是随手可做的事情。</p><h4 id="方便集成各种优秀框架"><a href="#方便集成各种优秀框架" class="headerlink" title="方便集成各种优秀框架"></a>方便集成各种优秀框架</h4><p>   Spring 可以降低各种框架的使用难度，提供了对各种优秀框架(Struts、Hibernate、Hessian、Quartz等)的直接支持。</p><h4 id="降低-JavaEE-API-的使用难度"><a href="#降低-JavaEE-API-的使用难度" class="headerlink" title="降低 JavaEE API 的使用难度"></a>降低 JavaEE API 的使用难度</h4><p>   Spring 对 JavaEE API(如 JDBC、JavaMail、远程调用等)进行了薄薄的封装层，使这些API的使用难度大为降低。</p><h4 id="Spring-源码是经典学习范例"><a href="#Spring-源码是经典学习范例" class="headerlink" title="Spring 源码是经典学习范例"></a>Spring 源码是经典学习范例</h4><p>   Spring 的源代码设计精妙、结构清晰、匠心独用，处处体现着大师对 Java 设计模式灵活运用以及对 Java 技术的高深造诣。它的源代码无意是 Java 技术的最佳实践的范例。</p><h3 id="Spring的体系结构"><a href="#Spring的体系结构" class="headerlink" title="Spring的体系结构"></a>Spring的体系结构</h3><p><img src="/medias/loading.gif" data-original="https://sky03-blog-images.oss-cn-beijing.aliyuncs.com/blog-img/spring-overview.png" alt></p><h2 id="IoC的概念及作用"><a href="#IoC的概念及作用" class="headerlink" title="IoC的概念及作用"></a>IoC的概念及作用</h2><h3 id="什么是程序的耦合"><a href="#什么是程序的耦合" class="headerlink" title="什么是程序的耦合"></a>什么是程序的耦合</h3><p><code>耦合性</code>(Coupling)，也叫耦合度，是对模块间关联程度的度量。</p><p>简单来说，耦合就是：程序间的依赖关系。它包括：</p><ul><li>类之间的依赖</li><li>方法间的依赖</li></ul><p>程序间的耦合不可能完全消除，只能降低程序间的依赖关系，这叫做<code>解耦</code></p><h3 id="解决程序耦合的思路"><a href="#解决程序耦合的思路" class="headerlink" title="解决程序耦合的思路"></a>解决程序耦合的思路</h3><p>开发中要做到：<code>编译期不依赖，运行时才依赖</code></p><p>比如：</p><ul><li><p>数据库驱动加载，我们一般都这么写：</p><pre class="line-numbers language-java"><code class="language-java">Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.mysql.jdbc.Driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//参数是字符串，利用反射加载的数据库驱动</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>其实注册驱动可以这么写：</p><pre class="line-numbers language-java"><code class="language-java">DriverManager<span class="token punctuation">.</span><span class="token function">registerDriver</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">com<span class="token punctuation">.</span>mysql<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span>Driver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>为什么我们平常都按照上面的写呢？</p><p>因为下面这句带了new关键字，如果数据库驱动文件不在了，程序在编译的时候就通过不了；而上面那句是按照字符串来的，就算数据库驱动文件不在，也可以通过编译，这就降低了程序间的耦合度。</p></li></ul><h3 id="工厂模式解耦"><a href="#工厂模式解耦" class="headerlink" title="工厂模式解耦"></a>工厂模式解耦</h3><p>在我们普通的Servlet、Service、Dao三层架构中，表现层Servlet必须要new一个业务层Service的实现类，而业务层Service也必须要new一个持久层Dao的实现类；这就出现了耦合！解决办法是用工厂模式解耦！</p><h3 id="控制反转（IOC）"><a href="#控制反转（IOC）" class="headerlink" title="控制反转（IOC）"></a>控制反转（IOC）</h3><p><code>控制反转</code>是一种设计思想。</p><p>就是将你设计好的对象交给Spring控制new出来，而不是由你自己直接new，从而达到降低耦合的目的。所以叫做控制反转。</p><h2 id="IOC的使用"><a href="#IOC的使用" class="headerlink" title="IOC的使用"></a>IOC的使用</h2><h3 id="准备spring的开发包"><a href="#准备spring的开发包" class="headerlink" title="准备spring的开发包"></a>准备spring的开发包</h3><p>Spring官网：<a href="https://spring.io/" target="_blank" rel="noopener">https://spring.io/</a></p><p>jar包下载地址：<a href="https://repo.spring.io/release/org/springframework/spring/" target="_blank" rel="noopener">https://repo.spring.io/release/org/springframework/spring/</a></p><h3 id="Spring项目入门"><a href="#Spring项目入门" class="headerlink" title="Spring项目入门"></a>Spring项目入门</h3><ol><li><p>首先创建简单的Servlet、Service、Dao三层架构的接口以及其实现类。</p></li><li><p>创建Spring的配置文件（叫什么都行，一般叫<code>applicationContext.xml</code>），记得导入约束。（idea可以直接new一个自带约束的Spring Config.xml文件）</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- id应该是随便写的，当然要能认识，class为bean的全类名 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userService<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>xyz.sky03.service.impl.UserServiceImpl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UserDao<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>xyz.sky03.dao.impl.UserDaoImpl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>获取Spring new的bean对象</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> xyz<span class="token punctuation">.</span>sky03<span class="token punctuation">.</span>servlet<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>ApplicationContext<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>support<span class="token punctuation">.</span>ClassPathXmlApplicationContext<span class="token punctuation">;</span><span class="token keyword">import</span> xyz<span class="token punctuation">.</span>sky03<span class="token punctuation">.</span>dao<span class="token punctuation">.</span>IUserDao<span class="token punctuation">;</span><span class="token keyword">import</span> xyz<span class="token punctuation">.</span>sky03<span class="token punctuation">.</span>service<span class="token punctuation">.</span>IUserService<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServlet</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1.获取核心容器对象</span>        ApplicationContext ac<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"bean.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2.根据id获取Bean对象  以下两种方式都可以</span>        <span class="token comment" spellcheck="true">//这里没有返回指定类型，所以需要强转类型</span>        IUserService service <span class="token operator">=</span> <span class="token punctuation">(</span>IUserService<span class="token punctuation">)</span> ac<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"userService"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//这里第一个参数填配置文件中&lt;bean>的id，因为参数里指定了class，所以可以直接得到对应的类型</span>        IUserDao dao <span class="token operator">=</span> ac<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"UserDao"</span><span class="token punctuation">,</span> IUserDao<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ac<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>service<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>dao<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><p>其中：</p><ul><li><p><code>ApplicationContext</code>的三个常用实现类</p><ul><li><code>ClassPathXmlApplicationContext</code>：它可以加载类路径下的配置文件，不在加载不了（常用）</li><li><code>FileSystemXmlApplicationContext</code>：它可以加载磁盘任意路径下的配置文件（必须有访问权限）</li><li><code>AnnotationConfigApplicationContext</code>：它是用于读取注解创建容器的</li></ul></li><li><p>Spring的两种工厂类</p><ul><li><code>BeanFactory</code>：Spring 容器中的顶层接口<br><code>延迟加载</code>，调用getBean的时候，才会生成类的实例；单例对象适用。</li><li><code>ApplicationContext</code>：BeanFactory的子接口。（一般用这个）<br><code>立即加载</code>，加载配置文件的时候，就会将Spring管理的类全部实例化；多例对象适用；它还会根据创建的对象是多例还是单例，自动选择立即加载还是延迟加载。</li></ul></li><li><p>关于配置文件中 <code>&lt;bean&gt;</code>标签用id和name的区别</p><ul><li>id   ：使用了 <code>唯一约束</code>，里面 <code>不能有特殊字符</code> </li><li>name ：<code>没有唯一约束</code>（理论上可以出现重复，但实际开发中不能出现）<ul><li>命名上 <code>可以出现特殊字符</code> </li></ul></li><li>另外Spring和Struts1整合的时候：<ul><li>Struts1的id或name前面必须加个”/“，但是Spring的id前面是不能加”/“的</li><li>所以要用name！ like this：<code>&lt;bean name=&quot;/a1&quot; class=&quot;...&quot;&gt;</code></li></ul></li></ul></li></ul><h3 id="IOC中bean标签和管理对象细节"><a href="#IOC中bean标签和管理对象细节" class="headerlink" title="IOC中bean标签和管理对象细节"></a>IOC中bean标签和管理对象细节</h3><h4 id="创建bean的三种方式"><a href="#创建bean的三种方式" class="headerlink" title="创建bean的三种方式"></a>创建bean的三种方式</h4><ol><li><p>使用默认构造函数创建。</p><p> 在spring的配置文件中使用bean标签，配以id和class属性之后，且没有其他属性和标签时。采用的就是默认构造函数创建bean对象，此时如果类中没有默认构造函数，则对象无法创建。</p><pre class="line-numbers language-xml"><code class="language-xml"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userService<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>xyz.sky03.service.impl.UserServiceImpl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>使用普通工厂中的方法创建对象（使用某个类中的方法创建对象，并存入spring容器）</p><pre class="line-numbers language-xml"><code class="language-xml"> <span class="token comment" spellcheck="true">&lt;!-- 此bean有创建UserService的方法 --></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>instanceFactory<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>xyz.sky03.factory.InstanceFactory<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span> <span class="token comment" spellcheck="true">&lt;!-- 此bean用来调用上一个bean的创建UserService的方法--></span> <span class="token comment" spellcheck="true">&lt;!-- factory-bean指定从哪个bean来创建UserService，factory-method：从bean的哪个方法得到UserService对象--></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userService<span class="token punctuation">"</span></span> <span class="token attr-name">factory-bean</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>instanceFactory<span class="token punctuation">"</span></span> <span class="token attr-name">factory-method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getUserService<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>使用工厂中的静态方法创建对象（使用某个类中的静态方法创建对象，并存入spring容器)</p><pre class="line-numbers language-xml"><code class="language-xml"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userService<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>xyz.sky03.factory.StaticFactory<span class="token punctuation">"</span></span> <span class="token attr-name">factory-method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getUserService<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h4 id="bean对象的作用范围调整"><a href="#bean对象的作用范围调整" class="headerlink" title="bean对象的作用范围调整"></a>bean对象的作用范围调整</h4><ul><li>方法：使用bean标签的<code>scope</code>属性</li><li>作用：用于指定bean的作用范围</li><li>取值：常用的就是单例和多例<ul><li><code>singleton</code>：单例的（默认值）</li><li><code>prototype</code>：多例的</li><li><code>request</code>：作用于web应用的请求范围</li><li><code>session</code>：作用于web应用的会话范围</li><li><code>global-session</code>：作用于集群环境的会话（全局会划范围），当不是集群环境时，它就相当于<code>session</code>。</li></ul></li></ul><h4 id="bean对象的生命周期"><a href="#bean对象的生命周期" class="headerlink" title="bean对象的生命周期"></a>bean对象的生命周期</h4><ul><li>单例对象<ul><li>出生：当容器创建时对象出生</li><li>活着：只要容器还在，对象就一直活着</li><li>死亡：容器销毁，对象死亡</li><li>总结：单例对象的生命周期和容器相同</li></ul></li><li>多例对象<ul><li>出生：当我们使用对象时，Spring为我们创建</li><li>活着：对象只要是在使用过程中，就一直活着</li><li>死亡：当对象长时间不用，且没有别的对象引用时，由Java的垃圾回收器回收</li></ul></li><li>手动配置bean的生命周期<ul><li>在bean标签里有两个属性<ul><li><code>init-method</code>：用于指定Bean被初始化的时候执行的方法</li><li><code>destroy-method</code>：用于指定Bean被销毁的时候执行的方法<ul><li>Bean一般是单例创建，工厂关闭，所以会跳过destroy-method指定的方法</li></ul></li></ul></li></ul></li></ul><h2 id="依赖注入DI"><a href="#依赖注入DI" class="headerlink" title="依赖注入DI"></a>依赖注入DI</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>依赖注入（Dependency Injection）就是bean实体类构造函数为有参构造函数，这时候为了能创建bean对象，就需要对构造函数注入参数！</p><h3 id="依赖注入的方式"><a href="#依赖注入的方式" class="headerlink" title="依赖注入的方式"></a>依赖注入的方式</h3><h4 id="使用构造函数注入"><a href="#使用构造函数注入" class="headerlink" title="使用构造函数注入"></a>使用构造函数注入</h4><ul><li><p>使用<code>标签</code>：constructor-arg</p></li><li><p>标签使用的位置：bean标签的内部</p></li><li><p>标签的属性：</p><ul><li><p>type：根据要注入的数据的数据类型，来注入构造函数中对应的某个或某些参数；</p><ul><li>也就是说如果构造函数中有多个相同的数据类型，此属性就不适用了</li></ul></li><li><p>index：索引，指定要注入的属性给构造函数中对应索引的位置 （从0开始）</p></li><li><p>name：给构造函数中的指定名称的参数赋值 （常用）</p><p>==========以上三个用于指定给构造函数中哪个参数赋值=========</p></li><li><p>value：用于提供基本类型和String类型的数据</p><ul><li>如：日期类型，就不能用value来注入</li></ul></li><li><p>ref：用于指定其他的bean类型数据。它指的就是在Spring的IOC核心容器中出现过的bean对象</p></li></ul><p>示例：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userService<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>xyz.sky03.service.impl.UserServiceImpl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>泰斯特<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>18<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>birthday<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>now<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 配置一个日期对象 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>now<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>java.util.Date<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>优势：</p></li><li><p>保证一些必要的属性在Bean实例化时就得到设置，并且确保了Bean实例在实例化后就可以使用。</p></li><li><p>弊端：</p></li><li><p>改变了bean对象的实例化方式，使我们在创建对象时，即使用不到这些数据，也必须提供。</p></li></ul><h4 id="使用属性的Setter方法注入-（常用）"><a href="#使用属性的Setter方法注入-（常用）" class="headerlink" title="使用属性的Setter方法注入 （常用）"></a>使用属性的Setter方法注入 （常用）</h4><ul><li>标签：property</li><li>位置：bean标签的子标签</li><li>要求：<ul><li>要创建的bean要有其各个属性的Setter方法（不需要Getter方法）<ul><li>Spring只会检查Bean中是否有对应的Setter方法，至于Bean中是否有对应的属性变量则不做要求。</li></ul></li><li>提供一个无参的构造方法（必须！）<ul><li>假设bean类中显示定义了一个带参的构造函数，如public Bean(String test)，则需要同时提供一个默认构造函数public Bean()，否则使用属性注入时将抛出异常。</li></ul></li></ul></li><li>标签的属性<ul><li>name：用于指定注入时所调用的Setter方法名称，或其他bean的id</li><li>value：用于提供基本类型和String类型的数据</li><li>ref：用于指定其他的bean类型数据。它指的就是在Spring的IOC核心容器中出现过的bean对象</li></ul></li><li>原理：<ul><li>Spring先调用Bean的默认构造函数实例化Bean对象，然后通过反射的方式调用Setter方法注入属性值。</li></ul></li></ul><h4 id="复杂类型的注入（集合类型）"><a href="#复杂类型的注入（集合类型）" class="headerlink" title="复杂类型的注入（集合类型）"></a>复杂类型的注入（集合类型）</h4><ul><li>集合类型的参数 无论是value 还是ref 都不能注入！</li><li>正确的姿势是：</li><li>集合分两个结构 <code>List</code> 和 <code>Map</code> </li><li><code>List</code> 结构的集合在Setter属性注入的方式基础上，在property标签的内部使用以下标签<ul><li><code>list</code> 、<code>array</code> 、<code>set</code></li></ul></li><li><code>Map</code> 结构的集合，同理，在property标签的内部使用以下标签<ul><li><code>map</code> 、<code>props</code> 、</li></ul></li></ul><h4 id="使用注解注入"><a href="#使用注解注入" class="headerlink" title="使用注解注入"></a>使用注解注入</h4><h2 id="常用注解"><a href="#常用注解" class="headerlink" title="常用注解"></a>常用注解</h2><h3 id="创建bean对象"><a href="#创建bean对象" class="headerlink" title="创建bean对象"></a>创建bean对象</h3><ol><li><p>先在主配置文件上加入 <code>context</code> 的约束，再配置一个<code>&lt;context:component-scan&gt;</code>的标签，还有base-package的属性，用于告知Spring创建容器时要扫描的包（去找带<code>@Component</code>的注解）</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans        http://www.springframework.org/schema/beans/spring-beans.xsd        http://www.springframework.org/schema/context        http://www.springframework.org/schema/context/spring-context.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>xyz.sky03<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">context:</span>component-scan</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在bean的实体类上面加 <code>@Component</code> 注解，bean的id默认为bean的首字母小写的类名，也可以加参数指定id</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">"userService"</span><span class="token punctuation">)</span>或<span class="token annotation punctuation">@Component</span><span class="token punctuation">(</span><span class="token string">"userService"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//只有value属性时，可以省略不写</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>其他注解：</p><p>以下三个注解的作用和 <code>@Component</code> 一样，它们是Spring为我们提供的三层架构使用的注解，使我们的三层对象更加清晰</p><ul><li><code>@Controller</code> ：一般用于表现层</li><li><code>@Service</code> ：一般用于业务层</li><li><code>@Repository</code> ：一般用于持久层</li></ul></li></ol><h3 id="注入数据"><a href="#注入数据" class="headerlink" title="注入数据"></a>注入数据</h3><ul><li><p><code>@Autowired</code> </p><ul><li>作用：自动按照类型注入。只要Spring容器中有唯一的一个bean对象类型和要注入的变量类型匹配（包括其实现类），就可以注入成功！</li><li>但是当IOC容器有多个相同类型的bean时，Spring会自动根据要创建的对象名和IOC容器中的id匹配。</li><li>如果IOC容器中没有任何bean的类型和要注入的变量类型匹配，则会报错。</li><li>注解的位置：很多地方都能写。一般都是类的上面，或方法的上面。</li><li>不需要set方法。</li></ul></li><li><p><code>@Qualifier</code></p><ul><li><p>作用：在<code>@Autowired</code>的基础上再按照名称注入。</p></li><li><p>属性：value，用来指定注入的名称。</p></li><li><p>位置：在给类成员注入时无法单独使用，必须在前面加上<code>@Autowired</code> ，否则报错！</p></li><li><p>在给方法参数注入时可以单独使用</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Autowired</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"userDao"</span><span class="token punctuation">)</span><span class="token keyword">private</span> IUserDao userDao<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p><code>@Resource</code> </p><ul><li>作用：直接按照bean的id注入。它可以独立使用</li><li>属性：name，用来指定bean的id</li></ul></li><li><p>以上三个注入都只能注入bean类型的数据，而基本类型和String类型无法使用上述注解实现。另外，集合类型的注入只能通过XML来实现。</p></li><li><p><code>@Value</code> </p><ul><li>作用：注入基本类型和String类型的数据</li><li>属性：value，用于指定数据的值。它可以使用Spring中SpEL(也就是spring的el表达式）</li><li>SpEL的写法：${表达式}</li></ul></li></ul><h3 id="改变作用范围"><a href="#改变作用范围" class="headerlink" title="改变作用范围"></a>改变作用范围</h3><ul><li><code>@Scope</code> <ul><li>作用：用于指定bean的作用范围</li><li>属性：value，指定范围的取值。常用取值：<code>singleton</code> <code>prototype</code> （单例和多例）</li><li>位置：bean类的上面</li></ul></li></ul><h3 id="生命周期相关（了解）"><a href="#生命周期相关（了解）" class="headerlink" title="生命周期相关（了解）"></a>生命周期相关（了解）</h3><ul><li><code>@PreDestroy</code> <ul><li>作用：用于指定销毁方法</li><li>位置 ：在销毁方法的上面</li><li>另外，获取容器对象的时候，如果使用的是<code>ApplicationContext</code>，会跳过销毁方法的执行，必须使用<code>ClassPathXmlApplicationContext</code></li><li>还有，Spring是不负责多例的销毁！</li></ul></li><li><code>@PostConstruct</code> <ul><li>作用：用于指定初始化方法</li><li>位置：在初始化方法的上面</li></ul></li></ul><h2 id="新注解"><a href="#新注解" class="headerlink" title="新注解"></a>新注解</h2><blockquote><p>由于以上注解只能用于注解我们自己写的类，脱离不了配置文件，所以采用新注解</p></blockquote><p>新建一个名为<code>config.SpringConfiguration</code>的类（叫什么都行），在其中配置一下注解：</p><ul><li><p><code>@Configuration</code> </p><ul><li><p>作用：指定当前类为一个配置类</p></li><li><p>细节：当配置类作为<code>AnnotationConfigApplicationContext</code>对象创建的参数时，该注解可以不写。可以用class文件直接指定配置类。</p><pre class="line-numbers language-java"><code class="language-java">ApplicationContext ac <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span>SpringConfiguration<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>位置：目标类的上方</p></li></ul></li><li><p><code>@ComponentScan</code> </p><ul><li>作用：用于通过注解指定Spring在创建容器时要扫描的包</li><li>属性：value和basePackages，二者作用一样，都是用于指定创建容器时要扫描的包。</li><li>相当于：XML中的 <code>&lt;context:component-scan base-package=&quot;xyz.sky03&quot;&gt;&lt;/context:component-scan&gt;</code></li><li>位置：配置类的上方</li></ul></li><li><p><code>@Bean</code></p><ul><li>作用：用于把当前方法的返回值作为bean对象存入spring的ioc容器中</li><li>属性：name，用于指定bean的id。当不写时，默认值是当前方法的名称</li><li>细节：当我们使用注解配置方法时，如果方法有参数，spring框架会去容器中查找有没有可用的bean对象。查找的方式和Autowired注解的作用是一样的</li></ul></li><li><p><code>@Import</code> </p><ul><li>作用：用于导入其他的配置类</li><li>属性：value，用于指定其他配置类的字节码。</li><li>细节：带<code>@Import</code>注解的类就是父配置类（主配置类），而被导入的类都是子配置类（副配置类）</li></ul></li><li><p><code>@PropertySource</code></p><ul><li><p>作用：用于指定properties文件的位置</p></li><li><p>属性：value，指定文件的名称和路径。</p><ul><li>其中关键字：classpath：表示类路径下</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@PropertySource</span><span class="token punctuation">(</span><span class="token string">"classpath:jdbcConfig.properties"</span><span class="token punctuation">)</span>或<span class="token annotation punctuation">@PropertySource</span><span class="token punctuation">(</span><span class="token string">"classpath:xyz/sky03/jdbcConfig.properties"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><h2 id="Spring整合Junit测试"><a href="#Spring整合Junit测试" class="headerlink" title="Spring整合Junit测试"></a>Spring整合Junit测试</h2><ol><li><p>首先要明白：</p><ol><li>应用程序的入口：main方法</li><li>junit单元测试中，没有main方法也能执行<ul><li>junit集成了一个main方法</li><li>该方法就会判断当前测试类中哪些方法有 @Test注解</li><li>junit就让有Test注解的方法执行</li></ul></li><li>junit不会管我们是否采用spring框架<ul><li>在执行测试方法时，junit根本不知道我们是不是使用了spring框架</li><li>所以也就不会为我们读取配置文件/配置类创建spring核心容器</li></ul></li><li>由以上三点可知<ul><li>当测试方法执行时，没有Ioc容器，就算写了@Autowired注解，也无法实现注入</li></ul></li></ol></li><li><p>导入Spring整合Junit的jar包或maven坐标 <code>spring-test</code> </p></li><li><p>Junit提供了一个注解 <code>@Runwith</code>，可以把原有的main方法替换成spring提供的main方法</p><ul><li><code>@RunWith(SpringJUnit4ClassRunner.class)</code> </li><li>参数为字节码文件</li></ul></li><li><p><code>@ContextConfiguration</code> ，用于告知spring的运行器，spring和ioc创建是基于xml还是注解的，并且说明位置。</p><ul><li><p>属性：</p><ul><li><p>locations：指定xml文件的位置，加上classpath关键字，表示在类路径下</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@ContextConfiguration</span><span class="token punctuation">(</span>locations <span class="token operator">=</span> <span class="token string">"classpath:bean.xml"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>classes：指定注解类所在地位置</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@ContextConfiguration</span><span class="token punctuation">(</span>classes <span class="token operator">=</span> SpringConfiguration<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li></ul></li><li><p>注意：使用Spring 5.x版本的时候，要求Junit的版本必须是4.12及以上，否则执行以上内容会报错</p></li></ol><h2 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h2><ul><li>特点：字节码随用随创建，随用随加载</li><li>作用：不修改源码的基础上对方法增强</li><li>分类：<ul><li>基于接口的动态代理</li><li>基于子类的动态代理</li></ul></li></ul><h3 id="基于接口的动态代理"><a href="#基于接口的动态代理" class="headerlink" title="基于接口的动态代理"></a>基于接口的动态代理</h3><ul><li><p>提供者：JDK官方的Proxy类</p></li><li><p>要求：被代理类最少实现一个接口，如果没有则不能使用</p></li><li><p>如何创建：使用Proxy类中的newProxyInstance方法</p></li><li><p>newProxyInstance方法参数：</p><ul><li><code>ClassLoader</code>：类加载器<ul><li>它是用于加载代理对象字节码的。和被代理对象使用相同的类加载器。</li><li>固定写法：代理谁就写谁的 <code>getClassLoader()</code> </li></ul></li><li><code>Class[]</code>：字节码数组<ul><li>它是用于让代理对象和被代理对象有相同方法。实现相同的接口</li><li>固定写法：代理谁就写谁的 <code>getInterfaces()</code> </li></ul></li><li><code>InvocationHandler</code>：用于提供增强的代码<ul><li>用来写如何代理的代码。我们一般都是些一个该接口的实现类，通常情况下都是匿名内部类，但不是必须的。</li><li>此接口的实现类都是谁用谁写。</li></ul></li></ul></li><li><p>示例：</p><pre class="line-numbers language-java"><code class="language-java">IProducer proxyProducer <span class="token operator">=</span> <span class="token punctuation">(</span>IProducer<span class="token punctuation">)</span> Proxy<span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>producer<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        producer<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token keyword">new</span> <span class="token class-name">InvocationHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">/**             * 作用：执行被代理对象的任何接口方法都会经过该方法             * 方法参数的含义             * @param proxy   代理对象的引用             * @param method  当前执行的方法             * @param args    当前执行方法所需的参数             * @return        和被代理对象方法有相同的返回值             * @throws Throwable             */</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> Object <span class="token function">invoke</span><span class="token punctuation">(</span>Object proxy<span class="token punctuation">,</span> Method method<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//提供增强的代码</span>                Object returnValue <span class="token operator">=</span> null<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//1.获取方法执行的参数</span>                Float money <span class="token operator">=</span> <span class="token punctuation">(</span>Float<span class="token punctuation">)</span>args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//2.判断当前方法是不是销售</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"saleProduct"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    returnValue <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>producer<span class="token punctuation">,</span> money<span class="token operator">*</span><span class="token number">0.8f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">return</span> returnValue<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="基于子类的动态代理"><a href="#基于子类的动态代理" class="headerlink" title="基于子类的动态代理"></a>基于子类的动态代理</h3><p>基于子类的动态代理是需要jar包的支持 <code>cglib.jar</code> 和 <code>asm.jar</code></p><ul><li><p>提供者：第三方 <code>cglib</code>库的 Enhancer类</p></li><li><p>如何创建：使用Enhancer类中的create方法</p></li><li><p>要求：被代理类不能是 最终类（不能创建子类）</p></li><li><p>create方法参数： </p><ul><li>Class：字节码<ul><li>用于指定被代理对象的字节码</li></ul></li><li>Callback：用于提供增强代码<ul><li>我们一般写的都是该接口的子接口实现类：MethodInterceptor</li></ul></li></ul></li><li><p>示例：</p><pre class="line-numbers language-java"><code class="language-java">Producer cglibProducer <span class="token operator">=</span> <span class="token punctuation">(</span>Producer<span class="token punctuation">)</span>Enhancer<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>producer<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">MethodInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 执行北地阿里对象的任何方法都会经过该方法     * @param proxy     * @param method     * @param args     *    以上三个参数和基于接口的动态代理中invoke方法的参数是一样的     * @param methodProxy ：当前执行方法的代理对象     * @return     * @throws Throwable     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Object <span class="token function">intercept</span><span class="token punctuation">(</span>Object proxy<span class="token punctuation">,</span> Method method<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">,</span> MethodProxy methodProxy<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//提供增强的代码</span>        Object returnValue <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//1.获取方法执行的参数</span>        Float money <span class="token operator">=</span> <span class="token punctuation">(</span>Float<span class="token punctuation">)</span>args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2.判断当前方法是不是销售</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"saleProduct"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            returnValue <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>producer<span class="token punctuation">,</span> money<span class="token operator">*</span><span class="token number">0.8f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> returnValue<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cglibProducer<span class="token punctuation">.</span><span class="token function">saleProduct</span><span class="token punctuation">(</span><span class="token number">12000f</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="Spring的AOP"><a href="#Spring的AOP" class="headerlink" title="Spring的AOP"></a>Spring的AOP</h2><h3 id="AOP概念"><a href="#AOP概念" class="headerlink" title="AOP概念"></a>AOP概念</h3><p><code>AOP</code>:全称是 Aspect Oriented Programming 即:<code>面向切面编程</code>。</p><p>简单的说它就是把我们程序重复的代码抽取出来，在需要执行的时候，使用动态代理的技术，在不修改源码的基础上，对我们的已有方法进行增强。</p><h3 id="AOP作用"><a href="#AOP作用" class="headerlink" title="AOP作用"></a>AOP作用</h3><ol><li><strong>AOP主要作用就是横切关注点的分离和织入</strong>，横切关注点可能包含很多，比如非业务的：日志、事务处理、缓存、性能统计、权限控制等等这些非业务的基础功能；也可以关注业务</li><li>完善oop</li><li>降低组件和模块之间的耦合性</li><li>使系统容易扩展</li><li>而且由于关注点分离从而可以获得组件的更好复用</li></ol><h3 id="AOP发展历程"><a href="#AOP发展历程" class="headerlink" title="AOP发展历程"></a>AOP发展历程</h3><blockquote><p><strong>AOP思想最早由AOP联盟组织提出。Spring是使用这种思想的最好架构。</strong></p></blockquote><ul><li>Spring的AOP有自己的实现方式（非常繁琐），后来有个很AOP框架叫AspectJ，Spring就将其引入到自己的框架中了，弃用了自己的实现方式。</li></ul><h3 id="AOP中的细节"><a href="#AOP中的细节" class="headerlink" title="AOP中的细节"></a>AOP中的细节</h3><h4 id="AOP的底层实现方式"><a href="#AOP的底层实现方式" class="headerlink" title="AOP的底层实现方式"></a>AOP的底层实现方式</h4><blockquote><p><strong>使用动态代理技术</strong></p></blockquote><h4 id="关于代理方式的选择"><a href="#关于代理方式的选择" class="headerlink" title="关于代理方式的选择"></a>关于代理方式的选择</h4><blockquote><p><strong>在 spring 中，框架会根据目标类是否实现了接口来决定采用哪种动态代理的方式。</strong>（基于接口，还是基于子类）</p></blockquote><h4 id="AOP相关术语"><a href="#AOP相关术语" class="headerlink" title="AOP相关术语"></a>AOP相关术语</h4><ul><li>连接点（Joinpoint）:<ul><li>所谓连接点就是可以被增强的方法。</li></ul></li><li>切入点（Pointcut）:<ul><li>被增强的方法就叫做切入点。</li></ul></li><li>总结<ul><li>所有的切入点都是连接点，所有的连接点被增强后就是切入点！</li></ul></li><li>通知/增强（Advice）:<ul><li>所谓通知是指拦截到 Joinpoint 之后所要做的事情就是通知。</li><li>通知的类型:前置通知,后置通知,异常通知,最终通知,环绕通知。<ul><li>前置通知：位于invoke方法之前</li><li>后置通知：位于invoke方法之后</li><li>异常通知：在catch里面</li><li>最终通知：在finally里面</li><li>环绕通知：整个的invoke方法就是环绕通知。</li></ul></li></ul></li><li>引介（Introduction）:<ul><li>引介是一种特殊的通知在不修改类代码的前提下, Introduction 可以在运行期为类动态地添加一些方法或 Field。（类层面上的增强）</li></ul></li><li>目标对象（Target）:<ul><li>被代理的对象。</li></ul></li><li>织入（Weaving）:<ul><li>是指把增强应用到目标对象来创建新的代理对象的过程。</li><li>spring 采用动态代理织入，而 AspectJ 采用编译期织入和类装载期织入。</li></ul></li><li>代理（Proxy）:<ul><li>一个类被 AOP 织入增强后，就产生一个结果代理类。</li></ul></li><li>切面（Aspect）:<ul><li>是多个切入点和多个通知(引介)的结合。</li></ul></li></ul><h3 id="AOP入门"><a href="#AOP入门" class="headerlink" title="AOP入门"></a>AOP入门</h3><h4 id="基于XML的AOP配置"><a href="#基于XML的AOP配置" class="headerlink" title="基于XML的AOP配置"></a>基于XML的AOP配置</h4><h5 id="四个通知的配置及切入点表达式配置"><a href="#四个通知的配置及切入点表达式配置" class="headerlink" title="四个通知的配置及切入点表达式配置"></a>四个通知的配置及切入点表达式配置</h5><ul><li><p><code>&lt;aop:config&gt;</code> ：表示AOP的配置，所有AOP相关配置都在其内部</p></li><li><p><code>&lt;aop:aspect&gt;</code> ：表示配置一个切面</p><ul><li>位置：在 <code>&lt;aop:config&gt;</code> 的内部</li><li>属性: <code>id</code> ：是给切面提供的一个唯一标识</li><li>属性: <code>ref</code> ：是指定切面类或通知类bean的id</li></ul></li><li><p><code>&lt;aop:before&gt;</code> ：表示配置一个前置通知</p><ul><li><p>位置：在 <code>&lt;aop:aspect&gt;</code> 的内部</p></li><li><p>属性: <code>method</code> ：用于指定通知中的哪个方法为前置通知！</p></li><li><p>属性: <code>pointcut</code> ：用于指定 <code>切入点表达式</code>，该表达式的含义指的是对业务层中哪些方法增强</p></li><li><p><code>切入点表达式</code> 的写法：</p><ul><li><p>关键字：<code>execution(表达式)</code></p></li><li><p>表达式：</p><ul><li><code>访问修饰符  返回值  包名.包名.包名...类名.方法名(参数列表)</code></li></ul></li><li><p>标准的表达式写法：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> xyz<span class="token punctuation">.</span>sky03<span class="token punctuation">.</span>service<span class="token punctuation">.</span>impl<span class="token punctuation">.</span>UserServiceImpl<span class="token punctuation">.</span><span class="token function">saveUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p>其中：</p><ul><li><p>访问修饰符可以省略</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">void</span> xyz<span class="token punctuation">.</span>sky03<span class="token punctuation">.</span>service<span class="token punctuation">.</span>impl<span class="token punctuation">.</span>UserServiceImpl<span class="token punctuation">.</span><span class="token function">saveUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>返回值可以使用通配符，表示任意返回值</p><pre class="line-numbers language-java"><code class="language-java"><span class="token operator">*</span> xyz<span class="token punctuation">.</span>sky03<span class="token punctuation">.</span>service<span class="token punctuation">.</span>impl<span class="token punctuation">.</span>UserServiceImpl<span class="token punctuation">.</span><span class="token function">saveUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>包名可以使用通配符，表示任意包。但是有几级包，就需要写几个 <code>*.</code></p><pre class="line-numbers language-java"><code class="language-java"><span class="token operator">*</span> <span class="token operator">*</span><span class="token punctuation">.</span>*<span class="token punctuation">.</span>*<span class="token punctuation">.</span>*<span class="token punctuation">.</span>UserServiceImpl<span class="token punctuation">.</span><span class="token function">saveUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>包名可以使用 <code>..</code> 表示当前包及其子包</p><pre class="line-numbers language-java"><code class="language-java"><span class="token operator">*</span> <span class="token operator">*</span><span class="token punctuation">.</span><span class="token punctuation">.</span>UserServiceImpl<span class="token punctuation">.</span><span class="token function">saveUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>类名和方法名都可以使用 <code>*</code> 来实现通配</p><pre class="line-numbers language-java"><code class="language-java"><span class="token operator">*</span> <span class="token operator">*</span><span class="token punctuation">.</span><span class="token punctuation">.</span>*<span class="token punctuation">.</span>*<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li></ul></li></ul></li><li><p>表达式的参数列表</p><ul><li>可以直接写的数据类型：<ul><li>基本类型直接写名称     int </li><li>引用类型写包名.类名的方式   java.lang.String</li><li>可以使用通配符表示任意类型，但是必须有参数</li><li>可以使用<code>..</code>表示有无参数均可，有参数可以是任意类型</li></ul></li></ul></li><li><p>全通配写法：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token operator">*</span> <span class="token operator">*</span><span class="token punctuation">.</span><span class="token punctuation">.</span>*<span class="token punctuation">.</span>*<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>实际业务开发中切入点表达式的通常写法：</p><ul><li>切到业务层实现类下的所有方法</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token operator">*</span> xyz<span class="token punctuation">.</span>sky03<span class="token punctuation">.</span>service<span class="token punctuation">.</span>impl<span class="token punctuation">.</span>*<span class="token punctuation">.</span>*<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li><li><p><code>&lt;aop:after-returning&gt;</code> ：后置通知，它和异常通知永远只能执行一个。</p><ul><li>它也有 <code>method</code> 和 <code>pointcut</code> 属性，用法和 <code>&lt;aop:before&gt;</code> 的属性一样</li></ul></li><li><p><code>&lt;aop:after-throwing&gt;</code> ：异常通知，它和后置通知只能执行一个。（要么try，要么catch）</p></li><li><p>它也有 <code>method</code> 和 <code>pointcut</code> 属性，用法和 <code>&lt;aop:before&gt;</code> 的属性一样</p></li><li><p><code>&lt;aop:after&gt;</code> ：最终通知</p></li><li><p>它也有 <code>method</code> 和 <code>pointcut</code> 属性，用法和 <code>&lt;aop:before&gt;</code> 的属性一样</p></li></ul><h5 id="切入点表达式的通用写法"><a href="#切入点表达式的通用写法" class="headerlink" title="切入点表达式的通用写法"></a>切入点表达式的通用写法</h5><ul><li><code>&lt;aop:pointcut&gt;</code> 用于配置切入点表达式<ul><li>属性 <code>id</code> ：用于指定表达式的唯一标识。</li><li>属性 <code>expression</code> ：用于指定表达式内容</li><li>注意：当此标签在 <code>&lt;aop:aspect&gt;</code> 内部时，只能在当前切面使用（当前<code>&lt;aop:aspect&gt;</code>标签内）；<br>如果此标签配置在 <code>&lt;aop:aspect&gt;</code> 外部时（必须是在<code>&lt;aop:aspect&gt;</code> 前面），所有切面都可以使用</li></ul></li></ul><h6 id="以上四个通知还有一个属性叫-pointcut-ref"><a href="#以上四个通知还有一个属性叫-pointcut-ref" class="headerlink" title="以上四个通知还有一个属性叫 pointcut-ref"></a>以上四个通知还有一个属性叫 <code>pointcut-ref</code></h6><ul><li>用于指定切入点表达式的<code>id</code></li></ul><h5 id="环绕通知"><a href="#环绕通知" class="headerlink" title="环绕通知"></a>环绕通知</h5><ul><li><code>&lt;aop:around&gt;</code><ul><li>属性 <code>method</code> ：指定方法</li><li>属性 <code>pointcut-ref</code> ：指定切入点表达式的id</li></ul></li><li>Spring框架提供一个接口：<code>ProceedingJoinPoint</code>。该接口有一个方法<code>proceed()</code>，此方法就相当于调用切入点方法。而如果不配置该方法，就会只执行通知方法，不执行切入点方法。</li><li>它是spring框架为我们提供的一种可以在代码中手动控制增强方法何时执行的方式。</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> Object <span class="token function">aroundPringLog</span><span class="token punctuation">(</span>ProceedingJoinPoint pjp<span class="token punctuation">)</span><span class="token punctuation">{</span>    Object rtValue <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">try</span><span class="token punctuation">{</span>        Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args <span class="token operator">=</span> pjp<span class="token punctuation">.</span><span class="token function">getArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//得到方法执行所需的参数</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Logger类中的aroundPringLog方法开始记录日志了。。。前置"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        rtValue <span class="token operator">=</span> pjp<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//明确调用业务层方法（切入点方法）</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Logger类中的aroundPringLog方法开始记录日志了。。。后置"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> rtValue<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> t<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Logger类中的aroundPringLog方法开始记录日志了。。。异常"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Logger类中的aroundPringLog方法开始记录日志了。。。最终"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="基于注解的AOP配置"><a href="#基于注解的AOP配置" class="headerlink" title="基于注解的AOP配置"></a>基于注解的AOP配置</h4><ol><li><p>首先还是在配置文件中加入注解的约束context</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 配置spring创建容器时要扫描的包--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>xyz.sky03<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">context:</span>component-scan</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>然后在配置文件中开启注解AOP的支持</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 配置spring开启注解AOP的支持 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>aspectj-autoproxy</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>aspectj-autoproxy</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>配置注解</p><ul><li><p><code>@Aspect</code> ：表示当前类是一个切面类</p><ul><li>位置：在类名的上方</li></ul></li><li><p><code>@Pointcut</code> ：来指定切入点表达式</p><ul><li>位置：在一个方法上</li><li>其id为：该方法的<code>方法名()</code>，一定要带括号，否则报错！</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span><span class="token string">"execution(* xyz.sky03.service.impl.*.*(..))"</span><span class="token punctuation">)</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">pt1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><code>@Before</code> ：前置通知</p><ul><li>位置：前置通知方法上方</li><li>参数：为切入点id，一般为方法名，记得带上方法后的括号</li><li>Junit也有<code>@Before</code>，具体适用的哪个，得看导包</li></ul></li><li><p><code>@AfterReturning</code> ：后置通知</p><ul><li>位置：后置通知方法的上方</li><li>参数：为切入点id，记得带上括号</li></ul></li><li><p><code>@AfterThrowing</code> ：异常通知</p><ul><li>位置：异常通知方法的上方</li><li>参数：为切入点id，记得带上括号</li></ul></li><li><p><code>@After</code> ：最终通知</p><ul><li>位置：最终通知方法的上方</li><li>参数：为切入点id，记得带上括号</li></ul></li><li><p><code>@Around</code> ：环绕通知</p><ul><li>位置：环绕通知方法上方</li><li>参数：为切入点id，记得带上括号</li></ul></li><li><p><code>@EnableAspectJAutoProxy</code> ：注解方式开启AOP支持</p><ul><li><p>相当于</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>aspectj-autoproxy</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>aspectj-autoproxy</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li></ul></li></ol><h2 id="JdbcDaoSupport类"><a href="#JdbcDaoSupport类" class="headerlink" title="JdbcDaoSupport类"></a>JdbcDaoSupport类</h2><blockquote><p><strong>此类是解决SpringTemplate在多个Dao中创建多个SpringTemplate对象的类</strong></p></blockquote><p>具体方法：</p><ul><li>Dao实现类继承<code>JdbcDaoSupport</code>类</li><li>向Dao实现类中注入 <code>DataSource对象</code> <ul><li>Dao实现类的父类，也就是<code>JdbcDaoSupport</code>有<code>DataSource对象</code>参数</li></ul></li><li>不用new  SpringTemplate对象，直接使用父类的方法<code>super.getJdbcTemplate()</code>，得到SpringTemplate对象</li><li>执行增删改查业务</li><li>使用注解的时候不能使用此类</li></ul><h2 id="AOP的声明式事务"><a href="#AOP的声明式事务" class="headerlink" title="AOP的声明式事务"></a>AOP的声明式事务</h2><h3 id="基于XML"><a href="#基于XML" class="headerlink" title="基于XML"></a>基于XML</h3><blockquote><p>持久层使用的是JdbcTemplate</p></blockquote><ol><li><p>导入AOP和事务的约束</p><pre class="line-numbers language-xml"><code class="language-xml"> <span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>aop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/aop<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>tx</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/tx<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>         http://www.springframework.org/schema/beans         http://www.springframework.org/schema/beans/spring-beans.xsd         http://www.springframework.org/schema/tx         http://www.springframework.org/schema/tx/spring-tx.xsd         http://www.springframework.org/schema/aop         http://www.springframework.org/schema/aop/spring-aop.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>配置service和dao以及DataSource的bean</p><pre class="line-numbers language-xml"><code class="language-xml"> <span class="token comment" spellcheck="true">&lt;!-- 配置Service --></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>accountService<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>xyz.sky03.service.impl.AccountServiceImpl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     <span class="token comment" spellcheck="true">&lt;!-- 注入dao --></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>accountDao<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>accountDao<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span> <span class="token comment" spellcheck="true">&lt;!--配置Dao对象--></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>accountDao<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>xyz.sky03.dao.impl.AccountDaoImpl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     <span class="token comment" spellcheck="true">&lt;!--注入数据源--></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>datasource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span> <span class="token comment" spellcheck="true">&lt;!--配置数据源的bean--></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>datasource<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.jdbc.datasource.DriverManagerDataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbc:mysql:///eesy<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driverClassName<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.mysql.jdbc.Driver<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>admin<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>配置声明式事务</p><ul><li><p>配置事务管理器</p><ul><li>注意：<strong>事务管理器需要注入 <code>DataSource</code> 对象</strong></li></ul><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 配置事务管理器 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>transactionManager<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.jdbc.datasource.DataSourceTransactionManager<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>配置事物的通知</p><ul><li>使用<code>&lt;tx:advice&gt;</code> 标签来配置事务通知</li><li>属性 <code>id</code>：事务通知的唯一标识</li><li>属性 <code>transaction-manager</code>：给事务通知提供一个事务管理器引用</li></ul><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 配置事务的通知--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>advice</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>txAdvice<span class="token punctuation">"</span></span> <span class="token attr-name">transaction-manager</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>transactionManager<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">tx:</span>advice</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>配置AOP中的通用切入点表达式</p></li><li><p>建立事务通知和切入点表达式的对应关系</p><ul><li>属性 <code>advice-ref</code>：指定哪个事务通知</li><li>属性 <code>pointcut-ref</code>：指定切入点表达式</li></ul><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 配置aop--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 配置切入点表达式--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>pointcut</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pt1<span class="token punctuation">"</span></span> <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>execution(* xyz.sky03.service.impl.*.*(..))<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>pointcut</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--建立切入点表达式和事务通知的对应关系 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>advisor</span> <span class="token attr-name">advice-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>txAdvice<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pt1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>advisor</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>配置事务的属性</p><ul><li>标签：<code>&lt;tx:attributes&gt;</code>、<code>&lt;tx:method&gt;</code> （单标签，貌似单双无所谓）</li><li>位置：<code>&lt;tx:attributes&gt;</code>在<code>&lt;tx:advice&gt;</code> 标签的内部、<code>&lt;tx:method&gt;</code> 在 <code>&lt;tx:attributes&gt;</code>的内部</li><li>在<code>&lt;tx:attributes&gt;</code>的内部可以配置多个事务 </li><li><code>&lt;tx:method&gt;</code>标签属性：<ul><li><code>name</code>：指定对哪个方法配置事务，一般会有很多方法都需要事务，这时候可以用通配符 <code>*</code> 或者 <code>find*</code> </li><li><code>isolation</code>：用于指定事务的隔离级别。默认值是DEFAULT，表示使用数据库的默认隔离级别。</li><li><code>propagation</code>：用于指定事务的传播行为。默认值是REQUIRED，表示一定会有事务，增删改的选择。查询方法可以选择SUPPORTS。</li><li><code>read-only</code>：用于指定事务是否只读。只有查询方法才能设置为true。默认值是false，表示读写。</li><li><code>timeout</code>：用于指定事务的超时时间，默认值是-1，表示永不超时。如果指定了数值，以秒为单位。</li><li><code>rollback-for</code>：用于指定一个异常，当产生该异常时，事务回滚，产生其他异常时，事务不回滚。没有默认值。不配置此属性，表示任何异常都回滚。</li><li><code>no-rollback-for</code>：用于指定一个异常，当产生该异常时，事务不回滚，产生其他异常时事务回滚。没有默认值。不配置此属性，表示任何异常都回滚。</li></ul></li></ul><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 配置事务的通知--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>advice</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>txAdvice<span class="token punctuation">"</span></span> <span class="token attr-name">transaction-manager</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>transactionManager<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>attributes</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 二者优先级 find* 范围小，优先级高 find开头的一般是查询方法，所以配置read-only为true--></span>        <span class="token comment" spellcheck="true">&lt;!-- * 表示都能匹配上--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>*<span class="token punctuation">"</span></span> <span class="token attr-name">propagation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>REQUIRED<span class="token punctuation">"</span></span> <span class="token attr-name">read-only</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!-- find* 表示只能find开头的方法能匹配上--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>find*<span class="token punctuation">"</span></span> <span class="token attr-name">propagation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>SUPPORTS<span class="token punctuation">"</span></span> <span class="token attr-name">read-only</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">tx:</span>method</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">tx:</span>attributes</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">tx:</span>advice</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>项目示例：<a href="https://gitee.com/sky03/Spring_tx_XML" target="_blank" rel="noopener">AOP的事务配置基于XML</a> </p></li></ol><h3 id="基于注解"><a href="#基于注解" class="headerlink" title="基于注解"></a>基于注解</h3><ol><li><p>用注解首先要配置要扫描的包</p><pre class="line-numbers language-xml"><code class="language-xml"> <span class="token comment" spellcheck="true">&lt;!-- 配置spring创建容器时要扫描的包--></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>xyz.sky03<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">context:</span>component-scan</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>再用注解配置Service和Dao、还有JdbcTemplate和DataSource</p><blockquote><p>因为 <code>JdbcDaoSupport</code>使用注解会很不方便，所以自己配置JdbcTemplate的bean，再注入DataSource</p></blockquote><p> 在Dao实现类上用 <code>@Autowired</code> 对JdbcTemplate注入</p><pre class="line-numbers language-xml"><code class="language-xml"> <span class="token comment" spellcheck="true">&lt;!-- 配置JdbcTemplate--></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbcTemplate<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.jdbc.core.JdbcTemplate<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span> <span class="token comment" spellcheck="true">&lt;!--配置数据源的bean--></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.jdbc.datasource.DriverManagerDataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbc:mysql:///eesy<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driverClassName<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.mysql.jdbc.Driver<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>admin<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>配置事务管理器</p><pre class="line-numbers language-xml"><code class="language-xml"> <span class="token comment" spellcheck="true">&lt;!-- 配置事务管理器 --></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>transactionManager<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.jdbc.datasource.DataSourceTransactionManager<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>开启Spring对注解事务的支持</p><pre class="line-numbers language-xml"><code class="language-xml"> <span class="token comment" spellcheck="true">&lt;!-- 开启spring对注解事务的支持--></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>annotation-driven</span> <span class="token attr-name">transaction-manager</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>transactionManager<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">tx:</span>annotation-driven</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>在需要事务支持的地方使用<code>@Transactional</code>注解</p><ul><li>该注解使用位置：类名上方</li><li>一般用在Service实现类</li><li>属性：跟<code>&lt;tx:method&gt;</code> 标签的属性一样</li><li>细节：在类的上方配置 <code>@Transactional(propagation= Propagation.SUPPORTS,readOnly=true)</code> ，表示该类中的所有方法都是只读型事务，那增删改的方法就需要单独配置读写型事务<ul><li>在方法的上方加上 <code>@Transactional(propagation= Propagation.REQUIRED,readOnly=false)</code> 该优先级大于类上方的配置</li></ul></li></ul></li><li><p>所以注解的方法的缺点很明显，需要在每个业务类或者增删改的方法上加注解，XML文件方式则可以一劳永逸。</p></li><li><p>因为因为已经在事务类和方法上加了事务注解，所以不需要切入点了</p></li><li><p>项目示例：<a href="https://gitee.com/sky03/Spring_tx_anno" target="_blank" rel="noopener">AOP的事务配置基于注解</a> </p></li></ol><h3 id="纯注解"><a href="#纯注解" class="headerlink" title="纯注解"></a>纯注解</h3><ol><li><p>创建配置类。在上一个基于注解的基础上，在config包中创建一个配置类<code>SpringConfiguration</code>，在该类上加 <code>@Configuration</code>注解，表示该类为配置类；当配置类作为<code>AnnotationConfigApplicationContext</code>对象创建的参数时，该注解可以不写。</p></li><li><p>配置要扫描的包。在<code>SpringConfiguration</code> 类的上方加<code>@ComponentScan(&quot;xyz.sky03&quot;)</code> 。</p></li><li><p>创建数据库配置类。在config包中创建<code>JdbcConfig</code>类，用于配置JdbcTemplate和DataSource。</p><p> 示例：</p><pre class="line-numbers language-java"><code class="language-java"> <span class="token keyword">package</span> config<span class="token punctuation">;</span> <span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Value<span class="token punctuation">;</span> <span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span> <span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span>core<span class="token punctuation">.</span>JdbcTemplate<span class="token punctuation">;</span> <span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span>datasource<span class="token punctuation">.</span>DriverManagerDataSource<span class="token punctuation">;</span> <span class="token keyword">import</span> javax<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>DataSource<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/** * 和连接数据库相关的配置类 */</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JdbcConfig</span> <span class="token punctuation">{</span>     <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${jdbc.driver}"</span><span class="token punctuation">)</span>     <span class="token keyword">private</span> String driver<span class="token punctuation">;</span>     <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${jdbc.url}"</span><span class="token punctuation">)</span>     <span class="token keyword">private</span> String url<span class="token punctuation">;</span>     <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${jdbc.username}"</span><span class="token punctuation">)</span>     <span class="token keyword">private</span> String username<span class="token punctuation">;</span>     <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${jdbc.password}"</span><span class="token punctuation">)</span>     <span class="token keyword">private</span> String password<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">/**     * 创建JdbcTemplate     * @param dataSource     * @return     */</span>     <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"jdbcTemplate"</span><span class="token punctuation">)</span>     <span class="token keyword">public</span> JdbcTemplate <span class="token function">createJdbcTemplate</span><span class="token punctuation">(</span>DataSource dataSource<span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">JdbcTemplate</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">/**     * 创建数据源对象     * @return     */</span>     <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"dataSource"</span><span class="token punctuation">)</span>     <span class="token keyword">public</span> DataSource <span class="token function">createDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         DriverManagerDataSource ds <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DriverManagerDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         ds<span class="token punctuation">.</span><span class="token function">setDriverClassName</span><span class="token punctuation">(</span>driver<span class="token punctuation">)</span><span class="token punctuation">;</span>         ds<span class="token punctuation">.</span><span class="token function">setUrl</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>         ds<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>         ds<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">return</span> ds<span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在配置类上导入数据库配置类。加上<code>@Import({JdbcConfig.class})</code> 注解，导入数据库配置类。</p></li><li><p>配置数据库连接信息文件。在resource中创建<code>jdbcConfig.properties</code> 文件，用于配置数据库连接信息。</p><p> 示例：</p><pre class="line-numbers language-properties"><code class="language-properties"><span class="token attr-name"> jdbc.driver</span><span class="token punctuation">=</span><span class="token attr-value">com.mysql.jdbc.Driver</span><span class="token attr-name"> jdbc.url</span><span class="token punctuation">=</span><span class="token attr-value">jdbc:mysql:///eesy</span><span class="token attr-name"> jdbc.username</span><span class="token punctuation">=</span><span class="token attr-value">root</span><span class="token attr-name"> jdbc.password</span><span class="token punctuation">=</span><span class="token attr-value">admin</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>加载数据库连接文件。在配置类上加<code>@PropertySource(&quot;jdbcConfig.properties&quot;)</code> 注解，加载数据库连接的信息。</p></li><li><p>开启Spring对注解事务的支持。在配置类上加 <code>@EnableTransactionManagement</code>。</p></li><li><p>配置事务管理器。在config包中创建 <code>TransactionConfig</code>类</p><p>示例：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> config<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span>datasource<span class="token punctuation">.</span>DataSourceTransactionManager<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>transaction<span class="token punctuation">.</span>PlatformTransactionManager<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>DataSource<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*** 和事务相关的配置类*/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TransactionConfig</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**    * 用于创建事务管理器对象    * @param dataSource    * @return    */</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"transactionManager"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//PlatformTransactionManager是一个接口</span>    <span class="token keyword">public</span> PlatformTransactionManager <span class="token function">createTransactionManager</span><span class="token punctuation">(</span>DataSource dataSource<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DataSourceTransactionManager</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>导入 <code>TransactionConfig</code>类。在配置类上加入 <code>@Import({JdbcConfig.class,TransactionConfig.class})</code> 注解。</p></li><li><p>在测试类上加入 <code>@ContextConfiguration(classes= SpringConfiguration.class)</code> 注解。注意：属性为classes。</p></li><li><p>项目示例：<a href="https://gitee.com/sky03/Spring_tx_withoutXML" target="_blank" rel="noopener">Spring纯注解的事务配置</a> </p></li></ol><h2 id="AOP的编程式事务"><a href="#AOP的编程式事务" class="headerlink" title="AOP的编程式事务"></a>AOP的编程式事务</h2><p>编程式事务太麻烦，有过多重复代码，一般不推介使用。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Framework </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java之泛型</title>
      <link href="/posts/41331.html"/>
      <url>/posts/41331.html</url>
      
        <content type="html"><![CDATA[<h2 id="集合中的泛型"><a href="#集合中的泛型" class="headerlink" title="集合中的泛型"></a>集合中的泛型</h2><blockquote><p>在List中可以添加任意类型对象，因为参数是Object<br>为了限制类型的添加，这时候就需要泛型(jdk1.5后支持)</p></blockquote><p>泛型的用法是在容器后面添加<code>&lt;Type&gt;</code><br>Type可以是<code>类，抽象类，接口</code><br>泛型表示这种容器，<code>只能存放该Type</code>,其他的放不进去<br><code>该Type的子类</code>可以放进去<br>还可以<code>简写</code>：</p><pre class="line-numbers language-java"><code class="language-java">ArrayList<span class="token operator">&lt;</span>Hero<span class="token operator">></span> al <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="通配符"><a href="#通配符" class="headerlink" title="通配符"></a>通配符</h2><h3 id="extends"><a href="#extends" class="headerlink" title="? extends"></a>? extends</h3><p>ArrayList personList&lt;? extends Person&gt; 表示这是一个Person泛型或者其子类泛型<br>personList 的泛型可能是 <code>&lt;Person&gt;</code><br>personList 的泛型可能是 <code>&lt;Teacher&gt;</code><br>personList 的泛型可能是 <code>&lt;Student&gt;</code><br>所以 可以确凿的是，<strong><code>从personList取出来的对象，一定是可以转型成Person的</code></strong></p><p>但是，<code>不能往里面放东西</code>，因为<br>放Teacher就不满足<code>&lt;Student&gt;</code><br>放Student就不满足<code>&lt;Teacher&gt;</code></p><h3 id="super"><a href="#super" class="headerlink" title="? super"></a>? super</h3><p>ArrayList personList&lt;? super Person&gt; 表示这是一个Person泛型或者其父类泛型<br>personList的泛型可能是<code>&lt;Person&gt;</code><br>personList的泛型可能是<code>&lt;Object&gt;</code><br><del>personList的泛型可能是<code>&lt;Person的父类&gt;</code></del></p><p>但是，<code>可以往里面插入Person以及Person的子类</code><br>但是取出来有风险，因为<code>不确定取出来是Person还是Student</code></p><h3 id="泛型通配符"><a href="#泛型通配符" class="headerlink" title="泛型通配符 ?"></a>泛型通配符 ?</h3><p>泛型通配符? 代表任意泛型<br>既然?代表任意泛型，那么换句话说，这个容器什么泛型都有可能</p><p>所以只能以Object的形式取出来<br>并且不能往里面放对象，因为不知道到底是一个什么泛型的容器 </p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>如果希望只取出，不插入，就使用? extends Person<br>如果希望只插入，不取出，就使用? super Person<br>如果希望，又能插入，又能取出，就不要用通配符？ </p><h2 id="泛型转型"><a href="#泛型转型" class="headerlink" title="泛型转型"></a>泛型转型</h2><h3 id="对象转型"><a href="#对象转型" class="headerlink" title="对象转型"></a>对象转型</h3><p>根据面向对象学习的知识，子类转父类 是一定可以成功的 </p><h3 id="子类泛型转父类泛型"><a href="#子类泛型转父类泛型" class="headerlink" title="子类泛型转父类泛型"></a>子类泛型转父类泛型</h3><p>既然 子类对象 转 父类对象是可以成功的，那么子类泛型转父类泛型能成功吗？</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubantu系统安装</title>
      <link href="/posts/55862.html"/>
      <url>/posts/55862.html</url>
      
        <content type="html"><![CDATA[<h1 id="Ubantu系统安装"><a href="#Ubantu系统安装" class="headerlink" title="Ubantu系统安装"></a>Ubantu系统安装</h1><p>关于<code>/swap</code>分区<br>连接：<a href="https://www.jianshu.com/p/12e25ea172de" target="_blank" rel="noopener">https://www.jianshu.com/p/12e25ea172de</a></p><p>安装成功后的样子<br><img src="/medias/loading.gif" data-original="https://sky03-blog-images.oss-cn-beijing.aliyuncs.com/2019-1-30/a4.png" alt="桌面"></p><h2 id="禁用网卡驱动"><a href="#禁用网卡驱动" class="headerlink" title="禁用网卡驱动"></a>禁用网卡驱动</h2><p>列出所有安装网卡</p><pre class="line-numbers language-sh"><code class="language-sh">sudo lshw -C network<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>找到要禁用的网卡，在其中找到driver后的属性，复制</p><pre class="line-numbers language-sh"><code class="language-sh">sudo gedit /etc/modprobe.d/blacklist.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在最后一行写入（你想要禁用的设备的驱动）</p><pre class="line-numbers language-sh"><code class="language-sh"># ----------------------------# Disable WIFI driverblacklist rtl8723be<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="安装显卡驱动"><a href="#安装显卡驱动" class="headerlink" title="安装显卡驱动"></a>安装显卡驱动</h2><p>ubantu默认是使用Intel显卡，也就是核显，体验不是那么舒服，想开启独立显卡，怎么做呢？<br>开启独显方法很多，我这里介绍个对新手很友好的方式：<br>首先 添加Nvidia官方源</p><pre class="line-numbers language-sh"><code class="language-sh">sudo add-apt-repository ppa:graphics-drivers/ppa<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/medias/loading.gif" data-original="https://sky03-blog-images.oss-cn-beijing.aliyuncs.com/2019-1-30/a2.png" alt><br>提示输入密码，然后输入的密码看不到（其实密码已经输入上去了），直接回车就行了！<br>PS：Unix思想，没有消息就是好消息嘛！</p><p>然后更新源</p><pre class="line-numbers language-sh"><code class="language-sh">sudo apt-get update<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后左下角启动器菜单打开<code>软件和更新</code>，点击附加驱动，这时候系统会加载NVIDIA官方的显卡驱动和uabntu系统自带的nouveau显卡驱动<br>一般选择合适的驱动版本号，点击<code>应用更改</code>即可<br><img src="/medias/loading.gif" data-original="https://sky03-blog-images.oss-cn-beijing.aliyuncs.com/2019-1-30/a3.png" alt="软件和更新"><br>（如果不添加以上NVIDIA源，这里也会显示很多驱动，但都是老旧驱动，跟不上新内核，所以安装NVIDIA的驱动比较好）</p><p>然后。。。漫长等待<br>（这个时候，可以去下载一些开发软件什么，当然，安装不上，因为显卡驱动正在安装）</p><p>安装成功后重启，去<code>设置-&gt;详细信息-&gt;about</code>，查看 <code>图形</code> 是不是你的独显<br><img src="/medias/loading.gif" data-original="https://sky03-blog-images.oss-cn-beijing.aliyuncs.com/2019-1-30/a1.png" alt="about"></p><h2 id="安装搜狗输入法"><a href="#安装搜狗输入法" class="headerlink" title="安装搜狗输入法"></a>安装搜狗输入法</h2><p>首先 去搜狗输入法官网下载Linux版本的输入法<br>然后 添加源</p><pre class="line-numbers language-sh"><code class="language-sh">sudo add-apt-repository ppa:fcitx-team/nightly<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后 更新源</p><pre class="line-numbers language-sh"><code class="language-sh">sudo apt-get update<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>接着 直接安装搜狗输入法.deb文件（没有添加源是安装不上的）</p><p>安装成功 再去左下角启动器菜单里找到<code>语言支持</code> 打开<br>一般会提示 语言支持没有安装完整 这个安装一下也好，也可以等会安装，点击稍后提醒<br>然后找到<code>键盘输入法系统</code>，选择<code>fcitx</code>， 然后 重启！（一定要重启，不然不会生效）<br><img src="/medias/loading.gif" data-original="https://sky03-blog-images.oss-cn-beijing.aliyuncs.com/2019-1-30/a5.png" alt="语言和支持"><br>大功告成！<br>其实ubantu自带的有IBus中文输入法，但是体验太差</p><p>这个时候右上角依然有烦人的IBus，其实这时候搜狗已经接管了系统输入，强迫症会看着很不舒服（一定不要直接把IBus卸载，不然会有很多麻烦）<br>解决办法，在状态栏右键搜狗退出，然后在启动器里打开<code>Fcitx</code>，问题解决！<br>如果还不行再重启下就好了</p><h2 id="安装jdk"><a href="#安装jdk" class="headerlink" title="安装jdk"></a>安装jdk</h2><p>安装jdk有两种方式：<br>apt安装和下载安装<br>这里介绍下载安装和配置环境变量</p><ol><li>下载<br>首先jdk常用的有两种<code>open jdk</code>和<code>Oracle jdk</code><br>我们安装<a href="https://www.oracle.com/technetwork/java/javase/downloads/index.html" target="_blank" rel="noopener">Oracle jdk</a><br>（如果不知道怎么下载，<a href="https://download.oracle.com/otn-pub/java/jdk/8u202-b08/1961070e4c9b4e26a04e7f5a083f551e/jdk-8u202-linux-x64.tar.gz" target="_blank" rel="noopener">点我</a>下载jdk8u202 ）<br>选择Linux 64位的.tar.gz文件<br>在jdk所在文件夹内，右键<code>在终端打开</code>，输入以下命令：</li><li>创建目录：</li></ol><pre class="line-numbers language-sh"><code class="language-sh">sudo mkdir /usr/lib/jvm<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li>解压到该目录：</li></ol><pre class="line-numbers language-sh"><code class="language-sh">sudo tar -zxvf jdk-8u201-linux-x64.tar.gz -C /usr/lib/jvm<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="4"><li>修改环境变量：</li></ol><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> gedit /etc/profile<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>执行命令之后会弹出文本编辑器，在文本的最后一行加上以下内容：</p><pre class="line-numbers language-sh"><code class="language-sh">#--------------------------------------------set java environmentJAVA_HOME=/usr/lib/jvm/jdk1.8.0_201JRE_HOME=$JAVA_HOME/jre     CLASS_PATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar:$JRE_HOME/libPATH=$PATH:$JAVA_HOME/bin:$JRE_HOME/binexport JAVA_HOME JRE_HOME CLASS_PATH PATH<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：其中 JAVA_HOME 请根据自己的实际安装路径及 JDK 版本配置填写！</p><p>让修改生效，重启电脑<br>或者使用以下命令（立即生效）：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">source</span> /etc/profile<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="5"><li>测试<br>看jdk版本是否正确</li></ol><pre class="line-numbers language-bash"><code class="language-bash">java -version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或者再试试<code>java</code> <code>javac</code><br><img src="/medias/loading.gif" data-original="https://sky03-blog-images.oss-cn-beijing.aliyuncs.com/2019-1-30/a6.png" alt="java"></p><h2 id="卸载软件"><a href="#卸载软件" class="headerlink" title="卸载软件"></a>卸载软件</h2><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> remove --purge 软件名称     <span class="token function">sudo</span> <span class="token function">apt-get</span> autoremove --purge 软件名称 <span class="token function">sudo</span> <span class="token function">apt-get</span> -y autoclean 软件名称 <span class="token function">sudo</span> <span class="token function">apt-get</span> -y clean 软件名称 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>//remove卸载软件，–purge清除相关配置文件，autoremove清理不需要的依赖包<br>autoclean清理安装软件时留下的缓存程序软件包（只清理过时（已经被卸载的软件）的包）<br>clean清理所有下载的安装包<br>清理软件残留命令</p><pre class="line-numbers language-bash"><code class="language-bash">dpkg -l <span class="token operator">|</span><span class="token function">grep</span> ^rc<span class="token operator">|</span><span class="token function">awk</span> <span class="token string">'{print <span class="token variable">$2</span>}'</span> <span class="token operator">|</span><span class="token function">sudo</span> <span class="token function">xargs</span> dpkg -P <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><p>检查你的电脑有哪些显卡</p><pre class="line-numbers language-bash"><code class="language-bash">lspci -k <span class="token operator">|</span> <span class="token function">grep</span> -A 2 -i <span class="token string">"VGA"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ubantu </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>成长心得</title>
      <link href="/posts/51207.html"/>
      <url>/posts/51207.html</url>
      
        <content type="html"><![CDATA[<h2 id="2019-1-24更："><a href="#2019-1-24更：" class="headerlink" title="2019.1.24更："></a>2019.1.24更：</h2><p><strong>新手程序员第一铁律：</strong></p><ul><li><p>动手能力  </p><p>不要以为看看代码，会了就完了，必须亲手敲敲<br>不然到用的时候，脑子还是一片空白！</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 个人 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Eclipse使用技巧</title>
      <link href="/posts/30173.html"/>
      <url>/posts/30173.html</url>
      
        <content type="html"><![CDATA[<h2 id="创建动态web项目"><a href="#创建动态web项目" class="headerlink" title="创建动态web项目"></a>创建动态web项目</h2><p>其实没啥说的，直接新建Dynamic Web Project就好</p><p>不过要注意几点：</p><ol><li>类文件会被输出到build里，而不是WEB-INF/classes目录下</li><li>当有类或者配置文件变化时，会自动重启，无需手动重启Tomcat. 但是不稳定，当很许多类改动，新加了jar包，新增加了配置文件等等，都有可能导致自动重启失效，所以最好还是手动重启，确保重启成功。</li><li>WebContent会被整个复制到 E:\project.metadata.plugins\org.eclipse.wst.server.core\tmp0\wtpwebapps\j2ee 这个位置下面去，Eclipse中启动的tomcat其实是访问的这个位置。所以当WebContent里的内容比较多的时候，就会花较长时间复制。</li><li>因为第3条的原因，第1条在build里生成的类和配置文件，也会被复制到第3条所说的位置</li></ol><h2 id="普通project切换到动态Web项目"><a href="#普通project切换到动态Web项目" class="headerlink" title="普通project切换到动态Web项目"></a>普通project切换到动态Web项目</h2><ul><li>首先要有一个普通的project</li><li>然后在该项目上右键 -&gt;properties-&gt;Project Facets-&gt;Convert to faceted form…<ol><li>勾选Dynamic Web Module</li><li>勾选之后，会出现 Furthe configuration available …, 点击</li><li>动态web项目的默认内容目录是WebContent,而j2ee这个项目的对应目录是 web, 所以这里要输入web</li><li>点击ok</li></ol></li><li>最后再点击Ok就行了， 不用管Revert和Apply按钮</li><li>转换成功！</li></ul>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
          <category> IDE </category>
          
          <category> Eclipse </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Eclipse </tag>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Servlet笔记</title>
      <link href="/posts/24403.html"/>
      <url>/posts/24403.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>Servlet就是一个运行在服务端的小程序<br>Servlet在企业中是不常用的到的，但是后面要学习的框架就是由servlet构成的，要想真正的了解框架，对于servlet的学习还是很有必要的！</p></blockquote><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><h3 id="开发servlet"><a href="#开发servlet" class="headerlink" title="开发servlet"></a>开发servlet</h3><h4 id="新建web项目"><a href="#新建web项目" class="headerlink" title="新建web项目"></a>新建web项目</h4><p>就是IDE中（idea或者eclipse）新建一个普通的<code>java project</code>，不要上去就新建<code>web project</code><br>这样会把新建servlet中的细节省略掉！  </p><h4 id="导入必须的servlet-api-jar包"><a href="#导入必须的servlet-api-jar包" class="headerlink" title="导入必须的servlet-api.jar包"></a>导入必须的servlet-api.jar包</h4><blockquote><p>因为是开发Servlet所以需要用到 servlet-api.jar 这个包里的相关类。</p></blockquote><p>servlet-api.jar 包位于 <code>Tomcat目录</code>下的 tomcat\lib\servlet-api.jar</p><p>eclipse导入方法：<br>右键点击项目 -&gt; properties -&gt; Java Build Path -&gt;Libraries -&gt; Add External JARs</p><h4 id="配置web-xml"><a href="#配置web-xml" class="headerlink" title="配置web.xml"></a>配置web.xml</h4><p>首先在项目目录下创建web文件夹，  这个文件夹一般就是用来存放前端的文件<br>然后在创建再在web文件夹下创建web/WEB-INF文件夹， Tomcat一般不允许访问WEB-INF文件夹<br>最后再在WEB-INF文件夹下创建 <code>web.xml</code></p><p>web.xml提供路径与servlet的映射关系<br>把/hello这个路径，映射到 HelloServlet这个类上</p><ol><li><p><code>&lt;servlet&gt;</code> 标签下的 <code>&lt;servlet-name&gt;</code></p><p>与 <code>&lt;servlet-mapping&gt;</code> 标签下的 <code>&lt;servlet-name&gt;</code> 必须一样</p></li><li><p><code>&lt;servlet-name&gt;</code>与<code>&lt;servlet-class&gt;</code>可以不一样，但是为了便于理解与维护，一般都会写的一样。 一目了然</p></li></ol><p>个人推测<code>&lt;servlet-name&gt;</code>可以自定义命名，也就是说可以随便写，但必须遵循第一条规则</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>HelloServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>HelloServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--这里可以按住cmd键点击中间的参数路径，能点说明路径是正确的；window系统按住Ctrl键--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>HelloServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="指定项目输出到WEB-INF下的classes目录"><a href="#指定项目输出到WEB-INF下的classes目录" class="headerlink" title="指定项目输出到WEB-INF下的classes目录"></a>指定项目输出到WEB-INF下的classes目录</h4><p><code>为什么要这样做？</code><br> 因为在ecilpse中默认输出的class是在bin目录下，但是tomcat在默认情况下，不会去bin目录找这些class文件，而是到WEB-INF/classes这个目录下去寻找。 所以通过这一步的配置，使得eclipse的class文件输出到WEB-INF/classes目录下，那么这样就和tomcat兼容了。</p><p>Eclipse配置方法：</p><p>首先在WEB-INF下创建classes目录</p><p>把项目的class文件输出由原来的 j2ee/bin 设置到 j2ee/web/WEB-INF/classes下</p><p>步骤:<br>项目右键-&gt;properties-&gt;Java Build Path-&gt;Source-&gt;右下角的 Brower-&gt; 指定位置是 j2ee/web/WEB-INF/classes。</p><h4 id="配置tomcat的server-xml-中的-lt-context-gt"><a href="#配置tomcat的server-xml-中的-lt-context-gt" class="headerlink" title="配置tomcat的server.xml 中的&lt;context&gt;"></a>配置tomcat的server.xml 中的<code>&lt;context&gt;</code></h4><p>打开tomcat/conf/sever.xml</p><p>在 &lt;Host name=”localhost” 。。。 下面加一句</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Context</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/j2ee<span class="token punctuation">"</span></span> <span class="token attr-name">docBase</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/Users/sky03/Development/0_Document/IdeaProjects/JavaEE/web<span class="token punctuation">"</span></span> <span class="token attr-name">debug</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">reloadable</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>path=”/“ 就表示直接通过 <a href="http://127.0.0.1/hello" target="_blank" rel="noopener">http://127.0.0.1/hello</a> 就可以访问网页了</p><h3 id="获取参数"><a href="#获取参数" class="headerlink" title="获取参数"></a>获取参数</h3><blockquote><p>比如前台有一个表单，要想获取用户名和密码，可以用<code>request.getParameter(&quot;your name&quot;)</code>来获取<br>就像PHP中的<code>$_GET[&quot;your name&quot;]</code>或者<code>$POST[&quot;your name&quot;]</code></p></blockquote><p>以下是例子：</p><p>创建一个LoginServlet</p><p>因为账号登录一类的操作一般提交form的method都是post,所以LoginServlet需要提供一个doPost方法</p><p>还有需要注意的是：<br>form要提交给谁，也就是action=谁，这里应该是提交给LoginServlet，但是这个sevlet不是网页，是一个程序，下面有LoginServlet的web.xml链接映射，所以提交给这个链接就行了，也就是action=”login”就行了</p><p>在doPost方法中，通过request.getParameter 根据name取出对应的账号和密码</p><p>然后用System.out.println() 打印在控制台</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>ServletException<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServlet<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletRequest<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletResponse<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoginServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">)</span>            <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        String name <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//name为前台表单中的账号</span>        String password <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//password为前台表单的密码</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"name:"</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"password:"</span> <span class="token operator">+</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后每个servlet都要在web.xml中映射一下！！<br>所以web.xml如下：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>HelloServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>HelloServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>HelloServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>LoginServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>LoginServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>LoginServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/login<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后访问浏览器就可以了，这里不再赘述。</p><h3 id="返回响应"><a href="#返回响应" class="headerlink" title="返回响应"></a>返回响应</h3><blockquote><p>根据浏览器提交的账号密码返回登录成功或者失败<br>这一步本来应该通过访问数据库来实现，这里简化一下，直接在内存中进行校验<br>如果账号是 admin,密码是123, 就返回登录成功，否则返回登录失败</p></blockquote><p>判断账号密码是否为 admin 123，如果是就打印 success 否则就打印 fail</p><p>根据账号密码，创建对应的html字符串。</p><p>然后通过 缓存字符输出流<code>response.getWriter().println()</code> 发送到浏览器。</p><p>作用有点类似JavaScript中的document.Write(“”)或者PHP中的echo “”</p><p>注: 比较的时候把常量字符串”admin” “123”放前面，因为用户可能没有输入账号密码就提交，servlet会获取到null。 这样就规避了空指针异常的问题。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>PrintWriter<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>ServletException<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServlet<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletRequest<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletResponse<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoginServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">)</span>            <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        String name <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String password <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String html <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token string">"123"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">)</span>            html <span class="token operator">=</span> <span class="token string">"&lt;div style='color:green'>success&lt;/div>"</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            html <span class="token operator">=</span> <span class="token string">"&lt;div style='color:red'>fail&lt;/div>"</span><span class="token punctuation">;</span>        PrintWriter pw <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pw<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="流程总结"><a href="#流程总结" class="headerlink" title="流程总结"></a>流程总结</h3><p>整个流程是这样的：</p><h4 id="1-login-html"><a href="#1-login-html" class="headerlink" title="1.login.html"></a>1.login.html</h4><p>首先访问<code>http://127.0.0.1/login.html</code><br>打开一个静态的html页面，在这个页面中通过form表单，以post的形式提交账号密码给login</p><h4 id="2-根据-login路径，找到对应的Servlet"><a href="#2-根据-login路径，找到对应的Servlet" class="headerlink" title="2.根据/login路径，找到对应的Servlet"></a>2.根据/login路径，找到对应的Servlet</h4><p>tomcat接受到一个新的请求：<code>http://127.0.0.1/login</code><br>其路径是/login，接着就到配置文件web.xml进行匹配，发现/login，对应的Servlet类是 LoginServlet。</p><h4 id="3-实例化Servlet对象"><a href="#3-实例化Servlet对象" class="headerlink" title="3.实例化Servlet对象"></a>3.实例化Servlet对象</h4><p>Tomcat 定位到了LoginServlet后，发现并没有LoginServlet的实例存在，于是就调用LoginServlet的public无参的构造方法LoginServlet()实例化一个LoginServlet对象以备后续使用</p><h4 id="4-调用doGet或者doPost"><a href="#4-调用doGet或者doPost" class="headerlink" title="4.调用doGet或者doPost"></a>4.调用doGet或者doPost</h4><p>Tomcat从上一步拿到了LoginServlet的实例之后，根据页面login.html提交信息的时候带的method=”post”，去调用对应的doPost方法。</p><h4 id="5-request获取参数"><a href="#5-request获取参数" class="headerlink" title="5.request获取参数"></a>5.request获取参数</h4><p>接着流程进入了doPost方法中，</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>在这个方法中，通过参数request，把页面上传递来的账号和密码信息取出来</p><pre class="line-numbers language-java"><code class="language-java">String name <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>String password <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="6-response设置响应"><a href="#6-response设置响应" class="headerlink" title="6.response设置响应"></a>6.response设置响应</h4><p>接着，根据账号和密码是否正确(判断是否是admin和123)， 创建不同的html字符串。</p><p>然后把html字符串通过如下方式，设置在了response对象上。</p><pre class="line-numbers language-java"><code class="language-java">PrintWriter pw <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>pw<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>到这里，Servlet的工作就做完了。  </p><h4 id="7-tomcat把html传递给浏览器"><a href="#7-tomcat把html传递给浏览器" class="headerlink" title="7.tomcat把html传递给浏览器"></a>7.tomcat把html传递给浏览器</h4><p>在Servlet完成工作之后，tomcat拿到被Servlet修改过的response，根据这个response生成html 字符串，然后再通过HTTP协议，这个html字符串，回发给浏览器，浏览器再根据HTTP协议获取这个html字符串，并渲染在界面上。</p><p>这样在效果上，浏览器就可以看到Servlet中生成的字符串了。</p><h3 id="service"><a href="#service" class="headerlink" title="service()"></a>service()</h3><p>Servlet 需要提供对应的doGet() 与 doPost()方法</p><h4 id="doGet"><a href="#doGet" class="headerlink" title="doGet()"></a>doGet()</h4><p>当浏览器使用get方式提交数据的时候，servlet就需要使用<code>doGet()</code>方法来进行响应</p><p>哪些是get方式呢？</p><ul><li>form默认的提交方式</li><li>如果通过一个超链访问某个地址</li><li>如果在地址栏直接输入某个地址</li><li>ajax指定使用get方式的时候</li></ul><h4 id="doPost"><a href="#doPost" class="headerlink" title="doPost()"></a>doPost()</h4><p>当浏览器使用post方式提交数据的时候，servlet需要使用<code>doPost()</code>方法来进行响应</p><p>哪些是post方式呢？</p><ul><li>HTML中的form表单提交方式为 method=”post”的时候</li><li>ajax指定post方式的时候</li></ul><h4 id="service-1"><a href="#service-1" class="headerlink" title="service()"></a>service()</h4><p>LoginServlet继承了HttpServlet,同时也继承了一个方法 </p><pre class="line-numbers language-java"><code class="language-java"><span class="token function">service</span><span class="token punctuation">(</span>HttpServletRequest <span class="token punctuation">,</span> HttpServletResponse <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>实际上，在执行doGet()或者doPost()之前，都会先执行service()<br>由service()方法进行判断，到底该调用doGet()还是doPost()<br>可以发现，service(), doGet(), doPost() 三种方式的参数列表都是一样的。</p><p><strong>所以，有时候也会直接重写service()方法，在其中提供相应的服务，就不用区分到底是get还是post了。</strong></p><h3 id="中文问题"><a href="#中文问题" class="headerlink" title="中文问题"></a>中文问题</h3><h4 id="提交表单时的中文"><a href="#提交表单时的中文" class="headerlink" title="提交表单时的中文"></a>提交表单时的中文</h4><p>为了成功获取提交的中文，需要做如下操作:</p><ol><li><p>login.html中加上</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Content-Type<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/html; charset<span class="token punctuation">=</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这句话的目的是告诉浏览器，等下发消息给服务器的时候，使用UTF-8编码  </p></li><li><p>login.html</p><p>form的method修改为post</p></li><li><p>在servlet进行解码和编码</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes<span class="token operator">=</span>  name<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token string">"ISO-8859-1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>name <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>先根据ISO-8859-1解码，然后用UTF-8编码</p><p>这样就可以得到正确的中文参数了</p></li></ol><p>这样需要对每一个提交的数据都进行编码和解码处理，如果觉得麻烦，也可以使用一句话代替：</p><pre class="line-numbers language-java"><code class="language-java">request<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>并且把这句话放在request.getParameter()之前</p><p>以上是使用UTF-8的方式获取中文呢。 也可以使用GBK。把所有的UTF-8替换为GBK即可。 GB2312同理。</p><h4 id="返回中文的响应"><a href="#返回中文的响应" class="headerlink" title="返回中文的响应"></a>返回中文的响应</h4><p>在Servlet中，加上</p><pre class="line-numbers language-java"><code class="language-java">response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"text/html; charset=UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h3><p>一个Servlet的生命周期由<code>实例化</code>，<code>初始化</code>，<code>提供服务</code>，<code>销毁</code>，<code>被回收</code> 几个步骤组成</p><h4 id="实例化"><a href="#实例化" class="headerlink" title="实例化"></a>实例化</h4><p>当用户通过浏览器输入一个路径，这个路径对应的servlet被调用的时候，该Servlet就会被实例化</p><p>为LoginServlet显式提供一个构造方法 LoginServlet()</p><p>无论访问了多少次LoginServlet<br>LoginSerlvet构造方法 <code>只会执行一次</code>，所以Serlvet是 <code>单实例</code> 的</p><h4 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h4><p>LoginServlet 继承了HttpServlet，同时也间接继承了Servlet接口中的init() 方法</p><p><code>init()</code> 方法是一个实例方法，所以会在构造方法执行后执行。<br>Servlet接口中还有一个带参数的<code>init(ServletConfig var1)</code>，这个方法一般用于初始化的时候进行配置</p><p>无论访问了多少次LoginSerlvet，init初始化也 <code>只会执行一次</code>。</p><h4 id="提供服务"><a href="#提供服务" class="headerlink" title="提供服务"></a>提供服务</h4><p>接下来就是执行service()方法，然后通过浏览器传递过来的信息进行判断，是调用doGet()还是doPost()方法</p><p>然后在doGet()或者doPost()中执行我们编写的业务代码</p><h4 id="销毁"><a href="#销毁" class="headerlink" title="销毁"></a>销毁</h4><p>接着是销毁destroy()<br>在如下几种情况下，会调用destroy()</p><ol><li><p>该Servlet所在的web应用重新启动</p><p>在serverl.xml中配置该web应用的时候用到了</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Context</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/j2ee<span class="token punctuation">"</span></span> <span class="token attr-name">docBase</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/Users/sky03/Development/0_Document/IdeaProjects/JavaEE/web<span class="token punctuation">"</span></span> <span class="token attr-name">debug</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">reloadable</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>（Mac路径没有盘符，采用Unix文件系统）<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果把 reloadable=”<code>false</code>“ 改为reloadable=”<code>true</code>“ 就表示有任何类发生的更新，web应用会自动重启</p><p>当web应用自动重启的时候，destroy()方法就会被调用</p></li><li><p>关闭tomcat的时候 destroy()方法会被调用，但是这个一般都发生的很快，不易被发现。</p></li></ol><h4 id="被回收"><a href="#被回收" class="headerlink" title="被回收"></a>被回收</h4><p>当该Servlet被销毁后，就满足垃圾回收的条件了。 当下一次垃圾回收GC来临的时候，就有可能被回收。</p><p>这个。。。也是不容易被观察到的现象。</p><h3 id="跳转"><a href="#跳转" class="headerlink" title="跳转"></a>跳转</h3><p>页面跳转是开发一个web应用经常会发生的事情。 </p><p>比如登录成功或是失败后，分别会跳转到不同的页面。 </p><p>跳转的方式有两种，<code>服务端跳转</code>和<code>客户端跳转</code>  </p><h4 id="首先准备两个页面-success-html和fail-html"><a href="#首先准备两个页面-success-html和fail-html" class="headerlink" title="首先准备两个页面 success.html和fail.html"></a>首先准备两个页面 success.html和fail.html</h4><p>首先在web目录下准备两个页面 success.html,fail.html<br>分别用于显示登录成功 或者登录失败  </p><p>如果登录成功了，就<code>服务端跳转</code>到success.html  </p><p>如果登录失败了，就<code>客户端跳转</code>到fail.html</p><h4 id="服务端跳转"><a href="#服务端跳转" class="headerlink" title="服务端跳转"></a>服务端跳转</h4><p>在Servlet中进行服务端跳转的方式：</p><pre class="line-numbers language-java"><code class="language-java">request<span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span><span class="token string">"success.html"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>服务端跳转可以看到浏览器的地址依然是/login 路径，并不会变成success.html</p><h4 id="客户端跳转"><a href="#客户端跳转" class="headerlink" title="客户端跳转"></a>客户端跳转</h4><p>在Servlet中进行客户端跳转的方式：</p><pre class="line-numbers language-java"><code class="language-java">response<span class="token punctuation">.</span><span class="token function">sendRedirect</span><span class="token punctuation">(</span><span class="token string">"fail.html"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以观察到，浏览器地址发生了变化</p><p>示例代码：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>ServletException<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServlet<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletRequest<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletResponse<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoginServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> 1L<span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">service</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">)</span>            <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        String name <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String password <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token string">"123"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//服务器跳转</span>            request<span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span><span class="token string">"success.html"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//客户端跳转</span>            response<span class="token punctuation">.</span><span class="token function">sendRedirect</span><span class="token punctuation">(</span><span class="token string">"fail.html"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="自启动-也就是init"><a href="#自启动-也就是init" class="headerlink" title="自启动(也就是init)"></a>自启动(也就是init)</h3><p>有的时候会有这样的业务需求：<br>tomcat一启动，就需要执行一些初始化的代码，比如校验数据库的完整性等。</p><p>但是Servlet的生命周期是在用户访问浏览器对应的路径开始的。如果没有用户的第一次访问，就无法执行相关代码。 </p><p>这个时候，就需要Servlet实现<code>自启动</code> 即，伴随着tomcat的启动，自动启动初始化，在初始化方法init()中，就可以进行一些业务代码的工作了。</p><p>解决方法：</p><p>在web.xml中，配置Hello Servlet的地方，增加一条语句<br><code>&lt;load-on-startup&gt;10&lt;/load-on-startup&gt;</code></p><p>示例：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>HelloServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>HelloServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 初始化的时候启动 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>load-on-startup</span><span class="token punctuation">></span></span>10<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>load-on-startup</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>HelloServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>LoginServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>LoginServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>LoginServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/login<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>取值范围是1-99<br>即表明该Servlet会随着Tomcat的启动而初始化。<br>同时，为HelloServlet提供一个init(ServletConfig) 方法，验证自启动<br><strong>注意</strong>：要想给init加ServletConfig参数，必须导入<code>javax.servlet.ServletConfig</code>这个包才可以！</p><p><code>&lt;load-on-startup&gt;10&lt;/load-on-startup&gt;</code> 中的10表示启动顺序<br>如果有多个Servlet都配置了自动启动，数字越小，启动的优先级越高</p><p>然后就可以在init()方法 中实现想要的业务代码：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Date<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>ServletConfig<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServlet<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletRequest<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletResponse<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span>ServletConfig config<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//在这里编写业务代码</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"init of Hello Servlet"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"&lt;h1>Hello Servlet!&lt;/h1>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLocaleString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// TODO Auto-generated catch block</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="request常见方法"><a href="#request常见方法" class="headerlink" title="request常见方法"></a>request常见方法</h3><h4 id="request的常见方法"><a href="#request的常见方法" class="headerlink" title="request的常见方法"></a>request的常见方法</h4><p>request.getRequestURL(): 浏览器发出请求时的完整URL，包括协议 主机名 端口(如果有)<br>request.getRequestURI(): 浏览器发出请求的资源名部分，去掉了协议和主机名<br>request.getQueryString(): 请求行中的参数部分，只能显示以get方式发出的参数，post方式的看不到<br>request.getRemoteAddr(): 浏览器所处于的客户机的IP地址<br>request.getRemoteHost(): 浏览器所处于的客户机的主机名<br>request.getRemotePort(): 浏览器所处于的客户机使用的网络端口<br>request.getLocalAddr(): 服务器的IP地址<br>request.getLocalName(): 服务器的主机名<br>request.getMethod(): 得到客户机请求方式,一般是GET或者POST</p><p>示例代码：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>PrintWriter<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>ServletException<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServlet<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletRequest<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletResponse<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoginServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">service</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">)</span>            <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        String name <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String password <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"浏览器发出请求时的完整URL，包括协议 主机名 端口(如果有): "</span> <span class="token operator">+</span> request<span class="token punctuation">.</span><span class="token function">getRequestURL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"浏览器发出请求的资源名部分，去掉了协议和主机名: "</span> <span class="token operator">+</span> request<span class="token punctuation">.</span><span class="token function">getRequestURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请求行中的参数部分: "</span> <span class="token operator">+</span> request<span class="token punctuation">.</span><span class="token function">getQueryString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"浏览器所处于的客户机的IP地址: "</span> <span class="token operator">+</span> request<span class="token punctuation">.</span><span class="token function">getRemoteAddr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"浏览器所处于的客户机的主机名: "</span> <span class="token operator">+</span> request<span class="token punctuation">.</span><span class="token function">getRemoteHost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"浏览器所处于的客户机使用的网络端口: "</span> <span class="token operator">+</span> request<span class="token punctuation">.</span><span class="token function">getRemotePort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"服务器的IP地址: "</span> <span class="token operator">+</span> request<span class="token punctuation">.</span><span class="token function">getLocalAddr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"服务器的主机名: "</span> <span class="token operator">+</span> request<span class="token punctuation">.</span><span class="token function">getLocalName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"得到客户机请求方式: "</span> <span class="token operator">+</span> request<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String html <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token string">"123"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">)</span>            html <span class="token operator">=</span> <span class="token string">"&lt;div style='color:green'>登录成功&lt;/div>"</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            html <span class="token operator">=</span> <span class="token string">"&lt;div style='color:red'>登录失败&lt;/div>"</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"text/html; charset=UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        PrintWriter pw <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pw<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="获取参数-1"><a href="#获取参数-1" class="headerlink" title="获取参数"></a>获取参数</h4><p>request.getParameter(): 是常见的方法，用于获取单值的参数<br>request.getParameterValues(): 用于获取具有多值的参数，比如注册时候提交的 “hobits”，可以是多选的。<br>request.getParameterMap(): 用于遍历所有的参数，并返回Map类型。</p><p>本例准备了一个注册的例子<br>包括一个注册页面 register.html<br>服务端的 RegisterServlet</p><h4 id="获取头信息"><a href="#获取头信息" class="headerlink" title="获取头信息"></a>获取头信息</h4><p>request.getHeader() 获取浏览器传递过来的头信息。<br>比如:<code>getHeader(&quot;user-agent&quot;)</code> 可以获取浏览器的基本资料，这样就能判断是firefox、IE、chrome、或者是safari浏览器<br>其他参数：</p><p>host: 主机地址<br>user-agent: 浏览器基本资料<br>accept: 表示浏览器接受的数据类型<br>accept-language: 表示浏览器接受的语言<br>accept-encoding: 表示浏览器接受的压缩方式，是压缩方式，并非编码<br>connection: 是否保持连接<br>cache-control: 缓存时限</p><p>request.getHeaderNames() 获取浏览器所有的头信息名称，根据头信息名称就能遍历出所有的头信息</p><h3 id="response-用法"><a href="#response-用法" class="headerlink" title="response 用法"></a>response 用法</h3><h4 id="设置响应内容"><a href="#设置响应内容" class="headerlink" title="设置响应内容"></a>设置响应内容</h4><p>通过response设置响应已经用得比较多了<br>PrintWriter pw= response.getWriter();<br>通过response.getWriter(); 获取一个PrintWriter 对象<br>可以使用println(),append(),write(),format()等等方法设置返回给浏览器的html内容。</p><h4 id="设置响应格式"><a href="#设置响应格式" class="headerlink" title="设置响应格式"></a>设置响应格式</h4><p><code>response.setContentType(&quot;text/html&quot;);</code><br>“text/html” 是即格式 ，在request获取头信息 中对应的request.getHeader(“accept”).<br>“text/html” 是存在的，表示浏览器可以识别这种格式，如果换一个其他的格式， 比如 “text/lol” ，浏览器不能识别，那么打开此servlet就会弹出一个下载的对话框。</p><p>这样的手段也就常常用于实现下载功能（貌似不能用了）</p><h4 id="设置响应编码"><a href="#设置响应编码" class="headerlink" title="设置响应编码"></a>设置响应编码</h4><p>设置响应编码有两种方式</p><pre class="line-numbers language-java"><code class="language-java"><span class="token number">1</span><span class="token punctuation">.</span> response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"text/html; charset=UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">2</span><span class="token punctuation">.</span> response<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这两种方式都需要在response.getWriter()调用之前执行才能生效。</p><p>他们的区别在于</p><p><code>1. response.setContentType(&quot;text/html; charset=UTF-8&quot;);</code><br>不仅发送到浏览器的内容会使用UTF-8编码，而且还通知浏览器使用UTF-8编码方式进行显示。所以总能正常显示中文</p><p><code>2. response.setCharacterEncoding(&quot;UTF-8&quot;);</code><br>仅仅是发送的浏览器的内容是UTF-8编码的，至于浏览器是用哪种编码方式显示不管。 所以当浏览器的显示编码方式不是UTF-8的时候，就会看到乱码，需要手动再进行一次设置。</p><h4 id="301或者302客户端跳转"><a href="#301或者302客户端跳转" class="headerlink" title="301或者302客户端跳转"></a>301或者302客户端跳转</h4><p>客户端有两种跳转<br>302 表示临时跳转<br>301 表示永久性跳转</p><p>302就是前面在客户端跳转章节用到过的</p><pre class="line-numbers language-java"><code class="language-java">response<span class="token punctuation">.</span><span class="token function">sendRedirect</span><span class="token punctuation">(</span><span class="token string">"fail.html"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>301要使用另外的手段：</p><pre class="line-numbers language-java"><code class="language-java">response<span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span><span class="token number">301</span><span class="token punctuation">)</span><span class="token punctuation">;</span>response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"Location"</span><span class="token punctuation">,</span> <span class="token string">"fail.html"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>用户感受不出这两种跳转的区别，但是可以借助火狐的调试工具看到响应的头信息是:<br>301 Moved Permanently。<br>301和302的区别主要在搜索引擎对页面排名的时候有影响，这是属于SEO范畴的概念，在此就不展开了。</p><p>示例：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token string">"123"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    request<span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span><span class="token string">"success.html"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    response<span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span><span class="token number">301</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"Location"</span><span class="token punctuation">,</span> <span class="token string">"fail.html"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="设置不使用缓存"><a href="#设置不使用缓存" class="headerlink" title="设置不使用缓存"></a>设置不使用缓存</h4><p>使用缓存可以加快页面的加载，降低服务端的负担。但是也可能看到过时的信息，可以通过如下手段通知浏览器不要使用缓存</p><pre class="line-numbers language-java"><code class="language-java">response<span class="token punctuation">.</span><span class="token function">setDateHeader</span><span class="token punctuation">(</span><span class="token string">"Expires"</span><span class="token punctuation">,</span><span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"Cache-Control"</span><span class="token punctuation">,</span><span class="token string">"no-cache"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"pragma"</span><span class="token punctuation">,</span><span class="token string">"no-cache"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>示例：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Date<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServlet<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletRequest<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletResponse<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            response<span class="token punctuation">.</span><span class="token function">setDateHeader</span><span class="token punctuation">(</span><span class="token string">"Expires"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"Cache-Control"</span><span class="token punctuation">,</span> <span class="token string">"no-cache"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"pragma"</span><span class="token punctuation">,</span> <span class="token string">"no-cache"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"&lt;h1>Hello Servlet!&lt;/h1>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLocaleString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// TODO Auto-generated catch block</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="上传文件"><a href="#上传文件" class="headerlink" title="上传文件"></a>上传文件</h3><h4 id="首先准备上传页面-upload-html"><a href="#首先准备上传页面-upload-html" class="headerlink" title="首先准备上传页面 upload.html"></a>首先准备上传页面 upload.html</h4><p>上传页面有两点需要注意</p><ol><li><p>form 的method必须是post的，get不能上传文件。 还需要加上enctype=”multipart/form-data” 表示提交的数据是二进制文件</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>uploadPhoto<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span> <span class="token attr-name">enctype</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>multipart/form-data<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>input标签的属性type=”file” </p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>filepath<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>示例：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Content-Type<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/html; charset<span class="token punctuation">=</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>uploadPhoto<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span> <span class="token attr-name">enctype</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>multipart/form-data<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>英雄名称:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>heroName<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>上传头像 : <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>filepath<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>上传<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h4 id="接着准备-UploadPhotoServlet"><a href="#接着准备-UploadPhotoServlet" class="headerlink" title="接着准备 UploadPhotoServlet"></a>接着准备 UploadPhotoServlet</h4><p>在UploadPhotoServlet进行上传的功能开发。</p><ol><li><p>需要用到两个第三方的jar包，commons-io-1.4.jar和commons-fileupload-1.2.2.jar。 并放在WEB-INF/lib下</p></li><li><p>前部分代码是固定写法，用来做一些准备工作。 直到遍历出Item,一个Item就是对应一个浏览器提交的数据，通过item.getInputStream可以打开浏览器上传的文件的输入流。</p></li><li><p>客户提交的文件名有可能是一样的，所以在服务端保存文件的时候，不能使用客户提交的文件名。这里使用的是一种粗糙的解决文件名重复的办法，即使用时间戳。 </p></li><li><p>读取输入流中的数据，保存在服务端的目录下 e:/project/j2ee/web/uploaded，这个目录是通过getRealPath获取到的。 如果项目部署在其他地方，那么会自动做相应的变化。<br>注： 为什么要放这里？ 因为后续网页上显示的时候是通过<a href="http://127.0.0.1/uploaded/xxx.jpg" target="_blank" rel="noopener">http://127.0.0.1/uploaded/xxx.jpg</a> 路径来获取图片。</p></li></ol><ol start="5"><li>根据临时生成的文件名，创建一个html img元素，然后通过response返回浏览器</li></ol><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>File<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileNotFoundException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileOutputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>InputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>PrintWriter<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Iterator<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>ServletException<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServlet<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletRequest<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletResponse<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>fileupload<span class="token punctuation">.</span>FileItem<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>fileupload<span class="token punctuation">.</span>FileUploadException<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>fileupload<span class="token punctuation">.</span>disk<span class="token punctuation">.</span>DiskFileItemFactory<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>fileupload<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>ServletFileUpload<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UploadPhotoServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String filename <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            DiskFileItemFactory factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DiskFileItemFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ServletFileUpload upload <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServletFileUpload</span><span class="token punctuation">(</span>factory<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 设置上传文件的大小限制为1M</span>            factory<span class="token punctuation">.</span><span class="token function">setSizeThreshold</span><span class="token punctuation">(</span><span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            List items <span class="token operator">=</span> null<span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                items <span class="token operator">=</span> upload<span class="token punctuation">.</span><span class="token function">parseRequest</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">FileUploadException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            Iterator iter <span class="token operator">=</span> items<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>iter<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                FileItem item <span class="token operator">=</span> <span class="token punctuation">(</span>FileItem<span class="token punctuation">)</span> iter<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>item<span class="token punctuation">.</span><span class="token function">isFormField</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 根据时间戳创建头像文件</span>                    filename <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">".jpg"</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//通过getRealPath获取上传文件夹，如果项目在e:/project/j2ee/web,那么就会自动获取到 e:/project/j2ee/web/uploaded</span>                    String photoFolder <span class="token operator">=</span>request<span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getRealPath</span><span class="token punctuation">(</span><span class="token string">"uploaded"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    File f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>photoFolder<span class="token punctuation">,</span> filename<span class="token punctuation">)</span><span class="token punctuation">;</span>                    f<span class="token punctuation">.</span><span class="token function">getParentFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mkdirs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 通过item.getInputStream()获取浏览器上传的文件的输入流</span>                    InputStream is <span class="token operator">=</span> item<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 复制文件</span>                    FileOutputStream fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">byte</span> b<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token keyword">int</span> length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span> <span class="token operator">!=</span> <span class="token punctuation">(</span>length <span class="token operator">=</span> is<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        fos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> length<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    fos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span><span class="token function">getFieldName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    String value <span class="token operator">=</span> item<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    value <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>value<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token string">"ISO-8859-1"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            String html <span class="token operator">=</span> <span class="token string">"&lt;img width='200' height='150' src='uploaded/%s' />"</span><span class="token punctuation">;</span>            response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"text/html"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            PrintWriter pw<span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            pw<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>html<span class="token punctuation">,</span> filename<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">FileNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// TODO Auto-generated catch block</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// TODO Auto-generated catch block</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="配置web-xml-1"><a href="#配置web-xml-1" class="headerlink" title="配置web.xml"></a>配置web.xml</h4><p>配置UploadPhotoServlet</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>UploadPhotoServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>UploadPhotoServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>UploadPhotoServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/uploadPhoto<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span>   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="在项目中导入jar包"><a href="#在项目中导入jar包" class="headerlink" title="在项目中导入jar包"></a>在项目中导入jar包</h4><p>先把两个jar包commons-io-1.4.jar，commons-fileupload-1.2.2.jar 复制到WEB-INF/lib 目录下<br>把jar包导入到项目中，导包办法：右键 project-&gt;properties-&gt;java build path-&gt;libaries-&gt;add external jars</p><h4 id="上传测试"><a href="#上传测试" class="headerlink" title="上传测试"></a>上传测试</h4><p>重启tomcat, 打开<code>http://127.0.0.1/upload.html</code>页面进行上传</p><p>testing。。。</p><h4 id="如何处理其他非File字段"><a href="#如何处理其他非File字段" class="headerlink" title="如何处理其他非File字段"></a>如何处理其他非File字段</h4><p>因为浏览器指定了以二进制的形式提交数据，那么就不能通过常规的手段获取非File字段：<br><code>request.getParameter(&quot;heroName&quot;)</code></p><p>在遍历Item时(Item即对应浏览器提交的字段)，可以通过<br><code>item.isFormField</code><br>来判断是否是常规字段还是提交的文件。 当item.isFormField返回true的时候，就表示是常规字段。</p><p>然后通过item.getFieldName()和item.getString()就知道分别是哪个字段，以及字段的值了。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>File<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileNotFoundException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileOutputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>InputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>PrintWriter<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Iterator<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>ServletException<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServlet<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletRequest<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletResponse<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>fileupload<span class="token punctuation">.</span>FileItem<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>fileupload<span class="token punctuation">.</span>FileUploadException<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>fileupload<span class="token punctuation">.</span>disk<span class="token punctuation">.</span>DiskFileItemFactory<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>fileupload<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>ServletFileUpload<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UploadPhotoServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String filename <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            DiskFileItemFactory factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DiskFileItemFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ServletFileUpload upload <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServletFileUpload</span><span class="token punctuation">(</span>factory<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 设置上传文件的大小限制为1M</span>            factory<span class="token punctuation">.</span><span class="token function">setSizeThreshold</span><span class="token punctuation">(</span><span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            List items <span class="token operator">=</span> null<span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                items <span class="token operator">=</span> upload<span class="token punctuation">.</span><span class="token function">parseRequest</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">FileUploadException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            Iterator iter <span class="token operator">=</span> items<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>iter<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                FileItem item <span class="token operator">=</span> <span class="token punctuation">(</span>FileItem<span class="token punctuation">)</span> iter<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>item<span class="token punctuation">.</span><span class="token function">isFormField</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 根据时间戳创建头像文件</span>                    filename <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">".jpg"</span><span class="token punctuation">;</span>                    String photoFolder <span class="token operator">=</span> <span class="token string">"e:\\project\\j2ee\\web\\uploaded"</span><span class="token punctuation">;</span>                    File f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>photoFolder<span class="token punctuation">,</span> filename<span class="token punctuation">)</span><span class="token punctuation">;</span>                    f<span class="token punctuation">.</span><span class="token function">getParentFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mkdirs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 通过item.getInputStream()获取浏览器上传的文件的输入流</span>                    InputStream is <span class="token operator">=</span> item<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 复制文件</span>                    FileOutputStream fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">byte</span> b<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token keyword">int</span> length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span> <span class="token operator">!=</span> <span class="token punctuation">(</span>length <span class="token operator">=</span> is<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        fos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> length<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    fos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span><span class="token function">getFieldName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    String value <span class="token operator">=</span> item<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    value <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>value<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token string">"ISO-8859-1"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            String html <span class="token operator">=</span> <span class="token string">"&lt;img width='200' height='150' src='uploaded/%s' />"</span><span class="token punctuation">;</span>            PrintWriter pw<span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            pw<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>html<span class="token punctuation">,</span> filename<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">FileNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// TODO Auto-generated catch block</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// TODO Auto-generated catch block</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> J2EE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> J2EE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tomcat</title>
      <link href="/posts/24584.html"/>
      <url>/posts/24584.html</url>
      
        <content type="html"><![CDATA[<h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><p>![](<a href="https://sky03-blog-images.oss-cn-beijing.aliyuncs.com/blog-img/2019-03-16" target="_blank" rel="noopener">https://sky03-blog-images.oss-cn-beijing.aliyuncs.com/blog-img/2019-03-16</a> 15.56.12.png)</p><h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h2><h3 id="一般问题"><a href="#一般问题" class="headerlink" title="一般问题"></a>一般问题</h3><ul><li><p>黑色窗口一闪而过，就没有了</p><ul><li>解决方法：Tomcat需要JAVA_HOME，在环境变量中加入JAVA_HOME。</li></ul></li><li><p>访问地址后面多加了一个斜杠</p><p>本来应该访问</p><pre class="line-numbers language-http"><code class="language-http"><span class="token header-name keyword">http:</span>//127.0.0.1:8080/j2ee/login.html<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>但是却访问了地址：</p><pre class="line-numbers language-http"><code class="language-http"><span class="token header-name keyword">http:</span>//127.0.0.1:8080/j2ee/login.html/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h3 id="端口占用问题"><a href="#端口占用问题" class="headerlink" title="端口占用问题"></a>端口占用问题</h3><ul><li><p>查看80端口被哪些程序占用了</p><p>使用命令</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">netstat</span> -ano<span class="token operator">|</span>findstr <span class="token string">"80"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看 端口号包含”80”的占用情况  </p><p>查看对应的pid(process id) 进程id  </p></li><li><p>根据pid（进程id） 查询对应的应用程序</p><p>使用命令: </p><pre class="line-numbers language-bash"><code class="language-bash">tasklist<span class="token operator">|</span>findstr <span class="token string">"1828"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>根据上一步找到的对应的程序</p><p>然后进行关闭</p></li><li><p>根据名称 结束该程序</p><p>最后使用</p><pre class="line-numbers language-bash"><code class="language-bash">taskkill /f /t /im <span class="token operator">&lt;</span>your process<span class="token operator">></span>.exe<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>结束成功会提示：</p><p>成功： 已终止 。。。</p></li></ul><h2 id="项目的部署方式"><a href="#项目的部署方式" class="headerlink" title="项目的部署方式"></a>项目的部署方式</h2><ol><li><p>直接将项目放到webapps目录即可</p><ul><li><p>在webapps目录下建立文件夹，虚拟路径就是文件夹名字</p></li><li><p>简化部署，将项目打包成一个war包，再将war包放到webapps目录下。</p><ul><li>war包会自动解压，直接访问即可；</li><li>如果删除war包，解压的目录也会自动删除。</li></ul></li></ul></li><li><p>配置conf/server.xml文件</p><p>在<code>&lt;Host&gt;</code>标签体中加入以下语句</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Context</span> <span class="token attr-name">docBase</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/User/sky03/hello<span class="token punctuation">"</span></span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/hello<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p>docBase： 项目存放的物理路径</p></li><li><p>path：虚拟路径</p></li><li><p>修改完需要重启服务器</p></li></ul></li><li><p>在<code>conf/Catalina/localhost</code>创建任意名称的xml文件</p><p>在文件中直接编写<code>&lt;Context docBase=&quot;/User/sky03/hello&quot; /&gt;</code>即可</p><ul><li>属性path可以省略不写。</li><li>虚拟目录为创建的xml文件的名称。</li><li>这种方式被称为热部署，如果xml文件有修改，不需要重启服务器即可完成资源更新。</li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> J2EE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> J2EE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java之异常处理</title>
      <link href="/posts/51392.html"/>
      <url>/posts/51392.html</url>
      
        <content type="html"><![CDATA[<h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><blockquote><p>异常处理常见手段： try catch finally throws</p></blockquote><h3 id="try-catch"><a href="#try-catch" class="headerlink" title="try catch"></a>try catch</h3><ul><li><p>将可能抛出异常的代码块放在<code>try</code>代码块里</p></li><li><p>如果<code>try</code>里没有异常，就回顺序往下执行，并且不执行<code>catch</code>块中的代码</p></li><li><p>如果<code>try</code>存在异常，<code>try</code> 里的代码会立即终止，程序流程会运行到对应的<code>catch</code>块中,在<code>catch</code>块中还可以自定义语句，来应对产生的异常</p></li><li><p>e.printStackTrace(); 会打印出方法的调用痕迹</p><pre class="line-numbers language-java"><code class="language-java"> <span class="token keyword">try</span><span class="token punctuation">{</span>     <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="使用异常的父类进行catch"><a href="#使用异常的父类进行catch" class="headerlink" title="使用异常的父类进行catch"></a>使用异常的父类进行catch</h3></li></ul><p>所有的异常都是<code>Exception</code>的子类，所以如果不知道<code>try块</code>会发生什么异常，可以用Exception父类来接收异常</p><pre class="line-numbers language-java"><code class="language-java">File f<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"d:/LOL.exe"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">try</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"试图打开 d:/LOL.exe"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"成功打开"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"d:/LOL.exe不存在"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="多异常捕捉办法1"><a href="#多异常捕捉办法1" class="headerlink" title="多异常捕捉办法1"></a>多异常捕捉办法1</h3><ul><li><p>有的时候一段代码会抛出多种异常</p></li><li><p>解决办法之一是分别进行catch</p><p>示例：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">try</span><span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>Exception1 e<span class="token punctuation">)</span><span class="token punctuation">{</span>  e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>Exception1 e<span class="token punctuation">)</span><span class="token punctuation">{</span>  e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="多异常捕捉办法2"><a href="#多异常捕捉办法2" class="headerlink" title="多异常捕捉办法2"></a>多异常捕捉办法2</h3><p>另一个种办法是把多个异常，放在一个catch里统一捕捉 </p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">FileNotFoundException</span> <span class="token operator">|</span> ParseException e<span class="token punctuation">)</span><span class="token punctuation">{</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这种方式从 JDK7开始支持，好处是捕捉的代码更紧凑，不足之处是，一旦发生异常，不能确定到底是哪种异常，需要通过instanceof 进行判断具体的异常类型<br>当然如果对不同异常的处理方法一致，也可以不用写if判断</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception1</span> <span class="token operator">|</span> Exceptione2 e<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token keyword">instanceof</span> <span class="token class-name">Exception1</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token keyword">instanceof</span> <span class="token class-name">Exception2</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Finally"><a href="#Finally" class="headerlink" title="Finally"></a>Finally</h3><p>无论是否出现异常，finally中的代码都会被执行</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">try</span><span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span> <span class="token keyword">finally</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"无论你怎么样，我都会被执"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="throws"><a href="#throws" class="headerlink" title="throws"></a>throws</h3><p><strong>敲！以下都是重点！</strong><br>举个栗子：<br>  主方法调用method1<br>  method1调用method2<br>  method2中打开文件</p><p>method2中有异常需要处理<br>但是method2不打算处理，而是把这个异常通过throws抛出去，抛给method1<br>那么method1就会接到该异常。 处理办法也是两种，要么是try catch处理掉，要么也是抛出去。<br>method1选择本地try catch住 一旦try catch住了，就相当于把这个异常消化掉了，主方法在调用method1的时候，就不需要进行异常处理了</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> exception<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>File<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileInputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileNotFoundException<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestException</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">method1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">method1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token function">method2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">FileNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// TODO Auto-generated catch block</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">method2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> FileNotFoundException <span class="token punctuation">{</span>        File f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"d:/LOL.exe"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"试图打开 d:/LOL.exe"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"成功打开"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="throw和throws的区别"><a href="#throw和throws的区别" class="headerlink" title="throw和throws的区别"></a>throw和throws的区别</h3><p>throws与throw这两个关键字接近，不过意义不一样，有如下区别：</p><ol><li><code>throws</code> 出现在方法声明上，而<code>throw</code>通常都出现在方法体内。</li><li><code>throws</code> 表示出现异常的一种可能性，并不一定会发生这些异常；throw则是抛出了异常，执行throw则一定抛出了某个异常对象。  </li></ol><h2 id="异常分类"><a href="#异常分类" class="headerlink" title="异常分类"></a>异常分类</h2><p>总体上异常分三类：</p><ol><li>错误（Error），是程序无法处理的错误，表示运行应用程序中较严重问题。</li><li>运行时异常（RuntimeException）,运行的时候才会被检查出来的异常</li><li>非运行时异常（编译异常），编译的时候就出现的异常，即编译不通过</li></ol><blockquote><p>注意：异常和错误的区别：异常能被程序本身可以处理，错误是无法处理。</p></blockquote><p>科普：<br>Java之所以会设计运行时异常的原因之一，是因为下标越界，空指针这些运行时异常太过于普遍，如果都需要进行捕捉，代码的可读性就会变得很糟糕。</p><h2 id="Throwable"><a href="#Throwable" class="headerlink" title="Throwable"></a>Throwable</h2><p>Throwable是类，Exception和Error都继承了该类<br>所以在捕捉的时候，也可以使用Throwable进行捕捉<br>如图： 异常分Error和Exception<br>Exception里又分运行时异常和可查异常。</p><p><img src="/medias/loading.gif" data-original="http://sky03-images.oss-cn-beijing.aliyuncs.com/18-12-24/52901676.jpg" alt="Throwable"></p><h2 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h2><ul><li>自定义异常的实现，通常就是提供一个构造方法。</li><li>其实很多常见异常都是提供一个新的构造方法，比如：<br>ClassNotFoundException等</li><li>异常对象本身没有实际功能，只是一个标识，让你明白你具体是出现了哪个异常<ul><li>比如：ClassNotFoundException和PointNullException，都能抛出相同的异常，只是类名不一样，这样你就能区分出现了哪种异常</li></ul></li></ul><h3 id="创建自定义异常"><a href="#创建自定义异常" class="headerlink" title="创建自定义异常"></a>创建自定义异常</h3><p>代码如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//这里继承的Exception（编译异常）也可以换成RuntimeException（运行时才能被检查到的异常），具体可以根据可以根据业务需求来决定使用哪个</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyException</span> <span class="token keyword">extends</span> <span class="token class-name">Exception</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">MyException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">MyException</span><span class="token punctuation">(</span>String message<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//有异常时一般会给个提示信息，就是这个message</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="使用自定义异常"><a href="#使用自定义异常" class="headerlink" title="使用自定义异常"></a>使用自定义异常</h3><p>一般情况如下：</p><pre class="line-numbers language-java"><code class="language-java">pubic <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">//这里的throws代表有可能会发生异常，如果有就抛出MyException</span>    <span class="token keyword">public</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> MyException<span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//一般在这里做一个判断，如果出现了你自定义的xxx，就会抛出异常</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>xxx<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//这里的throw是直接抛出异常，并且new一个MyException对象，再给个提示参数</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">MyException</span><span class="token punctuation">(</span><span class="token string">"这里可以写一些异常的提示信息,也可以不写"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>           <span class="token comment" spellcheck="true">//如果没有以上异常，就可以在下面执行你想要执行的语句</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> xxxxxx<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="JDK1-7新特性"><a href="#JDK1-7新特性" class="headerlink" title="JDK1.7新特性"></a>JDK1.7新特性</h2><ul><li><p>在<code>try</code>后面可以加括号，里面放的一般都是实现了closable()接口的类</p></li><li><p>这样的作用是：try完<code>{}</code>里面的内容后会自动关闭<code>()</code>里面的连接</p><p>例如：流的连接，或者数据库的连接</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">try</span><span class="token punctuation">(</span>FileInputStream fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span><span class="token punctuation">{</span>    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="调试之debug"><a href="#调试之debug" class="headerlink" title="调试之debug"></a>调试之debug</h2><p>debug：调试是程序员编码过程中找逻辑错误的一个重要手段<br>断点：</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 中级 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java之集合框架</title>
      <link href="/posts/15243.html"/>
      <url>/posts/15243.html</url>
      
        <content type="html"><![CDATA[<h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h2><h3 id="集合的由来"><a href="#集合的由来" class="headerlink" title="集合的由来"></a>集合的由来</h3><p>通常，我们的程序需要根据程序运行时才知道创建多少个对象。但若非程序运行，程序开发阶段，我们根本不知道到底需要多少个数量的对象，甚至不知道它的准确类型。为了满足这些常规的编程需要，我们要求能在任何时候，任何地点创建任意数量的对象，而这些对象用什么来容纳呢？我们首先想到了数组，但是数组只能放统一类型的数据，而且其长度是固定的，那怎么办呢？集合便应运而生了！</p><h3 id="集合是什么？"><a href="#集合是什么？" class="headerlink" title="集合是什么？"></a>集合是什么？</h3><p>Java集合类存放于 java.util 包中，是一个用来存放对象的容器。</p><p><strong>注意：</strong></p><blockquote><p><strong>①、集合只能存放对象。比如你存一个 int 型数据 1放入集合中，其实它是自动转换成 Integer 类后存入的，Java中每一种基本类型都有对应的引用类型。</strong></p><p><strong>②、集合存放的是多个对象的引用，对象本身还是放在堆内存中。</strong></p><p><strong>③、集合可以存放不同类型，不限数量的数据类型。</strong></p></blockquote><p>集合中分为三大接口：<br>Collection、Map（不是地图的意思，是Mapping 映射）、Iterator</p><h2 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h2><p>使用ArrayList,必须导包：<br><code>import java.util.ArrayList;</code></p><h3 id="与数组的区别"><a href="#与数组的区别" class="headerlink" title="与数组的区别"></a>与数组的区别</h3><h4 id="使用数组的局限性"><a href="#使用数组的局限性" class="headerlink" title="使用数组的局限性"></a>使用数组的局限性</h4><p>如果要存放多个对象，可以使用数组，但是数组有局限性<br>比如 声明长度是10的数组<br>不用的数组就浪费了<br>超过10的个数，又放不下  </p><h4 id="ArrayList存放对象"><a href="#ArrayList存放对象" class="headerlink" title="ArrayList存放对象"></a>ArrayList存放对象</h4><p>为了解决数组的局限性，引入容器类的概念。 最常见的容器类就是 <code>ArrayList</code><br>容器的容量”capacity”会随着对象的增加，自动增长，不用担心会出现数组的越界问题。  </p><h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h3><h4 id="增加"><a href="#增加" class="headerlink" title="增加"></a>增加</h4><p><code>add</code> 有两种用法<br>第一种是直接add对象，会把对象加在最后面</p><pre class="line-numbers language-java"><code class="language-java">heroes<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Hero</span><span class="token punctuation">(</span><span class="token string">"hero "</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>第二种是在指定位置加对象</p><pre class="line-numbers language-java"><code class="language-java">heroes<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> specialHero<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="判断是否包含"><a href="#判断是否包含" class="headerlink" title="判断是否包含"></a>判断是否包含</h4><p>用法：<br><code>a.contains(b)</code> 判断a里面有没有包含b<br>返回 boolean 值</p><h4 id="获取指定位置的对象"><a href="#获取指定位置的对象" class="headerlink" title="获取指定位置的对象"></a>获取指定位置的对象</h4><p>用法：<br><code>a.get(b)</code> 获取a里面指定位置b的对象(跟数组的下标一样，从0算起)<br>返回 int<br>如果输入的下标越界，一样会报错  </p><h4 id="获取对象所处的位置"><a href="#获取对象所处的位置" class="headerlink" title="获取对象所处的位置"></a>获取对象所处的位置</h4><p>用法：<br><code>a.indexOf(b)</code> 获取b对象在集合a中所处的位置<br>返回 int<br>如果b不是集合a里面的对象，则会返回-1（通常找不到都会返回-1）  </p><h4 id="删除集合中的对象"><a href="#删除集合中的对象" class="headerlink" title="删除集合中的对象"></a>删除集合中的对象</h4><p>用法：<br><code>a.remove(b)</code> 把集合a中的对象b删除</p><p>b有两种形式：<br>remove可以根据<code>下标</code>删除集合a中的元素 当然下标越界一样会报错 </p><pre class="line-numbers language-java"><code class="language-java">heroes<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>也可以根据<code>对象的引用</code>删除</p><pre class="line-numbers language-java"><code class="language-java">heroes<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>specialHero2<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="替换指定位置的对象"><a href="#替换指定位置的对象" class="headerlink" title="替换指定位置的对象"></a>替换指定位置的对象</h4><p>用法：<br><code>a.set(b,c)</code> 在集合a中，用c替换掉b<br>例如：<br><code>heroes.set(&lt;被替换的集合元素下标&gt;, &lt;要替换的&gt;);</code></p><h4 id="获取集合大小"><a href="#获取集合大小" class="headerlink" title="获取集合大小"></a>获取集合大小</h4><p>用法：<br><code>a.size()</code> 获取集合a的长度 （类似数组的length()）<br>返回 int<br>例如：<br><code>heros.size()</code></p><h4 id="转换为数组"><a href="#转换为数组" class="headerlink" title="转换为数组"></a>转换为数组</h4><p>用法：<br><code>a.toArray(b)</code> 可以把集合a转换为数组b<br>需要注意的是，如果要转换为一个Hero类型的数组，那么需要传递一个Hero数组类型的对象给toArray()，这样toArray方法才知道，你希望转换为哪种类型的数组，否则只能转换为Object数组  </p><h4 id="把另一个容器所有对象都加进来"><a href="#把另一个容器所有对象都加进来" class="headerlink" title="把另一个容器所有对象都加进来"></a>把另一个容器所有对象都加进来</h4><p>用法：<br><code>a.addAll(b)</code>  把集合b中的对象添加到集合a中</p><h4 id="清空"><a href="#清空" class="headerlink" title="清空"></a>清空</h4><p>用法：<br><code>a.clear()</code> 清空集合a中的所有对象元素</p><p>所有示例代码：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>sky03<span class="token punctuation">.</span>demo<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span>event<span class="token punctuation">.</span>DocumentListener<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CollectionFunctionDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>        ArrayList<span class="token operator">&lt;</span>Hero<span class="token operator">></span> heroes <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">6</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Hero hero <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Hero</span><span class="token punctuation">(</span><span class="token string">"hero "</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>             heroes<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>hero<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        Hero specialHero<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Hero</span><span class="token punctuation">(</span><span class="token string">"specialHero"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        heroes<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>specialHero<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>heroes<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*------------------------常用方法demo------------------------------*/</span>        <span class="token comment" spellcheck="true">//a.contains(b)判断a里面有没有包含b</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"contains---------------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"虽然一个新的对象名字也叫 hero 1，但是contains的返回是:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>heroes<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Hero</span><span class="token punctuation">(</span><span class="token string">"hero 1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"而对specialHero的判断，contains的返回是:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>heroes<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>specialHero<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//specialHero是一个对象的引用</span>        <span class="token comment" spellcheck="true">//a.get(b) 获取a里面指定位置b的对象(跟数组的下标一样，从0算起)</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"get---------------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Hero h1<span class="token operator">=</span>heroes<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>h1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//a.indexOf(b) 获取b对象在集合a中所处的位置</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"indexOf---------------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"specialHero对象所处的位置是"</span><span class="token operator">+</span>heroes<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>specialHero<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"新的英雄，但是名字是\"hero 1\"所处的位置:"</span><span class="token operator">+</span>heroes<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Hero</span><span class="token punctuation">(</span><span class="token string">"hero 1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//a.remove(b) 把集合a中的对象b删除</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"remove---------------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"删除前的 "</span><span class="token operator">+</span>heroes<span class="token punctuation">)</span><span class="token punctuation">;</span>        heroes<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        heroes<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>specialHero<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"删除后的 "</span><span class="token operator">+</span>heroes<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//`a.set(b,c)` 在集合a中，用c替换掉b</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"set---------------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"替换前："</span><span class="token operator">+</span>heroes<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"把下标是3的元素，替换为\"set hero\""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        heroes<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Hero</span><span class="token punctuation">(</span><span class="token string">"set hero"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"替换后："</span><span class="token operator">+</span>heroes<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取集合大小</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"size---------------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"获取heroes的长度："</span><span class="token operator">+</span>heroes<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//转换为数组</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"toArray---------------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Hero hs<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Hero</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        heroes<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span>hs<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"数组:"</span> <span class="token operator">+</span>hs<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//把另一个容器里所有的元素，都加入到该容器里来</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"addAll---------------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ArrayList anotherHeroes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        anotherHeroes<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Hero</span><span class="token punctuation">(</span><span class="token string">"hero a"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        anotherHeroes<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Hero</span><span class="token punctuation">(</span><span class="token string">"hero b"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        anotherHeroes<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Hero</span><span class="token punctuation">(</span><span class="token string">"hero c"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"anotherHeros heros:\t"</span> <span class="token operator">+</span> anotherHeroes<span class="token punctuation">)</span><span class="token punctuation">;</span>        heroes<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>anotherHeroes<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"把另一个ArrayList的元素都加入到当前ArrayList:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ArrayList heroes:\t"</span> <span class="token operator">+</span> heroes<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//清空</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"clear---------------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ArrayList heroes:\t"</span> <span class="token operator">+</span> heroes<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"使用clear清空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        heroes<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ArrayList heroes:\t"</span> <span class="token operator">+</span> heroes<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Hero</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Hero</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span>name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//如果不重写toString，println出来的是对象内存地址</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="List接口"><a href="#List接口" class="headerlink" title="List接口"></a>List接口</h3><ol><li>有序的</li><li>可以重复的</li><li>允许有多个null元素</li><li>具体的实现有常用的：ArrayList、Vector、LinkedList</li></ol><h4 id="ArrayList和List"><a href="#ArrayList和List" class="headerlink" title="ArrayList和List"></a>ArrayList和List</h4><p>ArrayList实现了接口List<br>常见的写法会把引用声明为接口List类型<br>注意：是<code>java.util.List</code>,而不是<code>java.awt.List</code></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> collection<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token keyword">import</span> charactor<span class="token punctuation">.</span>Hero<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestCollection</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//ArrayList实现了接口List</span>        <span class="token comment" spellcheck="true">//常见的写法会把引用声明为接口List类型</span>        <span class="token comment" spellcheck="true">//注意：是java.util.List,而不是java.awt.List</span>        <span class="token comment" spellcheck="true">//接口引用指向子类对象（多态）</span>        List heros <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        heros<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span> <span class="token keyword">new</span> <span class="token class-name">Hero</span><span class="token punctuation">(</span><span class="token string">"盖伦"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>heros<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="List接口的方法"><a href="#List接口的方法" class="headerlink" title="List接口的方法"></a>List接口的方法</h4><p>因为ArrayList实现了List接口，所以List接口的方法ArrayList都实现了。</p><h3 id="泛型-Generic"><a href="#泛型-Generic" class="headerlink" title="泛型 Generic"></a>泛型 Generic</h3><blockquote><p>不指定泛型的容器，可以存放任何类型的元素  </p><p>指定了泛型的容器，只能存放指定类型的元素以及其子类</p></blockquote><h4 id="泛型的简写"><a href="#泛型的简写" class="headerlink" title="泛型的简写"></a>泛型的简写</h4><p>为了不使编译器出现警告，需要前后都使用泛型，像这样：</p><pre class="line-numbers language-java"><code class="language-java">List<span class="token operator">&lt;</span>Hero<span class="token operator">></span> genericheros <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Hero<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>不过JDK7提供了一个可以略微减少代码量的泛型简写方式</p><pre class="line-numbers language-java"><code class="language-java">List<span class="token operator">&lt;</span>Hero<span class="token operator">></span> genericheros2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>后面的泛型可以用&lt;&gt;来代替，聊胜于无吧</p><h4 id="小技巧"><a href="#小技巧" class="headerlink" title="小技巧"></a>小技巧</h4><p>如果想让一个ArrayList只能放<code>Students类对象</code>和<code>Teacher类对象</code>，<code>不能</code>放其他类的对象！<br>怎么做呢？</p><p>可以这样做：</p><p>先创建一个School接口，其中不声明任何方法！<br>然后让Students和Teacher都实现这个接口。</p><p>最后，声明一个ArrayList,它的泛型是<code>&lt;School&gt;</code>,这样就可以同时放Student和Teacher了！</p><pre class="line-numbers language-java"><code class="language-java">List<span class="token operator">&lt;</span>School<span class="token operator">></span> schoolList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h3><h4 id="用for循环遍历"><a href="#用for循环遍历" class="headerlink" title="用for循环遍历"></a>用for循环遍历</h4><p>通过前面的学习，知道了可以用size()和get()分别得到大小，和获取指定位置的元素，结合for循环就可以遍历出ArrayList的内容</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> collection<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Iterator<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token keyword">import</span> charactor<span class="token punctuation">.</span>Hero<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestCollection</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>Hero<span class="token operator">></span> heros <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Hero<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 放5个Hero进入容器</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            heros<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Hero</span><span class="token punctuation">(</span><span class="token string">"hero name "</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 第一种遍历 for循环</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"--------for 循环-------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> heros<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Hero h <span class="token operator">=</span> heros<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="迭代器遍历"><a href="#迭代器遍历" class="headerlink" title="迭代器遍历"></a>迭代器遍历</h4><p>使用迭代器Iterator遍历集合中的元素</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> collection<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Iterator<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token keyword">import</span> charactor<span class="token punctuation">.</span>Hero<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestCollection</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>Hero<span class="token operator">></span> heros <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Hero<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//放5个Hero进入容器</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            heros<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Hero</span><span class="token punctuation">(</span><span class="token string">"hero name "</span> <span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//第二种遍历，使用迭代器</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"--------使用while的iterator-------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Iterator<span class="token operator">&lt;</span>Hero<span class="token operator">></span> it<span class="token operator">=</span> heros<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//从最开始的位置判断"下一个"位置是否有数据</span>        <span class="token comment" spellcheck="true">//如果有就通过next取出来，并且把指针向下移动</span>        <span class="token comment" spellcheck="true">//直到"下一个"位置没有数据</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            Hero h <span class="token operator">=</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//迭代器的for写法</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"--------使用for的iterator-------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Iterator<span class="token operator">&lt;</span>Hero<span class="token operator">></span> iterator <span class="token operator">=</span> heros<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Hero hero <span class="token operator">=</span> <span class="token punctuation">(</span>Hero<span class="token punctuation">)</span> iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>hero<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="用增强型for循环"><a href="#用增强型for循环" class="headerlink" title="用增强型for循环"></a>用增强型for循环</h4><p>使用增强型for循环可以非常方便的遍历ArrayList中的元素，这是很多开发人员的首选。</p><p>不过增强型for循环也有不足：<br>无法用来进行ArrayList的初始化<br>无法得知当前是第几个元素了，当需要只打印单数元素的时候，就做不到了。 必须再自定下标变量。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> collection<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Iterator<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token keyword">import</span> charactor<span class="token punctuation">.</span>Hero<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestCollection</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>Hero<span class="token operator">></span> heros <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Hero<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 放5个Hero进入容器</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            heros<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Hero</span><span class="token punctuation">(</span><span class="token string">"hero name "</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 第三种，增强型for循环</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"--------增强型for循环-------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Hero h <span class="token operator">:</span> heros<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="其他集合"><a href="#其他集合" class="headerlink" title="其他集合"></a>其他集合</h2><h3 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList"></a>LinkedList</h3><p>序列分先进先出FIFO,先进后出FILO<br>FIFO在Java中又叫Queue 队列<br>FILO在Java中又叫Stack 栈  </p><h4 id="LinkedList常用方法"><a href="#LinkedList常用方法" class="headerlink" title="LinkedList常用方法"></a>LinkedList常用方法</h4><p>与ArrayList一样，LinkedList也实现了List接口，所以也可以使用诸如add,remove,contains等等方法。  </p><p>接下来要讲的是LinkedList的一些特别的地方</p><h4 id="双向链表-Deque"><a href="#双向链表-Deque" class="headerlink" title="双向链表 Deque"></a>双向链表 Deque</h4><p>除了实现了List接口外，LinkedList还实现了<code>双向链表结构</code> <code>Deque</code>，可以很方便的在头尾插入删除数据</p><p>什么是链表结构: 与数组结构相比较，数组结构，就好像是电影院，每个位置都有标示，每个位置之间的间隔都是一样的。 而链表就相当于佛珠，每个珠子，只连接前一个和后一个，不用关心除此之外的其他佛珠在哪里。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> collection<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>LinkedList<span class="token punctuation">;</span><span class="token keyword">import</span> charactor<span class="token punctuation">.</span>Hero<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestCollection</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//LinkedList是一个双向链表结构的list</span>        LinkedList<span class="token operator">&lt;</span>Hero<span class="token operator">></span> ll <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span>Hero<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//所以可以很方便的在头部和尾部插入数据</span>        <span class="token comment" spellcheck="true">//在最后插入新的英雄</span>        ll<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Hero</span><span class="token punctuation">(</span><span class="token string">"hero1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ll<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Hero</span><span class="token punctuation">(</span><span class="token string">"hero2"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ll<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Hero</span><span class="token punctuation">(</span><span class="token string">"hero3"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ll<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//在最前面插入新的英雄</span>        ll<span class="token punctuation">.</span><span class="token function">addFirst</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Hero</span><span class="token punctuation">(</span><span class="token string">"heroX"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ll<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//查看最前面的英雄</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ll<span class="token punctuation">.</span><span class="token function">getFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//查看最后面的英雄</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ll<span class="token punctuation">.</span><span class="token function">getLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//查看不会导致英雄被删除</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ll<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//取出最前面的英雄</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ll<span class="token punctuation">.</span><span class="token function">removeFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//取出最后面的英雄</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ll<span class="token punctuation">.</span><span class="token function">removeLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//取出会导致英雄被删除</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ll<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>   <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="队列-Queue"><a href="#队列-Queue" class="headerlink" title="队列 - Queue"></a>队列 - Queue</h4><p>LinkedList 除了实现了List和Deque外，还实现了<code>Queue</code>接口(队列)。<br>Queue是先进先出队列 <code>FIFO</code>，常用方法：<br><code>offer</code> 在最后添加元素<br><code>poll</code> 取出第一个元素<br><code>peek</code> 查看第一个元素</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> collection<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>LinkedList<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Queue<span class="token punctuation">;</span><span class="token keyword">import</span> charactor<span class="token punctuation">.</span>Hero<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestCollection</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//和ArrayList一样，LinkedList也实现了List接口</span>        List ll <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span>Hero<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//所不同的是LinkedList还实现了Deque，进而又实现了Queue这个接口</span>        <span class="token comment" spellcheck="true">//Queue代表FIFO 先进先出的队列</span>        Queue<span class="token operator">&lt;</span>Hero<span class="token operator">></span> q<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span>Hero<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//加在队列的最后面</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"初始化队列：\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        q<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Hero</span><span class="token punctuation">(</span><span class="token string">"Hero1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        q<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Hero</span><span class="token punctuation">(</span><span class="token string">"Hero2"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        q<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Hero</span><span class="token punctuation">(</span><span class="token string">"Hero3"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        q<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Hero</span><span class="token punctuation">(</span><span class="token string">"Hero4"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"把第一个元素取poll()出来:\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//取出第一个Hero，FIFO 先进先出</span>        Hero h <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"取出第一个元素之后的队列:\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//把第一个拿出来看一看，但是不取出来</span>        h<span class="token operator">=</span>q<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"查看peek()第一个元素:\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"查看并不会导致第一个元素被取出来:\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="那么在实际开发中，我们如何选择list的具体实现？"><a href="#那么在实际开发中，我们如何选择list的具体实现？" class="headerlink" title="那么在实际开发中，我们如何选择list的具体实现？"></a>那么在实际开发中，我们如何选择list的具体实现？</h3><ol><li>安全性问题   <ul><li>Vector比较安全，Arraylist不太安全，不过也有办法把它做成安全的</li></ul></li><li>是否有频繁的插入，删除操作<ul><li>建议使用LinkedList，双向链表，性能好</li></ul></li><li>是否存储后遍历<ul><li>建议使用ArrayList</li></ul></li></ol><h3 id="set接口"><a href="#set接口" class="headerlink" title="set接口"></a>set接口</h3><ol><li>无序的（不保证顺序）</li><li>不允许重复元素</li><li>并且最多只有一个null元素</li><li>HashSet、TreeSet、LinkedHashSet</li></ol><h3 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h3><h4 id="HashMap的键值对"><a href="#HashMap的键值对" class="headerlink" title="HashMap的键值对"></a>HashMap的键值对</h4><p>HashMap储存数据的方式是 —— 键值对</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> collection<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>HashMap<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestCollection</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        HashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>String<span class="token operator">></span> dictionary <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dictionary<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"adc"</span><span class="token punctuation">,</span> <span class="token string">"物理英雄"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dictionary<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"apc"</span><span class="token punctuation">,</span> <span class="token string">"魔法英雄"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dictionary<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"t"</span><span class="token punctuation">,</span> <span class="token string">"坦克"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>dictionary<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"t"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="键不能重复，值可以重复"><a href="#键不能重复，值可以重复" class="headerlink" title="键不能重复，值可以重复"></a>键不能重复，值可以重复</h4><p>对于HashMap而言，key是唯一的，不可以重复的。<br>所以，以相同的key 把不同的value插入到 Map中会导致旧元素被覆盖，只留下最后插入的元素。<br>不过，同一个对象可以作为值插入到map中，只要对应的key不一样</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> collection<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>HashMap<span class="token punctuation">;</span><span class="token keyword">import</span> charactor<span class="token punctuation">.</span>Hero<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestCollection</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        HashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Hero<span class="token operator">></span> heroMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Hero<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        heroMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"gareen"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Hero</span><span class="token punctuation">(</span><span class="token string">"gareen1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>heroMap<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//key为gareen已经有value了，再以gareen作为key放入数据，会导致原英雄，被覆盖</span>        <span class="token comment" spellcheck="true">//不会增加新的元素到Map中</span>        heroMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"gareen"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Hero</span><span class="token punctuation">(</span><span class="token string">"gareen2"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>heroMap<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//清空map</span>        heroMap<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Hero gareen <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Hero</span><span class="token punctuation">(</span><span class="token string">"gareen"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//同一个对象可以作为值插入到map中，只要对应的key不一样</span>        heroMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"hero1"</span><span class="token punctuation">,</span> gareen<span class="token punctuation">)</span><span class="token punctuation">;</span>        heroMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"hero2"</span><span class="token punctuation">,</span> gareen<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>heroMap<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a>HashSet</h3><ul><li><code>实现了set接口</code></li><li>由哈希表（实际上是一个HashMap实例）支持，他<code>不保证set的迭代顺序</code>,特别是它不保证该顺序恒久不变</li><li><code>允许使用null元素</code></li><li>Set中的元素，<code>不能重复</code></li><li>Set中的元素，<code>没有顺序</code>。 (严格的说，是没有按照元素的插入顺序排列)<br>HashSet的具体顺序，既不是按照插入顺序，也不是按照hashcode的顺序。<br>在JVM的不同版本中，看到的顺序都是不一样的。 </li></ul><h4 id="遍历-1"><a href="#遍历-1" class="headerlink" title="遍历"></a>遍历</h4><p>Set不提供get()来获取指定位置的元素<br>所以遍历需要用到迭代器，或者增强型for循环</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> collection<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>HashSet<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Iterator<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestCollection</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        HashSet<span class="token operator">&lt;</span>Integer<span class="token operator">></span> numbers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            numbers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//Set不提供get方法来获取指定位置的元素</span>        <span class="token comment" spellcheck="true">//numbers.get(0)</span>        <span class="token comment" spellcheck="true">//遍历Set可以采用迭代器iterator</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Iterator<span class="token operator">&lt;</span>Integer<span class="token operator">></span> iterator <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Integer i <span class="token operator">=</span> <span class="token punctuation">(</span>Integer<span class="token punctuation">)</span> iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//或者采用增强型for循环</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Integer i <span class="token operator">:</span> numbers<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="HashSet和HashMap的关系"><a href="#HashSet和HashMap的关系" class="headerlink" title="HashSet和HashMap的关系"></a>HashSet和HashMap的关系</h4><p>通过观察HashSet的源代码（在idea里按ctrl，然后点击想要查看的类或方法;eclipse按F3）<br>可以发现HashSet自身并没有独立的实现，而是在里面封装了一个Map.<br>HashSet是作为Map的key而存在的<br>而value是一个命名为PRESENT的static的Object对象，因为是一个类属性，所以只会有一个<br><code>private static final Object PRESENT = new Object();</code></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> collection<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>AbstractSet<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>HashMap<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Iterator<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Set<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span>E<span class="token operator">></span>    <span class="token keyword">extends</span> <span class="token class-name">AbstractSet</span><span class="token operator">&lt;</span>E<span class="token operator">></span>    <span class="token keyword">implements</span> <span class="token class-name">Set</span><span class="token operator">&lt;</span>E<span class="token operator">></span><span class="token punctuation">,</span> Cloneable<span class="token punctuation">,</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Serializable<span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//HashSet里封装了一个HashMap</span>    <span class="token keyword">private</span>  HashMap<span class="token operator">&lt;</span>E<span class="token punctuation">,</span>Object<span class="token operator">></span> map<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Object PRESENT <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//HashSet的构造方法初始化这个HashMap</span>    <span class="token keyword">public</span> <span class="token function">HashSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span>E<span class="token punctuation">,</span>Object<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//向HashSet中增加元素，其实就是把该元素作为key，增加到Map中</span>    <span class="token comment" spellcheck="true">//value是PRESENT，静态，final的对象，所有的HashSet都使用这么同一个对象</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">add</span><span class="token punctuation">(</span>E e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> PRESENT<span class="token punctuation">)</span><span class="token operator">==</span>null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//HashSet的size就是map的size</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> map<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//清空Set就是清空Map</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        map<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//迭代Set,就是把Map的键拿出来迭代</span>    <span class="token keyword">public</span> Iterator<span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> map<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Collection"><a href="#Collection" class="headerlink" title="Collection"></a>Collection</h3><p>Collection是一个接口</p><h4 id="Collection-1"><a href="#Collection-1" class="headerlink" title="Collection"></a>Collection</h4><p>Collection是 Set List Queue和 Deque的接口<br>Queue: 先进先出队列<br>Deque: 双向链表</p><p><strong>注</strong>：Collection和Map之间没有关系，Collection是放一个一个对象的，Map 是放键值对的<br><strong>注</strong>：Deque 继承 Queue,间接得继承了 Collection<br>!(02)[]</p><h3 id="Collections"><a href="#Collections" class="headerlink" title="Collections"></a>Collections</h3><blockquote><p>Collections是一个类，容器的工具类,就如同Arrays是数组的工具类、  </p><p><strong>注意</strong>：使用Collections工具类前要先<code>导包</code>  </p><p><code>import java.util.Collections;</code>  </p><p>一般都是<code>类名.方法名</code>直接调用  </p></blockquote><p><strong>Collections作为工具类有以下方法:</strong></p><p>以下coll为集合</p><ol><li>反转<br><code>Collections.reverse(coll)</code>    把List中的数据顺序颠倒一下</li><li>混淆<br><code>Collections.shuffle(coll);</code>    混淆List中数据的顺序 </li><li>排序<br><code>Collections.sort(coll);</code>    对List中的数据进行排序   </li><li>交换<br><code>Collections.swap(coll,a,b);</code>    交换a,b两个数据的位置 </li><li>滚动<br><code>Collections.rotate(coll,2);</code>    把List中的数据，向右滚动指定单位的长度 </li><li>线程安全化<br><code>Collections.synchronizedList(coll);</code>    把非线程安全的List转换为线程安全的List</li></ol><h2 id="关系和区别"><a href="#关系和区别" class="headerlink" title="关系和区别"></a>关系和区别</h2><h3 id="ArrayList-VS-HashSet"><a href="#ArrayList-VS-HashSet" class="headerlink" title="ArrayList VS HashSet"></a>ArrayList VS HashSet</h3><ul><li>是否有顺序<br>ArrayList: 有顺序<br>HashSet: 无顺序</li></ul><p>HashSet的具体顺序，既不是按照插入顺序，也不是按照hashcode的顺序。</p><ul><li>能否重复<br>List中的数据可以重复<br>Set中的数据不能够重复</li></ul><p>重复判断标准是:<br>首先看hashcode是否相同<br>如果hashcode不同，则认为是不同数据<br>如果hashcode相同，再比较equals，如果equals相同，则是相同数据，否则是不同数据</p><h3 id="ArrayList-VS-LinkedList"><a href="#ArrayList-VS-LinkedList" class="headerlink" title="ArrayList VS LinkedList"></a>ArrayList VS LinkedList</h3><p>ArrayList <code>插入，删除数据慢</code><br>LinkedList <code>插入，删除数据快</code></p><p>ArrayList是顺序结构，所以定位很快，指哪找哪。 就像电影院位置一样，有了电影票，一下就找到位置了。<br>LinkedList 是链表结构，就像手里的一串佛珠，要找出第99个佛珠，必须得一个一个的数过去，所以定位慢 </p><h3 id="HashMap-VS-HashTable"><a href="#HashMap-VS-HashTable" class="headerlink" title="HashMap VS HashTable"></a>HashMap VS HashTable</h3><p>HashMap和Hashtable都实现了Map接口，都是键值对保存数据的方式<br>区别1：<br>HashMap可以存放 null<br>Hashtable不能存放null<br>区别2：<br>HashMap不是线程安全的类<br>Hashtable是线程安全的类</p><h3 id="几种Set"><a href="#几种Set" class="headerlink" title="几种Set"></a>几种Set</h3><p>HashSet： 无序<br>LinkedHashSet： 按照插入顺序<br>TreeSet： 从小到大排序 </p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="hashcode-原理"><a href="#hashcode-原理" class="headerlink" title="hashcode 原理"></a>hashcode 原理</h3><h3 id="比较器"><a href="#比较器" class="headerlink" title="比较器"></a>比较器</h3><p>比如一个对象，这个对象有很多属性，然后要想用Collections.sort对装有这个对象的集合进行排序<br>那么问题来了，到底是按照哪种属性来进行排序呢？Collections.sort也无法确定<br>(<code>P</code>ost<code>S</code>cript:如果强行直接用Collections.sort()方法，会报错！)<br>所以要指定到底按照哪种属性进行排序</p><p>方案一：<br><strong><code>Comparator</code></strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//引入Comparator，指定比较的算法</span>Comparator<span class="token operator">&lt;</span>Hero<span class="token operator">></span> c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Comparator</span><span class="token operator">&lt;</span>Hero<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span>Hero h1<span class="token punctuation">,</span> Hero h2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//按照hp进行排序</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>h1<span class="token punctuation">.</span>hp<span class="token operator">>=</span>h2<span class="token punctuation">.</span>hp<span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//正数表示h1比h2要大</span>        <span class="token keyword">else</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>方案二：<br><strong><code>Comparable</code></strong><br>让要比较的这个类去实现<code>Comparable接口</code><br>再重写一下方法：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span>Hero anotherHero<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>damage<span class="token operator">&lt;</span>anotherHero<span class="token punctuation">.</span>damage<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>     <span class="token keyword">else</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="聚合操作"><a href="#聚合操作" class="headerlink" title="聚合操作"></a>聚合操作</h3><p>JDK8之后，引入了对集合的聚合操作，可以非常容易的遍历，筛选，比较集合中的元素。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 中级 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 集合框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java之多线程</title>
      <link href="/posts/54332.html"/>
      <url>/posts/54332.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>多线程即在同一时间，可以做多件事情。 </p><p>因为CPU的速度是非常非常快的，所以可以在同一时间做很多事情，实际上CPU是在同一时间只能做一件事情，因为处理的速度实在是太快，所以可以接近同一时间做很多事情，像我的CPU<code>i5-8500</code>六核六线程，CPU自带的有6个线程，有些高端CPU还有超线程功能（可以虚拟出额外的线程）</p></blockquote><h2 id="创建一个线程"><a href="#创建一个线程" class="headerlink" title="创建一个线程"></a>创建一个线程</h2><p>创建多线程有3种方式，分别是<code>继承线程类</code>,<code>实现Runnable接口</code>,<code>匿名类</code><br><strong>线程概念</strong><br>首先要理解进程(Processor)和线程(Thread)的区别<br>进程：启动一个LOL.exe就叫一个进程。 接着又启动一个DOTA.exe，这叫两个进程。<br>线程：线程是在进程内部同时做的事情.</p><h3 id="继承线程类"><a href="#继承线程类" class="headerlink" title="继承线程类"></a>继承线程类</h3><p>设计一个类XxxxThread 继承Thread，并且重写run方法<br>启动线程办法： 实例化一个XxxxThread对象，并且调用其start方法 </p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">XxxxThread</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//这里面写一些要运行的东西</span>        xxx<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其他地方如果要运行这个线程Thread，可以用start()方法调用</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestThread</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">//可以启动多个线程    </span>        XxxxThread XxxxThread1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XxxxThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        XxxxThread1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        XxxxThread XxxxThread2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XxxxThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        XxxxThread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="实现Runnable接口"><a href="#实现Runnable接口" class="headerlink" title="实现Runnable接口"></a>实现Runnable接口</h3><p>创建类Battle，实现Runnable接口<br>启动的时候，首先创建一个Battle对象，然后再根据该battle对象创建一个线程对象，并启动</p><pre class="line-numbers language-java"><code class="language-java">Battle Battle1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Battle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>Battle1<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>battle1 对象实现了Runnable接口，所以有run方法，但是直接调用run方法，并不会启动一个新的线程。<br>必须，借助一个线程对象的start()方法，才会启动一个新的线程。<br>所以，在创建Thread对象的时候，把battle1作为构造方法的参数传递进去，这个线程启动的时候，就会去执行battle1.run()方法了。  </p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Battle</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        Xxxx<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> multiplethread<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestThread</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//新建线程对象</span>        Battle battle1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Battle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//启动线程</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>battle1<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Battle battle2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Battle</span><span class="token punctuation">(</span>bh<span class="token punctuation">,</span>leesin<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>battle2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="匿名类"><a href="#匿名类" class="headerlink" title="匿名类"></a>匿名类</h3><p>使用匿名类，继承Thread,重写run方法，直接在run方法中写业务代码<br>匿名类的一个好处是可以很方便的访问外部的局部变量。<br>前提是外部的局部变量需要被声明为final。(JDK7以后就不需要了).</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Hero</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> String name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> HP<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> lavel<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestThread</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Hero gareen <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Hero</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        gareen<span class="token punctuation">.</span>name<span class="token operator">=</span><span class="token string">"盖伦"</span><span class="token punctuation">;</span>        gareen<span class="token punctuation">.</span>HP<span class="token operator">=</span><span class="token number">600</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//匿名类</span>        Thread t1<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//匿名类中用到外部的局部变量，必须把外部的局部变量声明为final</span>                <span class="token comment" spellcheck="true">//但是在JDK7以后，就不是必须加final的了</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello World!"</span><span class="token operator">+</span>gareen<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread t2<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello World!"</span><span class="token operator">+</span>gareen<span class="token punctuation">.</span>HP<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注： 启动线程是start()方法，run()并不能启动一个新的线程</p><h2 id="常见线程方法"><a href="#常见线程方法" class="headerlink" title="常见线程方法"></a>常见线程方法</h2><h3 id="暂停当前线程"><a href="#暂停当前线程" class="headerlink" title="暂停当前线程"></a>暂停当前线程</h3><p>关键词：<code>sleep()</code><br>Thread.sleep(1000); 表示当前线程暂停1000毫秒 ，其他线程不受影响<br>Thread.sleep(1000); 会抛出InterruptedException 中断异常，因为当前线程sleep的时候，有可能被停止，这时就会抛出 InterruptedException</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> multiplethread<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//multiple adj.多样的，多重的  </span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestThread</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Thread t1<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">int</span> seconds <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">try</span> <span class="token punctuation">{</span>                        Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">// TODO Auto-generated catch block</span>                        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"已经玩了LOL %d 秒%n"</span><span class="token punctuation">,</span> seconds<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                          <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="加入到当前线程中"><a href="#加入到当前线程中" class="headerlink" title="加入到当前线程中"></a>加入到当前线程中</h3><p>关键词：<code>join()</code><br>首先解释一下主线程的概念<br>所有进程，至少会有一个线程即主线程，即main方法开始执行，就会有一个看不见的主线程存在。<br>在42行执行t.join，即表明在主线程中加入该线程。<br>主线程会等待该线程结束完毕， 才会往下运行。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Hero</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> String name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> HP<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> lavel<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestThread</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Hero gareen <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Hero</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        gareen<span class="token punctuation">.</span>name<span class="token operator">=</span><span class="token string">"盖伦"</span><span class="token punctuation">;</span>        gareen<span class="token punctuation">.</span>HP<span class="token operator">=</span><span class="token number">600</span><span class="token punctuation">;</span>        Thread t1<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token operator">+</span>gareen<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>                          <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//代码执行到这里，一直是main线程在运行</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//t1线程加入到main线程中来，只有t1线程运行结束，才会继续往下走</span>            t1<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 中级 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java之字符串</title>
      <link href="/posts/13139.html"/>
      <url>/posts/13139.html</url>
      
        <content type="html"><![CDATA[<h2 id="首先要明白"><a href="#首先要明白" class="headerlink" title="首先要明白"></a>首先要明白</h2><blockquote><p>字符串<code>String</code>并不是一个基本类型的对象，而是引用类型<br>字符串就是一堆字符数组组合成的<br><code>String</code> 被修饰为final,所以是不能被继承的</p></blockquote><h2 id="创建字符串"><a href="#创建字符串" class="headerlink" title="创建字符串"></a>创建字符串</h2><ol><li><p>创建字符串有两种方法：  </p><ul><li><p><strong>直接赋值</strong>（推介，不仅仅是简单）</p><pre class="line-numbers language-java"><code class="language-java">String s1 <span class="token operator">=</span><span class="token string">"哈哈"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>new</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//调用String的构造方法创建一个字符串对象</span>String s2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"嘿嘿"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul></li><li><p>通过+加号进行字符串拼接会创建新的字符串对象 </p><pre class="line-numbers language-java"><code class="language-java"> String s3 <span class="token operator">=</span> s1<span class="token operator">+</span>s2<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//s3为 哈哈嘿嘿</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><blockquote><p>new关键字可以理解为在内存中<code>强制</code>开辟一份内存  </p></blockquote><p>直接赋值的方式，会先在堆中寻找有没有相同已存字符串对象，没有的话新建一个，有的话直接引用相同的字符串对象，所以s1和s3是同一个对象<br>为什么推介直接赋值，因为这样的话如果字符相同就不会创建新的字符串对象，从而节省内存空间</p><pre class="line-numbers language-java"><code class="language-java"> <span class="token keyword">package</span> String<span class="token punctuation">;</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestString</span> <span class="token punctuation">{</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String s1 <span class="token operator">=</span><span class="token string">"哈哈"</span><span class="token punctuation">;</span>        String s3 <span class="token operator">=</span><span class="token string">"哈哈"</span><span class="token punctuation">;</span>        String s2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"哈哈"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String s4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"哈哈"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//这里为什么不用.equals()？ .equals()是用于对字符串值的比较。 == 是比较内存地址</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"s1和s2 "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token operator">==</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//false</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"s1和s3 "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s3<span class="token operator">==</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//true</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"s2和s4 "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s2<span class="token operator">==</span>s4<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//false</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="immutable"><a href="#immutable" class="headerlink" title="immutable"></a>immutable</h2><p>immutable 是指不可改变的<br>比如创建了一个字符串对象<br><code>String garen =&quot;盖伦&quot;;</code><br><code>不可改变</code>的具体含义是指：<br>不能增加长度<br>不能减少长度<br>不能插入字符<br>不能删除字符<br>不能修改字符<br>一旦创建好这个字符串，里面的内容 永远 不能改变  </p><h2 id="字符串格式化"><a href="#字符串格式化" class="headerlink" title="字符串格式化"></a>字符串格式化</h2><p>如果不使用格式化输出，就需要进行字符串连接，如果变量比较多，拼接就会显得繁琐<br>使用格式化输出，就可以简洁明了  </p><p>使用字符串格式化，就要使用<code>printf()</code>方法，这个方法使用类似C语言  </p><p>可以查看源码得到，printf直接是直接调用的<code>format</code><br>所以也可以直接使用<code>format()</code>输出(这样会不会提高一些性能？)  </p><p>%s 表示字符串<br>%d 表示数字<br>%n 表示换行  </p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestNumber</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String name <span class="token operator">=</span><span class="token string">"盖伦"</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> hp <span class="token operator">=</span> <span class="token number">650</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"姓名：%s%n血量：%d"</span><span class="token punctuation">,</span>name<span class="token punctuation">,</span>hp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="换行符"><a href="#换行符" class="headerlink" title="换行符"></a>换行符</h2><p>换行符就是另起一行 —— ‘\n’ 换行（newline）<br>回车符就是回到一行的开头 —— ‘\r’ 回车（return）<br>在eclipse里敲一个回车，实际上是回车换行符<br>Java是跨平台的编程语言，同样的代码，可以在不同的平台使用，比如Windows,Linux,Mac<br>然而在不同的操作系统，换行符是不一样的<br>（1）在DOS和Windows中，每行结尾是 “\r\n”；<br>（2）Linux系统里，每行结尾只有 “\n”；<br>（3）Mac系统里，每行结尾是只有 “\r”。<br>为了使得同一个java程序的换行符在所有的操作系统中都有一样的表现，使用%n，就可以做到平台无关的换行</p><h2 id="四种情况分析"><a href="#四种情况分析" class="headerlink" title="四种情况分析"></a>四种情况分析</h2><p>直接赋值字符串连接时，考虑编译期和运行期<br>如果在编译期可以被确定，那么就使用已有的对象，否则会创建新的对象</p><pre class="line-numbers language-java"><code class="language-java">String a <span class="token operator">=</span> <span class="token string">"a"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//下面的a，在编译时因为是变量，所以是不确定的，只有运行时才能确定（编译是一行一行代码编译，下一行与上一行无关）</span><span class="token comment" spellcheck="true">//所以编译的时候只能在创建一个新的对象，因而与a2不是同一个变量</span>String a1 <span class="token operator">=</span> a<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>String a2 <span class="token operator">=</span> <span class="token string">"a1"</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a1<span class="token operator">==</span>a2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//返回false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 中级 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>idea使用小技巧</title>
      <link href="/posts/26149.html"/>
      <url>/posts/26149.html</url>
      
        <content type="html"><![CDATA[<h2 id="debug卡顿问题"><a href="#debug卡顿问题" class="headerlink" title="debug卡顿问题"></a>debug卡顿问题</h2><p>一般破解的idea的debug有点卡顿<br>从控制台来看，每次都会连接本地地址(127.0.0.1)，问题可能就出在这里<br>具体参考 <a href="https://link.jianshu.com/?t=https://youtrack.jetbrains.com/issue/IDEA-157303" target="_blank" rel="noopener">这里</a></p><p>解决方法修改host文件：<br>用VIM打开host文件</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> vim /private/etc/hosts<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>把</p><pre class="line-numbers language-sh"><code class="language-sh">127.0.0.1       localhost<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>改为：  （需要注意的是[hostname].local是你自己的hostname）</p><pre class="line-numbers language-sh"><code class="language-sh">127.0.0.1       localhost       [hostname].local<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>问题解决！</p><p>如何查看自己的hostname？用以下命令：</p><pre class="line-numbers language-sh"><code class="language-sh">hostname<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>![](<a href="https://sky03-blog-images.oss-cn-beijing.aliyuncs.com/blog-img/屏幕快照" target="_blank" rel="noopener">https://sky03-blog-images.oss-cn-beijing.aliyuncs.com/blog-img/屏幕快照</a> 2018-12-24 17.46.54.png)</p><p><code>xxx.local</code>就是需要添加到hosts文件里的信息。</p><p>修改后的文件如下：<br>![](<a href="https://sky03-blog-images.oss-cn-beijing.aliyuncs.com/blog-img/2018-12-24" target="_blank" rel="noopener">https://sky03-blog-images.oss-cn-beijing.aliyuncs.com/blog-img/2018-12-24</a> 17.48.36.png)</p><p>开始享受丝滑般体验吧！😝</p><h2 id="代码重复，黄线提示问题"><a href="#代码重复，黄线提示问题" class="headerlink" title="代码重复，黄线提示问题"></a>代码重复，黄线提示问题</h2><blockquote><h4 id="用IDEA经常会遇到found-duplicate-code的问题，下面有黄线标注，严重影响强迫症患者的使用。下面就是如何取消的方法，取消勾选即可"><a href="#用IDEA经常会遇到found-duplicate-code的问题，下面有黄线标注，严重影响强迫症患者的使用。下面就是如何取消的方法，取消勾选即可" class="headerlink" title="用IDEA经常会遇到found duplicate code的问题，下面有黄线标注，严重影响强迫症患者的使用。下面就是如何取消的方法，取消勾选即可"></a>用IDEA经常会遇到found duplicate code的问题，下面有黄线标注，严重影响强迫症患者的使用。下面就是如何取消的方法，取消勾选即可</h4></blockquote><p><img src="/medias/loading.gif" data-original="https://sky03-blog-images.oss-cn-beijing.aliyuncs.com/blog-img/2019-3-21.png" alt></p><h2 id="刚新建的maven项目无法新建Servlet"><a href="#刚新建的maven项目无法新建Servlet" class="headerlink" title="刚新建的maven项目无法新建Servlet"></a>刚新建的maven项目无法新建Servlet</h2><p>打开Project Structure，勾选Source Roots中的两个java和resources文件夹</p><p><img src="/medias/loading.gif" data-original="https://sky03-blog-images.oss-cn-beijing.aliyuncs.com/blog-img/20190408212006.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小技巧 </tag>
            
            <tag> idea </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java之IO流</title>
      <link href="/posts/21501.html"/>
      <url>/posts/21501.html</url>
      
        <content type="html"><![CDATA[<h2 id="文件对象"><a href="#文件对象" class="headerlink" title="文件对象"></a>文件对象</h2><p><strong>文件和文件夹都是用File代表</strong></p><h3 id="创建文件对象"><a href="#创建文件对象" class="headerlink" title="创建文件对象"></a>创建文件对象</h3><p>使用绝对路径或者相对路径创建File对象</p><ul><li><p>其中使用的方法有：</p><ul><li><p>f1.<code>getAbsolutePath()</code>用于获取f1文件对象的绝对路径</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> file<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>File<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestFile</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 新建一个文件对象（绝对路径）</span>        File f1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"d:/LOLFolder"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"f1的绝对路径："</span> <span class="token operator">+</span> f1<span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 相对路径,相对于工作目录，如果在eclipse中，就是项目目录</span>        File f2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"LOL.exe"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"f2的绝对路径："</span> <span class="token operator">+</span> f2<span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 把f1作为父目录创建文件对象</span>        File f3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>f1<span class="token punctuation">,</span> <span class="token string">"LOL.exe"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"f3的绝对路径："</span> <span class="token operator">+</span> f3<span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="文件常用方法1"><a href="#文件常用方法1" class="headerlink" title="文件常用方法1"></a>文件常用方法1</h3></li></ul></li></ul><p><strong>以下方法都可以用文件对象<code>f.xxx()</code>的形式去直接调用：</strong></p><ul><li><code>File.separator</code>代表路径的分割符“/”(Unix)或“\”(window)</li><li>判断是否存在：<code>f.exists()</code>  //exist存在</li><li>判断是否是文件夹：<code>f.isDirectory()</code></li><li>判断是否是文件：<code>f.isFile()</code></li><li>获取文件的长度：<code>f.length()</code></li><li>文件的最后修改时间：<code>f.lastModified()</code><ul><li>拓展：<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">long</span> time <span class="token operator">=</span> f<span class="token punctuation">.</span><span class="token function">lastModified</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Date d <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"获取文件的最后修改时间："</span><span class="token operator">+</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul></li><li>设置文件修改时间为1970.1.1 08:00:00<ul><li><code>f.setLastModified(0)</code>  //（这里参数，填毫秒）</li></ul></li><li>文件重命名<pre class="line-numbers language-java"><code class="language-java">File f1 <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"d:/LOLFolder/300Hero.exe"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>File f2 <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"d:/LOLFolder/DOTA.exe"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>f<span class="token punctuation">.</span><span class="token function">renameTo</span><span class="token punctuation">(</span>f2<span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"把300Hero.exe改名成了DOTA.exe"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>substantial<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li><strong>注意：</strong> renameTo方法用于对物理文件名称进行修改，但是并不会修改File对象的name属性。</li></ul></li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> stream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>File<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestStream</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//File.separator代表路径的分割符“/”(Unix)或“\”(window)</span>        File f2 <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"/Users/sky03"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        File f1 <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"/Users/sky03"</span><span class="token operator">+</span> File<span class="token punctuation">.</span>separator<span class="token operator">+</span><span class="token string">"test"</span> <span class="token operator">+</span> File<span class="token punctuation">.</span>separator<span class="token operator">+</span><span class="token string">"test.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>f1<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//判断f1指向的文件是否存在</span>            <span class="token keyword">try</span><span class="token punctuation">{</span>                f1<span class="token punctuation">.</span><span class="token function">getParentFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mkdirs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                f1<span class="token punctuation">.</span><span class="token function">createNewFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//创建文件夹</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"文件创建成功????！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>IOException e<span class="token punctuation">)</span><span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>f2<span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"文件创建成功！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="文件常用方法2"><a href="#文件常用方法2" class="headerlink" title="文件常用方法2"></a>文件常用方法2</h3><p><strong>以下方法都可以用文件对象<code>f.xxx()</code>的形式去直接调用：</strong>  </p><ul><li>以字符串数组的形式，返回当前文件夹下的所有文件（不包含子文件及子文件夹）<ul><li><code>f.list()</code></li></ul></li><li>以文件数组的形式，返回当前文件夹下的所有文件（不包含子文件及子文件夹）<ul><li><code>File[]fs= f.listFiles()</code></li></ul></li><li>以字符串形式返回获取所在文件夹<ul><li><code>f.getParent()</code></li></ul></li><li>创建文件夹，如果父文件夹不存在，创建就无效<ul><li><code>f.mkdir()</code></li></ul></li><li>创建文件夹，如果父文件夹不存在，就会创建父文件夹<ul><li><code>f.mkdirs()</code></li></ul></li><li>创建一个空文件,如果父文件夹不存在，就会抛出异常<ul><li><code>f.createNewFile()</code></li></ul></li><li>所以创建一个空文件之前，通常都会创建父目录<ul><li><code>f.getParentFile().mkdirs()</code></li></ul></li><li>列出所有的盘符c: d: e: 等等<ul><li><code>f.listRoots()</code></li></ul></li><li>删除文件<ul><li><code>f.delete()</code></li></ul></li><li>JVM结束的时候，刪除文件，常用于临时文件的删除<ul><li><code>f.deleteOnExit()</code></li></ul></li></ul><p>查找文件算法：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>File<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FileDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">findFile</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"C:\\Users\\Administrator\\Pictures"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">".jpg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">findFile</span><span class="token punctuation">(</span>File target<span class="token punctuation">,</span>String ext<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//target是File类型的文件路径，ext是文件的格式（后缀）</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>target<span class="token operator">==</span>null<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//判断目标是否是文件夹</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>target<span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>             <span class="token comment" spellcheck="true">//如果是文件夹 ，子目录里可能还是文件夹或者文件，不可能一直if下去</span>            <span class="token comment" spellcheck="true">//列出target的子目录或文件，再去判断</span>            File <span class="token punctuation">[</span><span class="token punctuation">]</span> files<span class="token operator">=</span>target<span class="token punctuation">.</span><span class="token function">listFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">//有的目录没有访问权限(系统目录),所以要在files不为空的情况下再去查找</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>files<span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">for</span><span class="token punctuation">(</span>File f <span class="token operator">:</span> files<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//子目录里可能还是文件夹，这里用递归算法去循环</span>                    <span class="token function">findFile</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span>ext<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//递归调用（容易内存泄漏）</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//如果不是文件夹(是一个文件)        </span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            String name<span class="token operator">=</span>target<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>name<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span>ext<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>target<span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="什么是流"><a href="#什么是流" class="headerlink" title="什么是流"></a>什么是流</h2><p>当不同的介质之间有数据交互的时候，JAVA就使用流来实现。<br></p><p>数据源可以是文件，还可以是数据库，网络甚至是其他的程序</p><h3 id="文件输入流"><a href="#文件输入流" class="headerlink" title="文件输入流"></a>文件输入流</h3><blockquote><p>什么是流(Stream)，流就是一系列的数据</p></blockquote><p>如下代码，就建立了一个文件输入流，这个流可以用来把数据从硬盘的文件，读取到JVM(内存)。</p><p>目前代码只是建立了流，还没有开始读取</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> stream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>File<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileInputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestStream</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            File f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"d:/lol.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 创建基于文件的输入流</span>            FileInputStream fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 通过这个输入流，就可以把数据从硬盘，读取到Java的虚拟机中来，也就是读取到内存中</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// TODO Auto-generated catch block</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="字节流"><a href="#字节流" class="headerlink" title="字节流"></a>字节流</h2><blockquote><p>InputStream字节输入流  </p><p>OutputStream字节输出流  </p><p>用于以字节的形式读取和写入数据  </p></blockquote><h3 id="以字节流的形式向文件写入数据"><a href="#以字节流的形式向文件写入数据" class="headerlink" title="以字节流的形式向文件写入数据"></a>以字节流的形式向文件写入数据</h3><p>InputStream是字节输入流，同时也是抽象类，只提供方法声明，不提供方法的具体实现。<br>FileInputStream 是InputStream子类，以FileInputStream 为例进行文件读取  </p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> stream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>File<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileInputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestStream</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//准备文件lol.txt其中的内容是AB，对应的ASCII分别是65 66</span>            File f <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"d:/lol.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//创建基于文件的输入流</span>            FileInputStream fis <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//创建字节数组，其长度就是文件的长度</span>            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> all <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> f<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//以字节流的形式读取文件所有内容</span>            fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>all<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">byte</span> b <span class="token operator">:</span> all<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//打印出来是65 66</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//每次使用完流，都应该进行关闭</span>            fis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// TODO Auto-generated catch block</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="以字节流的形式向文件写入数据-1"><a href="#以字节流的形式向文件写入数据-1" class="headerlink" title="以字节流的形式向文件写入数据"></a>以字节流的形式向文件写入数据</h3><p>OutputStream是字节输出流，同时也是抽象类，只提供方法声明，不提供方法的具体实现。<br>FileOutputStream 是OutputStream子类，以<code>FileOutputStream</code> 为例向文件写出数据   </p><p>注: 如果文件d:/lol2.txt不存在，写出操作会自动创建该文件。<br>但是如果是文件 d:/xyz/lol2.txt，而目录xyz又不存在，会抛出异常  </p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> stream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>File<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileOutputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestStream</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 准备文件lol2.txt其中的内容是空的</span>            File f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"d:/lol2.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 准备长度是2的字节数组，用88,89初始化，其对应的字符分别是X,Y</span>            <span class="token keyword">byte</span> data<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">88</span><span class="token punctuation">,</span> <span class="token number">89</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 创建基于文件的输出流</span>            FileOutputStream fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 把数据写入到输出流</span>            fos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 关闭输出流</span>            fos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// TODO Auto-generated catch block</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>小细节：写文件时如果父目录不存在，可以先使用mkdirs创建父目录</strong></p><p><strong>如果父目录存在，这样也不会报错！</strong></p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> stream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>File<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileOutputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestStream</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            File f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"d:/xyz/abc/def/lol2.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//因为默认情况下，文件系统中不存在 d:\xyz\abc\def，所以输出会失败</span>            <span class="token comment" spellcheck="true">//首先获取文件所在的目录</span>            File dir <span class="token operator">=</span> f<span class="token punctuation">.</span><span class="token function">getParentFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//如果该目录不存在，则创建该目录</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>dir<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//              dir.mkdir(); //使用mkdir会抛出异常，因为该目录的父目录也不存在</span>                dir<span class="token punctuation">.</span><span class="token function">mkdirs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//使用mkdirs则会把不存在的目录都创建好</span>            <span class="token punctuation">}</span>            <span class="token keyword">byte</span> data<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">88</span><span class="token punctuation">,</span> <span class="token number">89</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>            FileOutputStream fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>            fos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>            fos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="关闭流的方式"><a href="#关闭流的方式" class="headerlink" title="关闭流的方式"></a>关闭流的方式</h3><p>所有的流，无论是输入流还是输出流，使用完毕之后，都应该关闭。 如果不关闭，会产生对资源占用的浪费。 当量比较大的时候，会影响到业务的正常开展。</p><h4 id="在try中关闭"><a href="#在try中关闭" class="headerlink" title="在try中关闭"></a>在try中关闭</h4><p>在try的作用域里关闭文件输入流，在前面的示例中都是使用这种方式，这样做有一个弊端；<br>如果文件不存在，或者读取的时候出现问题而抛出异常，那么就不会执行这一行关闭流的代码，存在巨大的资源占用隐患。 <code>不推荐</code>使用</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> stream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>File<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileInputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestStream</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            File f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"d:/lol.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            FileInputStream fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> all <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> f<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>all<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">byte</span> b <span class="token operator">:</span> all<span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 在try 里关闭流</span>            fis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="在finally中关闭"><a href="#在finally中关闭" class="headerlink" title="在finally中关闭"></a>在finally中关闭</h4><p>这是标准的关闭流的方式</p><ol><li>首先把流的引用声明在try的外面，如果声明在try里面，其作用域无法抵达finally.</li><li>在finally关闭之前，要先判断该引用是否为空</li><li>关闭的时候，需要再一次进行try catch处理</li></ol><p>这是标准的严谨的关闭流的方式，但是看上去很繁琐，所以写不重要的或者测试代码的时候，都会采用上面的<code>有隐患</code>try的方式，因为不麻烦~</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> stream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>File<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileInputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestStream</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        File f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"d:/lol.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        FileInputStream fis <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> all <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> f<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>all<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">byte</span> b <span class="token operator">:</span> all<span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 在finally 里关闭流</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>null <span class="token operator">!=</span> fis<span class="token punctuation">)</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    fis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// TODO Auto-generated catch block</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="使用try-的方式"><a href="#使用try-的方式" class="headerlink" title="使用try()的方式"></a>使用try()的方式</h4><p>把流定义在try()里,try,catch或者finally结束的时候，会自动关闭<br>这种编写代码的方式叫做 try-with-resources， 这是从JDK7开始支持的技术</p><p>所有的流，都实现了一个接口叫做 AutoCloseable，任何类实现了这个接口，都可以在try()中进行实例化。 并且在try, catch, finally结束的时候自动关闭，回收相关资源。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> stream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>File<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileInputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestStream</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        File f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"d:/lol.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//把流定义在try()里,try,catch或者finally结束的时候，会自动关闭</span>        <span class="token keyword">try</span> <span class="token punctuation">(</span>FileInputStream fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> all <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> f<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>all<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">byte</span> b <span class="token operator">:</span> all<span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="字符流"><a href="#字符流" class="headerlink" title="字符流"></a>字符流</h2><blockquote><p>Reader字符输入流  </p><p>Writer字符输出流  </p><p>专门用于字符的形式读取和写入数据  </p></blockquote><h3 id="使用字符流读取文件"><a href="#使用字符流读取文件" class="headerlink" title="使用字符流读取文件"></a>使用字符流读取文件</h3><blockquote><p>FileReader 是Reader子类，以FileReader 为例进行文件读取  </p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> stream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>File<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileReader<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestStream</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 准备文件lol.txt其中的内容是AB</span>        File f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"d:/lol.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 创建基于文件的Reader</span>        <span class="token keyword">try</span> <span class="token punctuation">(</span>FileReader fr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 创建字符数组，其长度就是文件的长度</span>            <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> all <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">char</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> f<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 以字符流的形式读取文件所有内容</span>            fr<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>all<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">char</span> b <span class="token operator">:</span> all<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 打印出来是A B</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// TODO Auto-generated catch block</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="使用字符流把字符串写入到文件"><a href="#使用字符流把字符串写入到文件" class="headerlink" title="使用字符流把字符串写入到文件"></a>使用字符流把字符串写入到文件</h3><blockquote><p>FileWriter 是Writer的子类，以FileWriter 为例把字符串写入到文件  </p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> stream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>File<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileWriter<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestStream</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 准备文件lol2.txt</span>        File f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"d:/lol2.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 创建基于文件的Writer</span>        <span class="token keyword">try</span> <span class="token punctuation">(</span>FileWriter fr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 以字符流的形式把数据写入到文件中</span>            String data<span class="token operator">=</span><span class="token string">"abcdefg1234567890"</span><span class="token punctuation">;</span>            <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cs <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            fr<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>cs<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// TODO Auto-generated catch block</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="中文问题"><a href="#中文问题" class="headerlink" title="中文问题"></a>中文问题</h2><h3 id="编码概念"><a href="#编码概念" class="headerlink" title="编码概念"></a>编码概念</h3><p>计算机存放数据只能存放0和1，所有的字符都会被转换为不同的数字，然后再转换成0和1。</p><h3 id="常见编码"><a href="#常见编码" class="headerlink" title="常见编码"></a>常见编码</h3><p>工作后经常接触的编码方式有如下几种：<br><code>ISO-8859-1</code> <code>ASCII</code> 数字和西欧字母<br><code>GBK</code> <code>GB2312</code> <code>BIG5</code> 中文<br><code>UNICODE</code> (统一码，万国码)</p><p>其中<br>ISO-8859-1 包含 ASCII<br>GB2312 是简体中文，BIG5是繁体中文，GBK同时包含简体和繁体以及日文。<br>UNICODE 包括了所有的文字，无论中文，英文，藏文，法文，世界所有的文字都包含其中</p><h3 id="UNICODE和UTF"><a href="#UNICODE和UTF" class="headerlink" title="UNICODE和UTF"></a>UNICODE和UTF</h3><p>UNICODE因为要存放所有的数据，那么它的棋盘是最大的。<br>不仅如此，棋盘里每个数字都是很长的(4个字节)，因为不仅要表示字母，还要表示汉字等。</p><p>如果完全按照UNICODE的方式来存储数据，就会有很大的浪费。<br>比如在ISO-8859-1中，a 字符对应的数字是0x61<br>而UNICODE中对应的数字是 0x00000061，倘若一篇文章大部分都是英文字母，那么按照UNICODE的方式进行数据保存就会消耗很多空间</p><p>在这种情况下，就出现了UNICODE的各种<code>减肥</code>子编码, 比如<code>UTF-8</code>对数字和字母就使用一个字节，而对汉字就使用3个字节，从而达到了<code>减肥还能保证健康</code>的效果</p><p>UTF-8，UTF-16和UTF-32 针对不同类型的数据有不同的<code>减肥效果</code>，一般说来<code>UTF-8</code>是比较常用的方式</p><h3 id="Java采用的是Unicode"><a href="#Java采用的是Unicode" class="headerlink" title="Java采用的是Unicode"></a>Java采用的是Unicode</h3><p>写在.java源代码中的汉字，在执行之后，都会变成JVM中的字符。<br>而这些中文字符采用的编码方式，都是使用UNICODE.</p><h3 id="用FileInputStream-字节流正确读取中文"><a href="#用FileInputStream-字节流正确读取中文" class="headerlink" title="用FileInputStream 字节流正确读取中文"></a>用FileInputStream 字节流正确读取中文</h3><p>为了能够正确的读取中文内容</p><ol><li>必须了解文本是以哪种编码方式保存字符的</li><li>使用字节流读取了文本后，再使用对应的编码方式去识别这些数字，得到正确的字符<br>如本例，一个文件中的内容是字符中，编码方式是GBK，那么读出来的数据一定是D6D0。<br>再使用GBK编码方式识别D6D0，就能正确的得到字符中</li></ol><p>注： 在GBK的棋盘上找到的中字后，JVM会自动找到中在UNICODE这个棋盘上对应的数字，并且以UNICODE上的数字保存在内存中。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> stream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>File<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileInputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestStream</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        File f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"E:\\project\\j2se\\src\\test.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">(</span>FileInputStream fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> all <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> f<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>all<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//文件中读出来的数据是</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"文件中读出来的数据是："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">byte</span> b <span class="token operator">:</span> all<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">int</span> i <span class="token operator">=</span> b<span class="token operator">&amp;</span><span class="token number">0x000000ff</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//只取16进制的后两位</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Integer<span class="token punctuation">.</span><span class="token function">toHexString</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"把这个数字，放在GBK的棋盘上去："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>all<span class="token punctuation">,</span><span class="token string">"GBK"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// TODO Auto-generated catch block</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="缓存流"><a href="#缓存流" class="headerlink" title="缓存流"></a>缓存流</h2><p>以介质是硬盘为例，字节流和字符流的弊端：<br>在每一次读写的时候，都会访问硬盘。 如果读写的频率比较高的时候，其性能表现不佳。 </p><p>为了解决以上弊端，采用缓存流。<br>缓存流在读取的时候，会一次性读较多的数据到缓存中，以后每一次的读取，都是在缓存中访问，直到缓存中的数据读取完毕，再到硬盘中读取。 </p><p>就好比吃饭，不用缓存就是每吃一口都到锅里去铲。用缓存就是先把饭盛到碗里，碗里的吃完了，再到锅里去铲   </p><p>缓存流在写入数据的时候，会先把数据写入到缓存区，直到缓存区达到一定的量，才把这些数据，一起写入到硬盘中去。按照这种操作模式，就不会像字节流，字符流那样每写一个字节都访问硬盘，从而减少了IO操作</p><h3 id="使用缓存流读取数据"><a href="#使用缓存流读取数据" class="headerlink" title="使用缓存流读取数据"></a>使用缓存流读取数据</h3><p>缓存字符输入流 BufferedReader 可以一次读取一行数据</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> stream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>BufferedReader<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>File<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileReader<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestStream</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 准备文件lol.txt其中的内容是</span>        <span class="token comment" spellcheck="true">// garen kill teemo</span>        <span class="token comment" spellcheck="true">// teemo revive after 1 minutes</span>        <span class="token comment" spellcheck="true">// teemo try to garen, but killed again</span>        File f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"d:/lol.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 创建文件字符流</span>        <span class="token comment" spellcheck="true">// 缓存流必须建立在一个存在的流的基础上</span>        <span class="token keyword">try</span> <span class="token punctuation">(</span>                FileReader fr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>                BufferedReader br <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span>fr<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 一次读一行</span>                String line <span class="token operator">=</span> br<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>null <span class="token operator">==</span> line<span class="token punctuation">)</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//如果读到空行的话，直接结束循环</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// TODO Auto-generated catch block</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="使用缓存流写出数据"><a href="#使用缓存流写出数据" class="headerlink" title="使用缓存流写出数据"></a>使用缓存流写出数据</h3><p>PrintWriter 缓存字符输出流，可以一次写出一行数据  </p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> stream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>File<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileWriter<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>PrintWriter<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestStream</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 向文件lol2.txt中写入三行语句</span>        File f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"d:/lol2.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">(</span>                <span class="token comment" spellcheck="true">// 创建文件字符流</span>                FileWriter fw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 缓存流必须建立在一个存在的流的基础上              </span>                PrintWriter pw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PrintWriter</span><span class="token punctuation">(</span>fw<span class="token punctuation">)</span><span class="token punctuation">;</span>                      <span class="token punctuation">)</span> <span class="token punctuation">{</span>            pw<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"garen kill teemo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            pw<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"teemo revive after 1 minutes"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            pw<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"teemo try to garen, but killed again"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// TODO Auto-generated catch block</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="flush"><a href="#flush" class="headerlink" title="flush"></a>flush</h3><blockquote><p>立即直接把数据写入到硬盘，而不是等缓存满了才写出去  </p><p>这时候就需要用到flush  </p></blockquote><p>使用：<code>pw.flush()</code></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> stream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>File<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileWriter<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>PrintWriter<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestStream</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//向文件lol2.txt中写入三行语句</span>        File f <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"d:/lol2.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建文件字符流</span>        <span class="token comment" spellcheck="true">//缓存流必须建立在一个存在的流的基础上</span>        <span class="token keyword">try</span><span class="token punctuation">(</span>FileWriter fr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>PrintWriter pw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PrintWriter</span><span class="token punctuation">(</span>fr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            pw<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"garen kill teemo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//强制把缓存中的数据写入硬盘，无论缓存是否已满</span>                pw<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                       pw<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"teemo revive after 1 minutes"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                pw<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            pw<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"teemo try to garen, but killed again"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                pw<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// TODO Auto-generated catch block</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="数据流"><a href="#数据流" class="headerlink" title="数据流"></a>数据流</h2><blockquote><p>DataInputStream 数据输入流  </p><p>DataOutputStream 数据输出流  </p></blockquote><h3 id="直接进行字符串的读写"><a href="#直接进行字符串的读写" class="headerlink" title="直接进行字符串的读写"></a>直接进行字符串的读写</h3><p>使用数据流的writeUTF()和readUTF() 可以进行数据的格式化顺序读写<br>如本例，通过DataOutputStream 向文件顺序先<code>写出</code> 布尔值，整数和字符串。 然后再通过DataInputStream 顺序<code>读入</code>这些数据。  </p><p>数据流也是建立在其他流的基础上</p><p><strong>注</strong>：要用DataInputStream 读取一个文件，这个文件必须是由DataOutputStream 写出的，否则会出现EOFException，因为DataOutputStream 在写出的时候会做一些特殊标记，只有DataInputStream 才能成功的读取。  </p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> stream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>DataInputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>DataOutputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>File<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileInputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileOutputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestStream</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">write</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        File f <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"d:/lol.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">(</span>                FileInputStream fis  <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>                DataInputStream dis <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">DataInputStream</span><span class="token punctuation">(</span>fis<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">boolean</span> b<span class="token operator">=</span> dis<span class="token punctuation">.</span><span class="token function">readBoolean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> i <span class="token operator">=</span> dis<span class="token punctuation">.</span><span class="token function">readInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String str <span class="token operator">=</span> dis<span class="token punctuation">.</span><span class="token function">readUTF</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"读取到布尔值:"</span><span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"读取到整数:"</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"读取到字符串:"</span><span class="token operator">+</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        File f <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"d:/lol.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">(</span>                FileOutputStream fos  <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>                DataOutputStream dos <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">DataOutputStream</span><span class="token punctuation">(</span>fos<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">)</span><span class="token punctuation">{</span>            dos<span class="token punctuation">.</span><span class="token function">writeBoolean</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            dos<span class="token punctuation">.</span><span class="token function">writeInt</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            dos<span class="token punctuation">.</span><span class="token function">writeUTF</span><span class="token punctuation">(</span><span class="token string">"123 this is gareen"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="对象流"><a href="#对象流" class="headerlink" title="对象流"></a>对象流</h2><p>对象流指的是可以直接把一个对象以流的形式传输给其他的介质，比如硬盘 </p><p>一个对象以流的形式进行传输，叫做序列化。 该对象所对应的类，必须是实现Serializable接口</p><h3 id="序列化一个对象"><a href="#序列化一个对象" class="headerlink" title="序列化一个对象"></a>序列化一个对象</h3><p>创建一个Hero对象，设置其名称为garen。<br>把该对象序列化到一个文件garen.lol。<br>然后再通过序列化把该文件转换为一个Hero对象</p><p><strong>注</strong>：把一个对象序列化有一个前提是：这个对象的类，必须实现了Serializable接口</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> stream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>File<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileInputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileOutputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>ObjectInputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>ObjectOutputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Serializable<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestStream</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//创建一个Hero garen</span>        <span class="token comment" spellcheck="true">//要把Hero对象直接保存在文件上，务必让Hero类实现Serializable接口</span>        Hero h <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Hero</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        h<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"garen"</span><span class="token punctuation">;</span>        h<span class="token punctuation">.</span>hp <span class="token operator">=</span> <span class="token number">616</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//准备一个文件用于保存该对象</span>        File f <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"d:/garen.lol"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span><span class="token punctuation">(</span>            <span class="token comment" spellcheck="true">//创建对象输出流</span>            FileOutputStream fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>            ObjectOutputStream oos <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span>fos<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//创建对象输入流              </span>            FileInputStream fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>            ObjectInputStream ois <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span>fis<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">)</span> <span class="token punctuation">{</span>            oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">;</span>            Hero h2 <span class="token operator">=</span> <span class="token punctuation">(</span>Hero<span class="token punctuation">)</span> ois<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>h2<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>h2<span class="token punctuation">.</span>hp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// TODO Auto-generated catch block</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// TODO Auto-generated catch block</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Hero</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//表示这个类当前的版本，如果有了变化，比如新设计了属性，就应该修改这个版本号</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> 1L<span class="token punctuation">;</span>    <span class="token keyword">public</span> String name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">float</span> hp<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="System-in"><a href="#System-in" class="headerlink" title="System.in"></a>System.in</h2><blockquote><p>System.out 是常用的在控制台输出数据的</p><p>System.in 可以从控制台输入数据  </p></blockquote><h3 id="System-in-1"><a href="#System-in-1" class="headerlink" title="System.in"></a>System.in</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> stream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>InputStream<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestStream</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 控制台输入</span>        <span class="token keyword">try</span> <span class="token punctuation">(</span>InputStream is <span class="token operator">=</span> System<span class="token punctuation">.</span>in<span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 敲入a,然后敲回车可以看到</span>                <span class="token comment" spellcheck="true">// 97 13 10</span>                <span class="token comment" spellcheck="true">// 97是a的ASCII码</span>                <span class="token comment" spellcheck="true">// 13 10分别对应回车换行</span>                <span class="token keyword">int</span> i <span class="token operator">=</span> is<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Scanner读取字符串"><a href="#Scanner读取字符串" class="headerlink" title="Scanner读取字符串"></a>Scanner读取字符串</h3><p>使用System.in.read虽然可以读取数据，但是很不方便<br>使用Scanner就可以逐行读取了</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> stream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestStream</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Scanner s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                String line <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Scanner从控制台读取整数"><a href="#Scanner从控制台读取整数" class="headerlink" title="Scanner从控制台读取整数"></a>Scanner从控制台读取整数</h3><p>使用Scanner从控制台读取整数</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> stream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestStream</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Scanner s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> a <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第一个整数："</span><span class="token operator">+</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> b <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第二个整数："</span><span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java-基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java-基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS整理笔记</title>
      <link href="/posts/17634.html"/>
      <url>/posts/17634.html</url>
      
        <content type="html"><![CDATA[<h2 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h2><p>选择器主要分3种 </p><ul><li>元素选择器 </li><li>id选择器 </li><li>类选择器</li></ul><h3 id="元素选择器"><a href="#元素选择器" class="headerlink" title="元素选择器"></a>元素选择器</h3><pre class="line-numbers language-css"><code class="language-css"><span class="token selector">&lt;style>p</span><span class="token punctuation">{</span>  <span class="token property">color</span><span class="token punctuation">:</span>red<span class="token punctuation">;</span><span class="token punctuation">}</span>&lt;/style><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="id选择器"><a href="#id选择器" class="headerlink" title="id选择器"></a>id选择器</h3><pre class="line-numbers language-css"><code class="language-css"><span class="token selector"><span class="token id">#d1</span></span><span class="token punctuation">{</span>   <span class="token property">color</span><span class="token punctuation">:</span>blue<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="类选择器"><a href="#类选择器" class="headerlink" title="类选择器"></a>类选择器</h3><pre class="line-numbers language-css"><code class="language-css"><span class="token selector">&lt;style><span class="token class">.pre</span></span><span class="token punctuation">{</span>  <span class="token property">color</span><span class="token punctuation">:</span>blue<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.after</span></span><span class="token punctuation">{</span>  <span class="token property">color</span><span class="token punctuation">:</span>green<span class="token punctuation">;</span><span class="token punctuation">}</span>&lt;/style><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="更准确的选择"><a href="#更准确的选择" class="headerlink" title="更准确的选择"></a>更准确的选择</h3><pre class="line-numbers language-css"><code class="language-css"><span class="token selector">&lt;style>p<span class="token class">.blue</span></span><span class="token punctuation">{</span>  <span class="token property">color</span><span class="token punctuation">:</span>blue<span class="token punctuation">;</span><span class="token punctuation">}</span>&lt;/style>&lt;p class=<span class="token string">"blue"</span>>class=blue的p&lt;/p><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><ul><li><p>背景颜色</p><ul><li>关键字<code>background-color</code><pre class="line-numbers language-css"><code class="language-css"><span class="token selector">&lt;style>h1 </span><span class="token punctuation">{</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> transparent  //transparent是透明的<span class="token punctuation">}</span>&lt;/style><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>图片做背景</p><ul><li>关键字<code>background-image</code><pre class="line-numbers language-css"><code class="language-css"><span class="token selector">&lt;style>div<span class="token id">#test</span></span><span class="token punctuation">{</span>  <span class="token property">background-image</span><span class="token punctuation">:</span><span class="token url">url(/study/background.jpg)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>&lt;/style><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>背景重复</p><ul><li>关键字<code>background-repeat</code>属性 </li><li>其值可以选： <ul><li>repeat; 水平垂直方向都重复 （默认）</li><li>repeat-x; 只有水平方向重复 </li><li>repeat-y; 只有垂直方向重复 </li><li>no-repeat; 无重复</li></ul></li><li><strong>注意</strong>：如果设置的div的宽高属性大于图片的宽高属性，图片就会自动重复填充整个div</li><li>这样不美观，所以经常会加上no-repeat这个值</li></ul><p>示例代码：</p><pre class="line-numbers language-css"><code class="language-css"><span class="token selector">&lt;style>div<span class="token id">#norepeat</span>  </span><span class="token punctuation">{</span>    <span class="token property">background-image</span><span class="token punctuation">:</span><span class="token url">url(/study/background_small.jpg)</span><span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span><span class="token number">200</span>px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span><span class="token number">100</span>px<span class="token punctuation">;</span>    <span class="token property">background-repeat</span><span class="token punctuation">:</span> no-repeat<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token selector">div<span class="token id">#repeat-x</span>  </span><span class="token punctuation">{</span>    <span class="token property">background-image</span><span class="token punctuation">:</span><span class="token url">url(/study/background_small.jpg)</span><span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span><span class="token number">200</span>px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span><span class="token number">100</span>px<span class="token punctuation">;</span>    <span class="token property">background-repeat</span><span class="token punctuation">:</span> repeat-x<span class="token punctuation">;</span>  <span class="token punctuation">}</span>&lt;/style><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>背景平铺</p><ul><li>属性：<code>background-size</code></li><li>值：contain<pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css"><span class="token selector">div<span class="token id">#contain</span>  </span><span class="token punctuation">{</span>    <span class="token property">background-image</span><span class="token punctuation">:</span><span class="token url">url(/study/background_small.jpg)</span><span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span><span class="token number">200</span>px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span><span class="token number">100</span>px<span class="token punctuation">;</span>    <span class="token property">background-size</span><span class="token punctuation">:</span> contain<span class="token punctuation">;</span>  <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>contain<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   背景平铺，通过拉伸实现，会有失真<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="文本"><a href="#文本" class="headerlink" title="文本"></a>文本</h2></li></ul></li></ul><p>大体属性如下：<br><img src="/medias/loading.gif" data-original="http://sky03-images.oss-cn-beijing.aliyuncs.com/18-12-17/97848230.jpg" alt></p><ul><li><p>文字颜色</p><ul><li><p>属性名 <code>color</code></p></li><li><p>值：各种颜色代码，以及颜色单词</p><p><strong>color可以直接写到style里面，这个color仅针对于文字颜色，对其他无效</strong></p></li></ul><p>示例代码：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css"><span class="token selector">div<span class="token id">#colorful</span></span><span class="token punctuation">{</span>  <span class="token property">color</span><span class="token punctuation">:</span>pink<span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>colorful<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  粉红色<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>对齐</p><ul><li>属性:<code>text-align</code></li><li>值：left,right,center</li><li><strong>注意</strong>：<ul><li>div是块级元素，其默认宽度是100%，所以文本有对齐的空间前提。</li><li>但是，span却看不出右对齐效果，为什么呢？</li><li>因为span是内联元素其默认宽度就是其文本内容的宽度</li><li>简单说就是文本已经粑在其边框上了，对齐是看不出效果来的</li></ul></li></ul></li><li><p>文本修饰</p><ul><li><p>属性：text-decoration</p></li><li><p>值： overline、line-through、underline、blink、none</p></li><li><p>运行效果：<br><img src="/medias/loading.gif" data-original="http://sky03-images.oss-cn-beijing.aliyuncs.com/18-12-17/808052.jpg" alt><br>代码如下：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css"><span class="token selector">h1 </span><span class="token punctuation">{</span><span class="token property">text-decoration</span><span class="token punctuation">:</span> overline<span class="token punctuation">}</span><span class="token selector">h2 </span><span class="token punctuation">{</span><span class="token property">text-decoration</span><span class="token punctuation">:</span> line-through<span class="token punctuation">}</span><span class="token selector">h3 </span><span class="token punctuation">{</span><span class="token property">text-decoration</span><span class="token punctuation">:</span> underline<span class="token punctuation">}</span><span class="token selector">h4 </span><span class="token punctuation">{</span><span class="token property">text-decoration</span><span class="token punctuation">:</span>blink<span class="token punctuation">}</span><span class="token selector"><span class="token class">.a</span> </span><span class="token punctuation">{</span><span class="token property">text-decoration</span><span class="token punctuation">:</span> none<span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>上划线<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>删除效果<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>下划线<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h4</span><span class="token punctuation">></span></span>闪烁效果，大部分浏览器已经取消该效果<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h4</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://127.0.0.1/<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>默认的超链<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>a<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://127.0.0.1/<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>去掉了下划线的超链<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>行间距</p><ul><li>属性：<code>line-height</code> </li><li>值：数字或者百分比</li><li>代码如下：<pre class="line-numbers language-css"><code class="language-css"><span class="token selector">&lt;style><span class="token class">.p</span></span><span class="token punctuation">{</span>  <span class="token property">line-height</span><span class="token punctuation">:</span><span class="token number">200%</span><span class="token punctuation">;</span><span class="token punctuation">}</span>&lt;/style><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>字符间距</p><ul><li>属性：<code>letter-spacing</code></li><li>值： 数字<pre class="line-numbers language-css"><code class="language-css"><span class="token selector">&lt;style><span class="token class">.p</span></span><span class="token punctuation">{</span>  <span class="token property">letter-spacing</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">}</span>&lt;/style><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>单词间距</p><ul><li>属性：<code>word-spacing</code></li><li>值： 数字<pre class="line-numbers language-css"><code class="language-css"><span class="token selector">&lt;style><span class="token class">.p</span></span><span class="token punctuation">{</span>  <span class="token property">word-spacing</span><span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token punctuation">}</span>&lt;/style><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>首行缩进</p><ul><li>属性：<code>text-indent</code></li><li>值： 数字  //代表缩进多少个字符<pre class="line-numbers language-css"><code class="language-css"><span class="token selector">&lt;style><span class="token class">.p</span></span><span class="token punctuation">{</span>  <span class="token property">text-indent</span><span class="token punctuation">:</span><span class="token number">50</span><span class="token punctuation">;</span><span class="token punctuation">}</span>&lt;/style><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>大小写</p><ul><li><p>属性：<code>text-transform</code></p></li><li><p>值： uppercase 全部大写、capitalize 首字母大写、lowercase 全部小写 </p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css"><span class="token selector">p<span class="token class">.u</span> </span><span class="token punctuation">{</span><span class="token property">text-transform</span><span class="token punctuation">:</span>uppercase<span class="token punctuation">}</span><span class="token selector">p<span class="token class">.c</span> </span><span class="token punctuation">{</span><span class="token property">text-transform</span><span class="token punctuation">:</span>capitalize<span class="token punctuation">}</span><span class="token selector">p<span class="token class">.l</span> </span><span class="token punctuation">{</span><span class="token property">text-transform</span><span class="token punctuation">:</span>lowercase<span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>u<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>abcD<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>c<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>abcD<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>l<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>abcD<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>空白格</p><ul><li>属性：<code>white-space</code></li><li>值：<ul><li><code>normal</code> 默认。多个空白格或者换行符会被合并成一个空白格</li><li><code>pre</code> 有多少空白格，显示多少空白格，相当于<code>pre标签</code>,如果长度超出父容器也<code>不会换行</code>。</li><li><code>pre-wrap</code> 有多少空白格，显示多少空白格，相当于<code>pre标签</code>,如果长度超出父容器，<code>会换行</code>。</li><li><code>nowrap</code> 一直不换行，直到使用br<h3 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h3>大体关键字如下：</li></ul></li></ul></li></ul><p><img src="/medias/loading.gif" data-original="http://sky03-images.oss-cn-beijing.aliyuncs.com/18-12-17/66093415.jpg" alt></p><h3 id="鼠标样式设置"><a href="#鼠标样式设置" class="headerlink" title="鼠标样式设置"></a>鼠标样式设置</h3><p>在style里设置<code>cursor</code>属性</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">  <span class="token selector">span</span><span class="token punctuation">{</span>    <span class="token property">cursor</span><span class="token punctuation">:</span>crosshair<span class="token punctuation">;</span>  <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>鼠标移动到这段文字上，就看到鼠标样式变成了十字架<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>鼠标移动到这段文字上，就看到鼠标样式变成了十字架<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 基础 </category>
          
          <category> 前端 </category>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown使用笔记</title>
      <link href="/posts/12336.html"/>
      <url>/posts/12336.html</url>
      
        <content type="html"><![CDATA[<h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><p>在想要设置为标题的文字前面加#来表示<br>示例：</p><pre><code># 这是一级标题## 这是二级标题### 这是三级标题#### 这是四级标题##### 这是五级标题###### 这是六级标题</code></pre><p>运行效果：</p><h2 id="这是二级标题"><a href="#这是二级标题" class="headerlink" title="这是二级标题"></a>这是二级标题</h2><h3 id="这是三级标题"><a href="#这是三级标题" class="headerlink" title="这是三级标题"></a>这是三级标题</h3><h4 id="这是四级标题"><a href="#这是四级标题" class="headerlink" title="这是四级标题"></a>这是四级标题</h4><h5 id="这是五级标题"><a href="#这是五级标题" class="headerlink" title="这是五级标题"></a>这是五级标题</h5><h6 id="这是六级标题"><a href="#这是六级标题" class="headerlink" title="这是六级标题"></a>这是六级标题</h6><h2 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h2><p>代码示例：</p><pre><code>**这是加粗的文字***这是倾斜的文字****这是斜体加粗的文字***~~这是加删除线的文字~~</code></pre><p>运行效果：<br><strong>这是加粗的文字</strong><br><em>这是倾斜的文字</em><br><strong><em>这是斜体加粗的文字</em></strong><br><del>这是加删除线的文字</del></p><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p>引用也可以嵌套（在嵌套语句与上一行要分开，不然</p><p>多换行在markdown中很重要）<br>例如：</p><pre><code>&gt;一级引用&gt;&gt;二级引用&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;若干引用</code></pre><blockquote><p>一级引用</p><blockquote><p>二级引用</p><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><p>若干引用</p></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote><h2 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h2><p>三个或者三个以上的 - 或者 * 都可以。<br>代码示例：</p><pre><code>-------********</code></pre><p>效果如下：</p><hr><hr><hr><hr><h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><p>代码示例：</p><pre><code>![图片alt](图片地址 &#39;&#39;图片title&#39;&#39;)图片alt就是显示在图片下面的文字，相当于对图片内容的解释。图片title是图片的标题，当鼠标移到图片上时显示的内容。title可加可不加</code></pre><p>示例：</p><pre><code>![图片alt](图片地址 &#39;&#39;图片title&#39;&#39;)图片alt就是显示在图片下面的文字，相当于对图片内容的解释。图片title是图片的标题，当鼠标移到图片上时显示的内容。title可加可不加</code></pre><h1 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h1><ul><li><p>无序列表</p><p>语法：</p><p>无序列表用 - + * 任何一种都可以</p><p>列表语句与上一行的纯文本要分开，不然列表语句会失效</p><p>列表语句与下一行的纯文本是处于一级的</p><pre><code>- 列表内容+ 列表内容* 列表内容注意每个列表符号后面都要有一个空格</code></pre></li><li><p>有序列表</p><p>语法：</p><p>数字加点</p><pre><code>1. 列表内容2. 列表内容3. 列表内容有序列表也是，后面要有个空格</code></pre></li><li><p>列表嵌套</p><p>上一级和下一级之间敲三个空格即可</p><p>记得列表符号-和语句之间有个空格</p><pre><code>- 一级无序列表  - 二级无序列表  - 二级无序列表</code></pre><p>效果如下：</p><ul><li>一级无序列表<ul><li>二级无序列表</li><li>二级无序列表<ol><li>三级无序列表</li></ol></li></ul></li></ul><p>也可以一级有序，二级无序，或者一级无序，二级有序都可以</p></li></ul><h2 id="尖括号的使用"><a href="#尖括号的使用" class="headerlink" title="尖括号的使用"></a>尖括号的使用</h2><p><code>所有“&lt; &gt;&quot;之间的内容都会被默认被HTML的标签而不予显示。此时，就需要使用转义字符以示区别， &quot; &lt;&quot;使用&quot;&amp;lt;&quot;代替，而&quot;&gt;&quot;则使用&quot;&amp;gt;&quot;代替</code></p><p>代码：</p><pre><code>  &amp;lt;button&amp;gt;</code></pre><p>效果：</p><p>  &lt;button&gt;</p><h2 id="添加锚点"><a href="#添加锚点" class="headerlink" title="添加锚点"></a>添加锚点</h2><p>MarkDown是支持HTML语法的，所以：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#xr1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>一、目录标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#xr1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>一、正文标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 基础 </category>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML随记</title>
      <link href="/posts/16796.html"/>
      <url>/posts/16796.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>以下只针对个人不熟悉的知识点进行举例</p></blockquote><h2 id="基础部分"><a href="#基础部分" class="headerlink" title="基础部分"></a>基础部分</h2><h3 id="中文乱码问题"><a href="#中文乱码问题" class="headerlink" title="中文乱码问题"></a>中文乱码问题</h3><p>在head里添加以下代码</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Content-Type<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/html; charset<span class="token punctuation">=</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="加粗"><a href="#加粗" class="headerlink" title="加粗"></a>加粗</h3><p><code>&lt;b&gt;&lt;/b&gt;</code> （逐渐被弃用）<br><code>&lt;strong&gt;&lt;/strong&gt;</code></p><h3 id="预格式"><a href="#预格式" class="headerlink" title="预格式"></a>预格式</h3><p><code>&lt;pre&gt;&lt;/pre&gt;</code><br>在网页上显示代码</p><h3 id="删除线效果"><a href="#删除线效果" class="headerlink" title="删除线效果"></a>删除线效果</h3><p><code>&lt;del&gt;&lt;/del&gt;</code><br>delete<br><code>&lt;s&gt;&lt;/s&gt;</code><br>s标签不建议使用，因为很多浏览器不支持s标签</p><h3 id="下划线"><a href="#下划线" class="headerlink" title="下划线"></a>下划线</h3><p><code>&lt;ins&gt;&lt;/ins&gt;</code><br><code>&lt;u&gt;&lt;/u&gt;</code><br>不建议使用u标签</p><h3 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h3><p><code>&lt;hr&gt;</code></p><h3 id="居中属性"><a href="#居中属性" class="headerlink" title="居中属性"></a>居中属性</h3><p><code>&lt;h1 align=&quot;center&quot;&gt;居中标题&lt;/h1&gt;</code></p><h3 id="替换图片上的文字"><a href="#替换图片上的文字" class="headerlink" title="替换图片上的文字"></a>替换图片上的文字</h3><p>如果图片不存在，默认会显示一个缺失图片，这是不友好的<br>所以可以加上alt属性。<br>当图片存在的时候，alt是不会显示的<br>当图片不存在的时候，alt就会出现</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>这个是一个图片<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="在新的页面打开超链"><a href="#在新的页面打开超链" class="headerlink" title="在新的页面打开超链"></a>在新的页面打开超链</h3><p>target属性，target意思是目标，目的</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.12306.com<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>_blank<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>http://www.12306.com<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="超链上的提示文字"><a href="#超链上的提示文字" class="headerlink" title="超链上的提示文字"></a>超链上的提示文字</h3><p>title当鼠标放在超链上的时候，就会弹出提示文字</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.12306.com<span class="token punctuation">"</span></span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>跳转到http://www.12306.com<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>www.12306.com<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="使用图片作为超链"><a href="#使用图片作为超链" class="headerlink" title="使用图片作为超链"></a>使用图片作为超链</h3><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.12306.com<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>example.gif<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><h3 id="行列"><a href="#行列" class="headerlink" title="行列"></a>行列</h3><p><code>&lt;table&gt;</code>标签用于显示一个表格<br><code>&lt;tr&gt;</code> 表示行<br><code>&lt;td&gt;</code> 表示列又叫单元格,列<br><code>&lt;th&gt;</code> 表格里面的标题，位置上相当于<code>&lt;td&gt;</code><br>3行2列表格：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>a<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>b<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="table边框"><a href="#table边框" class="headerlink" title="table边框"></a>table边框</h3><p>设置table的属性border的宽度为1，显示表格<br><code>&lt;table border=&quot;1&quot; width=&quot;200px&quot;&gt;</code><br>width设置整个表格的宽度</p><h3 id="单元格td宽度绝对值-重点"><a href="#单元格td宽度绝对值-重点" class="headerlink" title="单元格td宽度绝对值(重点)"></a>单元格td宽度绝对值(<strong><code>重点</code></strong>)</h3><p>设置第一行的td属性width，那么这个td下面的所有td自动继承该宽度<br>其他的单元格的宽度由table总宽度和第一个单元格td的宽度决定</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">border</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>200px<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>50px<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>a<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>b<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="单元格宽度相对值"><a href="#单元格宽度相对值" class="headerlink" title="单元格宽度相对值"></a>单元格宽度相对值</h3><p>设置td的属性width为百分数</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">border</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>200px<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>80%<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>a<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>b<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="td也可以设置align属性"><a href="#td也可以设置align属性" class="headerlink" title="td也可以设置align属性"></a>td也可以设置align属性</h3><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>right<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>a<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="单元格垂直对齐"><a href="#单元格垂直对齐" class="headerlink" title="单元格垂直对齐"></a>单元格垂直对齐</h3><p>设置td的属性valign</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">border</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>200px<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>50%<span class="token punctuation">"</span></span> <span class="token attr-name">valign</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>top<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>             2   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>             2   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>             2   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">valign</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>middle<span class="token punctuation">"</span></span>  <span class="token punctuation">></span></span>3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>             4   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>             4   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>             4   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">valign</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bottom<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>a<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>             b   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>             b   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>             b   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="横跨两列-水平合并"><a href="#横跨两列-水平合并" class="headerlink" title="横跨两列, 水平合并"></a>横跨两列, 水平合并</h3><p>设置td的属性colspan,col行</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">border</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>200px<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">colspan</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>1，2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>a<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>b<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="横跨两行-垂直合并"><a href="#横跨两行-垂直合并" class="headerlink" title="横跨两行, 垂直合并"></a>横跨两行, 垂直合并</h3><p>设置td的属性rowspan,row列</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">border</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>200px<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">rowspan</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>1,3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>a<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>b<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="表格的背景色"><a href="#表格的背景色" class="headerlink" title="表格的背景色"></a>表格的背景色</h3><p>设置tr或者td的属性bgcolor</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">border</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>200px<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span> <span class="token attr-name">bgcolor</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>gray<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>50%<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>a<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span>  <span class="token attr-name">bgcolor</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pink<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>b<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><h3 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h3><p>可以理解为orderlist，有序的列表<br><code>&lt;ol&gt;&lt;/ol&gt;</code></p><h3 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h3><p>可以理解为unorderlist，无序的列表<br><code>&lt;ul&gt;&lt;/ul&gt;</code></p><hr><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><h3 id="小细节：div和span的区别"><a href="#小细节：div和span的区别" class="headerlink" title="小细节：div和span的区别"></a>小细节：div和span的区别</h3><p>div是块元素，即自动换行<br>常见的块元素还有h1，table，p<br>span是内联元素，即不会换行<br>常见的内联元素还有img，a，b，strong</p><h3 id="字体元素"><a href="#字体元素" class="headerlink" title="字体元素"></a>字体元素</h3><p>font常用的属性有 color（<strong>不是font-color</strong>）和size, 分别表示颜色和大小</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>blue<span class="token punctuation">"</span></span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>+2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>蓝色大2号字体<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="图像提交按钮"><a href="#图像提交按钮" class="headerlink" title="图像提交按钮"></a>图像提交按钮</h3><p>这里的图像按钮具有提交表单的功能，相当于submit</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>image<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>example.gif<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="在HTML中引用css样式"><a href="#在HTML中引用css样式" class="headerlink" title="在HTML中引用css样式"></a>在HTML中引用css样式</h3><p>这个老是忘</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>css的路径<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>为什么要写博客？</title>
      <link href="/posts/16107.html"/>
      <url>/posts/16107.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p> 1972年前，D.M.Ritchie 用C语言写出了世界上第一个C语言程序“Hello World”！</p><p>2018年的今天，我也来“Hello World”一下</p><h2 id="为什么要写博客"><a href="#为什么要写博客" class="headerlink" title="为什么要写博客"></a>为什么要写博客</h2><p>这里引用一下刘伟鹏大佬的一篇文章：<a href="https://mindhacks.cn/2009/02/15/why-you-should-start-blogging-now/" target="_blank" rel="noopener">为什么你应该（从现在开始就）写博客</a> </p><p>他讲的很不错，有兴趣的可以看看</p><p>我个人觉得博客可以积累自己的成长，对自己的一种见证。</p><p>而且程序员写一些技术性文章，可以帮助其他人解决问题，而且还能互相交流学习是一件很好的事情。</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
